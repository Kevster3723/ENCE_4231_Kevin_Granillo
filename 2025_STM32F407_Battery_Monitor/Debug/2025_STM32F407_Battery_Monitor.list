
2025_STM32F407_Battery_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800aa3c  0800aa3c  0000ba3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa58  0800aa58  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800aa58  0800aa58  0000ba58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa60  0800aa60  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa60  0800aa60  0000ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa64  0800aa64  0000ba64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800aa68  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000afc  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b78  20000b78  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001beac  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004355  00000000  00000000  00027f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012dd  00000000  00000000  0002db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d9c  00000000  00000000  0002eded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f995  00000000  00000000  00054b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0deb  00000000  00000000  0007451e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155309  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006af4  00000000  00000000  0015534c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007e  00000000  00000000  0015be40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aa24 	.word	0x0800aa24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800aa24 	.word	0x0800aa24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

long map(long x, long in_min, long in_max, long out_min, long out_max) // Define function to map voltage to a percentage
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	60f8      	str	r0, [r7, #12]
 80004fc:	60b9      	str	r1, [r7, #8]
 80004fe:	607a      	str	r2, [r7, #4]
 8000500:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min +1) + out_min;
 8000502:	68fa      	ldr	r2, [r7, #12]
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	69b9      	ldr	r1, [r7, #24]
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	1a8a      	subs	r2, r1, r2
 800050e:	3201      	adds	r2, #1
 8000510:	fb03 f202 	mul.w	r2, r3, r2
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	1acb      	subs	r3, r1, r3
 800051a:	3301      	adds	r3, #1
 800051c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	4413      	add	r3, r2
}
 8000524:	4618      	mov	r0, r3
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fea9 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f895 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 fab1 	bl	8000aa4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f94d 	bl	80007e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000546:	f000 f979 	bl	800083c <MX_I2S3_Init>
  MX_SPI1_Init();
 800054a:	f000 f9a7 	bl	800089c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800054e:	f009 fe13 	bl	800a178 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000552:	f000 f8f3 	bl	800073c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000556:	f000 f9d7 	bl	8000908 <MX_TIM2_Init>
  MX_TIM3_Init();
 800055a:	f000 fa55 	bl	8000a08 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Begins Reading of the voltage divider to monitor battery voltage
	  HAL_ADC_Start(&hadc1);
 800055e:	483d      	ldr	r0, [pc, #244]	@ (8000654 <main+0x124>)
 8000560:	f000 ff6e 	bl	8001440 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000564:	2164      	movs	r1, #100	@ 0x64
 8000566:	483b      	ldr	r0, [pc, #236]	@ (8000654 <main+0x124>)
 8000568:	f001 f86f 	bl	800164a <HAL_ADC_PollForConversion>
	  gADC_Value = HAL_ADC_GetValue(&hadc1);
 800056c:	4839      	ldr	r0, [pc, #228]	@ (8000654 <main+0x124>)
 800056e:	f001 fa07 	bl	8001980 <HAL_ADC_GetValue>
 8000572:	4603      	mov	r3, r0
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <main+0x128>)
 8000578:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 800057a:	4836      	ldr	r0, [pc, #216]	@ (8000654 <main+0x124>)
 800057c:	f001 f832 	bl	80015e4 <HAL_ADC_Stop>

	  gADC_Percent = map(gADC_Value, 0, 4096, 0, 100); // Converts reading to a percent
 8000580:	4b35      	ldr	r3, [pc, #212]	@ (8000658 <main+0x128>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	4618      	mov	r0, r3
 8000586:	2364      	movs	r3, #100	@ 0x64
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000590:	2100      	movs	r1, #0
 8000592:	f7ff ffaf 	bl	80004f4 <map>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b30      	ldr	r3, [pc, #192]	@ (800065c <main+0x12c>)
 800059c:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(500);
 800059e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005a2:	f000 fee5 	bl	8001370 <HAL_Delay>

	  switch(gState) // State machine
 80005a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <main+0x130>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b02      	cmp	r3, #2
 80005ac:	d02c      	beq.n	8000608 <main+0xd8>
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	dc4c      	bgt.n	800064c <main+0x11c>
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d002      	beq.n	80005bc <main+0x8c>
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d004      	beq.n	80005c4 <main+0x94>
 80005ba:	e047      	b.n	800064c <main+0x11c>
	  {
	  	  case Stop:
	  		  HAL_TIM_Base_Stop(&htim2); // Stops PWM generation
 80005bc:	4829      	ldr	r0, [pc, #164]	@ (8000664 <main+0x134>)
 80005be:	f005 fcc9 	bl	8005f54 <HAL_TIM_Base_Stop>
	  		  break;
 80005c2:	e043      	b.n	800064c <main+0x11c>
	  	  case Clockwise:
	  		if(gADC_Percent < (6.5/12))
 80005c4:	4b25      	ldr	r3, [pc, #148]	@ (800065c <main+0x12c>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d103      	bne.n	80005d4 <main+0xa4>
	  		{
	  			HAL_TIM_Base_Stop(&htim2);
 80005cc:	4825      	ldr	r0, [pc, #148]	@ (8000664 <main+0x134>)
 80005ce:	f005 fcc1 	bl	8005f54 <HAL_TIM_Base_Stop>
	  		else
	  		{
	  			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 5); // PWM set to 50% duty cycle
	  			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	  		}
	  		  break;
 80005d2:	e03b      	b.n	800064c <main+0x11c>
	  		else if(gADC_Percent >= (6.5/12) && gADC_Percent <= (7/12))
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <main+0x12c>)
 80005d6:	881b      	ldrh	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d00c      	beq.n	80005f6 <main+0xc6>
 80005dc:	4b1f      	ldr	r3, [pc, #124]	@ (800065c <main+0x12c>)
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d108      	bne.n	80005f6 <main+0xc6>
	  		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 2); // If between 6.5 and 7 Volts, rotates slow speed
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <main+0x134>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2202      	movs	r2, #2
 80005ea:	635a      	str	r2, [r3, #52]	@ 0x34
	  		 __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <main+0x134>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2200      	movs	r2, #0
 80005f2:	639a      	str	r2, [r3, #56]	@ 0x38
	  		  break;
 80005f4:	e02a      	b.n	800064c <main+0x11c>
	  			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 5); // PWM set to 50% duty cycle
 80005f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000664 <main+0x134>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2205      	movs	r2, #5
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
	  			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80005fe:	4b19      	ldr	r3, [pc, #100]	@ (8000664 <main+0x134>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2200      	movs	r2, #0
 8000604:	639a      	str	r2, [r3, #56]	@ 0x38
	  		  break;
 8000606:	e021      	b.n	800064c <main+0x11c>
	  	  case CounterClockwise: // Applies same concept as clockwise except polarities are reversed
	  		  if(gADC_Percent < (6.5/12))
 8000608:	4b14      	ldr	r3, [pc, #80]	@ (800065c <main+0x12c>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d103      	bne.n	8000618 <main+0xe8>
	  		  {
	  			  HAL_TIM_Base_Stop(&htim2);
 8000610:	4814      	ldr	r0, [pc, #80]	@ (8000664 <main+0x134>)
 8000612:	f005 fc9f 	bl	8005f54 <HAL_TIM_Base_Stop>
	  		  else
	  		  {
	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 5);
	  		  }
	  		  break;
 8000616:	e018      	b.n	800064a <main+0x11a>
	  		  else if(gADC_Percent >= (6.5/12) && gADC_Percent <= (7/12))
 8000618:	4b10      	ldr	r3, [pc, #64]	@ (800065c <main+0x12c>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00c      	beq.n	800063a <main+0x10a>
 8000620:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <main+0x12c>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d108      	bne.n	800063a <main+0x10a>
	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <main+0x134>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 2);
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <main+0x134>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2202      	movs	r2, #2
 8000636:	639a      	str	r2, [r3, #56]	@ 0x38
	  		  break;
 8000638:	e007      	b.n	800064a <main+0x11a>
	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800063a:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <main+0x134>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	635a      	str	r2, [r3, #52]	@ 0x34
	  			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 5);
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <main+0x134>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2205      	movs	r2, #5
 8000648:	639a      	str	r2, [r3, #56]	@ 0x38
	  		  break;
 800064a:	bf00      	nop
	  	 }

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800064c:	f009 fdba 	bl	800a1c4 <MX_USB_HOST_Process>
	  HAL_ADC_Start(&hadc1);
 8000650:	e785      	b.n	800055e <main+0x2e>
 8000652:	bf00      	nop
 8000654:	20000098 	.word	0x20000098
 8000658:	20000264 	.word	0x20000264
 800065c:	20000266 	.word	0x20000266
 8000660:	2000026a 	.word	0x2000026a
 8000664:	200001d4 	.word	0x200001d4

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f00a f946 	bl	800a908 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <SystemClock_Config+0xcc>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a27      	ldr	r2, [pc, #156]	@ (8000734 <SystemClock_Config+0xcc>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b25      	ldr	r3, [pc, #148]	@ (8000734 <SystemClock_Config+0xcc>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <SystemClock_Config+0xd0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a21      	ldr	r2, [pc, #132]	@ (8000738 <SystemClock_Config+0xd0>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <SystemClock_Config+0xd0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d8:	2308      	movs	r3, #8
 80006da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006e0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e6:	2307      	movs	r3, #7
 80006e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0320 	add.w	r3, r7, #32
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fd92 	bl	8005218 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006fa:	f000 fb01 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	2105      	movs	r1, #5
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fff3 	bl	8005708 <HAL_RCC_ClockConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000728:	f000 faea 	bl	8000d00 <Error_Handler>
  }
}
 800072c:	bf00      	nop
 800072e:	3750      	adds	r7, #80	@ 0x50
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	40023800 	.word	0x40023800
 8000738:	40007000 	.word	0x40007000

0800073c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	463b      	mov	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074e:	4b21      	ldr	r3, [pc, #132]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000750:	4a21      	ldr	r2, [pc, #132]	@ (80007d8 <MX_ADC1_Init+0x9c>)
 8000752:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000754:	4b1f      	ldr	r3, [pc, #124]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000756:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800075a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b1d      	ldr	r3, [pc, #116]	@ (80007d4 <MX_ADC1_Init+0x98>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000768:	4b1a      	ldr	r3, [pc, #104]	@ (80007d4 <MX_ADC1_Init+0x98>)
 800076a:	2201      	movs	r2, #1
 800076c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076e:	4b19      	ldr	r3, [pc, #100]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000778:	2200      	movs	r2, #0
 800077a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <MX_ADC1_Init+0x98>)
 800077e:	4a17      	ldr	r2, [pc, #92]	@ (80007dc <MX_ADC1_Init+0xa0>)
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <MX_ADC1_Init+0x98>)
 800078a:	2201      	movs	r2, #1
 800078c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <MX_ADC1_Init+0x98>)
 8000798:	2201      	movs	r2, #1
 800079a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079c:	480d      	ldr	r0, [pc, #52]	@ (80007d4 <MX_ADC1_Init+0x98>)
 800079e:	f000 fe0b 	bl	80013b8 <HAL_ADC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a8:	f000 faaa 	bl	8000d00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007b4:	2307      	movs	r3, #7
 80007b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <MX_ADC1_Init+0x98>)
 80007be:	f001 f90b 	bl	80019d8 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c8:	f000 fa9a 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	3710      	adds	r7, #16
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000098 	.word	0x20000098
 80007d8:	40012000 	.word	0x40012000
 80007dc:	0f000001 	.word	0x0f000001

080007e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007e4:	4b12      	ldr	r3, [pc, #72]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_I2C1_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_I2C1_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_I2C1_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	@ (8000830 <MX_I2C1_Init+0x50>)
 800081e:	f003 ff17 	bl	8004650 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 fa6a 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	200000e0 	.word	0x200000e0
 8000834:	40005400 	.word	0x40005400
 8000838:	000186a0 	.word	0x000186a0

0800083c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000842:	4a14      	ldr	r2, [pc, #80]	@ (8000894 <MX_I2S3_Init+0x58>)
 8000844:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800084c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800084e:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <MX_I2S3_Init+0x54>)
 800085c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000860:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000862:	4b0b      	ldr	r3, [pc, #44]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000864:	4a0c      	ldr	r2, [pc, #48]	@ (8000898 <MX_I2S3_Init+0x5c>)
 8000866:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000868:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <MX_I2S3_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <MX_I2S3_Init+0x54>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_I2S3_Init+0x54>)
 800087c:	f004 f82c 	bl	80048d8 <HAL_I2S_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000886:	f000 fa3b 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000134 	.word	0x20000134
 8000894:	40003c00 	.word	0x40003c00
 8000898:	00017700 	.word	0x00017700

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	@ (8000904 <MX_SPI1_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_SPI1_Init+0x64>)
 80008ee:	f005 fa59 	bl	8005da4 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f8:	f000 fa02 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000017c 	.word	0x2000017c
 8000904:	40013000 	.word	0x40013000

08000908 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	@ 0x38
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	f107 0320 	add.w	r3, r7, #32
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000938:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 800093a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800093e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 8000942:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8000946:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800094e:	4b2d      	ldr	r3, [pc, #180]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 8000950:	220a      	movs	r2, #10
 8000952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b2b      	ldr	r3, [pc, #172]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000960:	4828      	ldr	r0, [pc, #160]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 8000962:	f005 faa8 	bl	8005eb6 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800096c:	f000 f9c8 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097a:	4619      	mov	r1, r3
 800097c:	4821      	ldr	r0, [pc, #132]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 800097e:	f005 fd8d 	bl	800649c <HAL_TIM_ConfigClockSource>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000988:	f000 f9ba 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800098c:	481d      	ldr	r0, [pc, #116]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 800098e:	f005 fb79 	bl	8006084 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000998:	f000 f9b2 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4619      	mov	r1, r3
 80009aa:	4816      	ldr	r0, [pc, #88]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 80009ac:	f006 f966 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009b6:	f000 f9a3 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 80009be:	2305      	movs	r3, #5
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 80009d2:	f005 fca1 	bl	8006318 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80009dc:	f000 f990 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2208      	movs	r2, #8
 80009e4:	4619      	mov	r1, r3
 80009e6:	4807      	ldr	r0, [pc, #28]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 80009e8:	f005 fc96 	bl	8006318 <HAL_TIM_PWM_ConfigChannel>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009f2:	f000 f985 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f6:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <MX_TIM2_Init+0xfc>)
 80009f8:	f000 fb48 	bl	800108c <HAL_TIM_MspPostInit>

}
 80009fc:	bf00      	nop
 80009fe:	3738      	adds	r7, #56	@ 0x38
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200001d4 	.word	0x200001d4

08000a08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a0e:	f107 0308 	add.w	r3, r7, #8
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a26:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <MX_TIM3_Init+0x98>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8000a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a2c:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8000a30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 15000;
 8000a38:	4b18      	ldr	r3, [pc, #96]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a3a:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8000a3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a40:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b15      	ldr	r3, [pc, #84]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a4c:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a4e:	f005 fa32 	bl	8005eb6 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000a58:	f000 f952 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a62:	f107 0308 	add.w	r3, r7, #8
 8000a66:	4619      	mov	r1, r3
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a6a:	f005 fd17 	bl	800649c <HAL_TIM_ConfigClockSource>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000a74:	f000 f944 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <MX_TIM3_Init+0x94>)
 8000a86:	f006 f8f9 	bl	8006c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000a90:	f000 f936 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000021c 	.word	0x2000021c
 8000aa0:	40000400 	.word	0x40000400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08c      	sub	sp, #48	@ 0x30
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	4b7d      	ldr	r3, [pc, #500]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a7c      	ldr	r2, [pc, #496]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b7a      	ldr	r3, [pc, #488]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	61bb      	str	r3, [r7, #24]
 8000ad4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	4b76      	ldr	r3, [pc, #472]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a75      	ldr	r2, [pc, #468]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000ae0:	f043 0304 	orr.w	r3, r3, #4
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b73      	ldr	r3, [pc, #460]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0304 	and.w	r3, r3, #4
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b6f      	ldr	r3, [pc, #444]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a6e      	ldr	r2, [pc, #440]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000afc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b6c      	ldr	r3, [pc, #432]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b68      	ldr	r3, [pc, #416]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a67      	ldr	r2, [pc, #412]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b65      	ldr	r3, [pc, #404]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	4b61      	ldr	r3, [pc, #388]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a60      	ldr	r2, [pc, #384]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4e:	4a59      	ldr	r2, [pc, #356]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b50:	f043 0308 	orr.w	r3, r3, #8
 8000b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b56:	4b57      	ldr	r3, [pc, #348]	@ (8000cb4 <MX_GPIO_Init+0x210>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	f003 0308 	and.w	r3, r3, #8
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2108      	movs	r1, #8
 8000b66:	4854      	ldr	r0, [pc, #336]	@ (8000cb8 <MX_GPIO_Init+0x214>)
 8000b68:	f001 fc0c 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4852      	ldr	r0, [pc, #328]	@ (8000cbc <MX_GPIO_Init+0x218>)
 8000b72:	f001 fc07 	bl	8002384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b76:	2200      	movs	r2, #0
 8000b78:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000b7c:	4850      	ldr	r0, [pc, #320]	@ (8000cc0 <MX_GPIO_Init+0x21c>)
 8000b7e:	f001 fc01 	bl	8002384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 031c 	add.w	r3, r7, #28
 8000b96:	4619      	mov	r1, r3
 8000b98:	4847      	ldr	r0, [pc, #284]	@ (8000cb8 <MX_GPIO_Init+0x214>)
 8000b9a:	f001 fa57 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4841      	ldr	r0, [pc, #260]	@ (8000cbc <MX_GPIO_Init+0x218>)
 8000bb6:	f001 fa49 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4839      	ldr	r0, [pc, #228]	@ (8000cbc <MX_GPIO_Init+0x218>)
 8000bd6:	f001 fa39 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bde:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000be2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4835      	ldr	r0, [pc, #212]	@ (8000cc4 <MX_GPIO_Init+0x220>)
 8000bf0:	f001 fa2c 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	4619      	mov	r1, r3
 8000c06:	4830      	ldr	r0, [pc, #192]	@ (8000cc8 <MX_GPIO_Init+0x224>)
 8000c08:	f001 fa20 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4825      	ldr	r0, [pc, #148]	@ (8000cb8 <MX_GPIO_Init+0x214>)
 8000c24:	f001 fa12 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4820      	ldr	r0, [pc, #128]	@ (8000cc8 <MX_GPIO_Init+0x224>)
 8000c46:	f001 fa01 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c4a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000c4e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <MX_GPIO_Init+0x21c>)
 8000c64:	f001 f9f2 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <MX_GPIO_Init+0x21c>)
 8000c7c:	f001 f9e6 	bl	800204c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c80:	2302      	movs	r3, #2
 8000c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c84:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <MX_GPIO_Init+0x214>)
 8000c96:	f001 f9d9 	bl	800204c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2028      	movs	r0, #40	@ 0x28
 8000ca0:	f001 f99d 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ca4:	2028      	movs	r0, #40	@ 0x28
 8000ca6:	f001 f9b6 	bl	8002016 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000caa:	bf00      	nop
 8000cac:	3730      	adds	r7, #48	@ 0x30
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40020800 	.word	0x40020800
 8000cc0:	40020c00 	.word	0x40020c00
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400

08000ccc <HAL_GPIO_EXTI_Callback>:

	gButtonCount =0; // Resets button count
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // When button is pressed enables timer to see how many times button is pressed
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_BUTTON_Pin)
 8000cd6:	88fb      	ldrh	r3, [r7, #6]
 8000cd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000cdc:	d108      	bne.n	8000cf0 <HAL_GPIO_EXTI_Callback+0x24>
	{
		gButtonCount++;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000ce8:	801a      	strh	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3);
 8000cea:	4804      	ldr	r0, [pc, #16]	@ (8000cfc <HAL_GPIO_EXTI_Callback+0x30>)
 8000cec:	f005 f95a 	bl	8005fa4 <HAL_TIM_Base_Start_IT>
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000268 	.word	0x20000268
 8000cfc:	2000021c 	.word	0x2000021c

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d22:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	4a08      	ldr	r2, [pc, #32]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4a:	2007      	movs	r0, #7
 8000d4c:	f001 f93c 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40023800 	.word	0x40023800

08000d5c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	@ 0x28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a1b      	ldr	r2, [pc, #108]	@ (8000de8 <HAL_ADC_MspInit+0x8c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d12f      	bne.n	8000dde <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_ADC_MspInit+0x90>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d86:	4a19      	ldr	r2, [pc, #100]	@ (8000dec <HAL_ADC_MspInit+0x90>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <HAL_ADC_MspInit+0x90>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <HAL_ADC_MspInit+0x90>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <HAL_ADC_MspInit+0x90>)
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <HAL_ADC_MspInit+0x90>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000db6:	2302      	movs	r3, #2
 8000db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4809      	ldr	r0, [pc, #36]	@ (8000df0 <HAL_ADC_MspInit+0x94>)
 8000dca:	f001 f93f 	bl	800204c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2012      	movs	r0, #18
 8000dd4:	f001 f903 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000dd8:	2012      	movs	r0, #18
 8000dda:	f001 f91c 	bl	8002016 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	@ 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012000 	.word	0x40012000
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a19      	ldr	r2, [pc, #100]	@ (8000e78 <HAL_I2C_MspInit+0x84>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d12c      	bne.n	8000e70 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a17      	ldr	r2, [pc, #92]	@ (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000e32:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e38:	2312      	movs	r3, #18
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e44:	2304      	movs	r3, #4
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <HAL_I2C_MspInit+0x8c>)
 8000e50:	f001 f8fc 	bl	800204c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_I2C_MspInit+0x88>)
 8000e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	@ 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40005400 	.word	0x40005400
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020400 	.word	0x40020400

08000e84 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	@ 0x38
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a31      	ldr	r2, [pc, #196]	@ (8000f74 <HAL_I2S_MspInit+0xf0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d15a      	bne.n	8000f6a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000eb8:	23c0      	movs	r3, #192	@ 0xc0
 8000eba:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ec0:	f107 0314 	add.w	r3, r7, #20
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f004 fe2b 	bl	8005b20 <HAL_RCCEx_PeriphCLKConfig>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000ed0:	f7ff ff16 	bl	8000d00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	4b27      	ldr	r3, [pc, #156]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	4a26      	ldr	r2, [pc, #152]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ee2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ee4:	4b24      	ldr	r3, [pc, #144]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a18      	ldr	r2, [pc, #96]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b16      	ldr	r3, [pc, #88]	@ (8000f78 <HAL_I2S_MspInit+0xf4>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f38:	2306      	movs	r3, #6
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	480e      	ldr	r0, [pc, #56]	@ (8000f7c <HAL_I2S_MspInit+0xf8>)
 8000f44:	f001 f882 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f48:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f5a:	2306      	movs	r3, #6
 8000f5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <HAL_I2S_MspInit+0xfc>)
 8000f66:	f001 f871 	bl	800204c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	@ 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40003c00 	.word	0x40003c00
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020000 	.word	0x40020000
 8000f80:	40020800 	.word	0x40020800

08000f84 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	@ (8001008 <HAL_SPI_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12b      	bne.n	8000ffe <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	4a17      	ldr	r2, [pc, #92]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <HAL_SPI_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fde:	23e0      	movs	r3, #224	@ 0xe0
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	@ (8001010 <HAL_SPI_MspInit+0x8c>)
 8000ffa:	f001 f827 	bl	800204c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	@ 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40013000 	.word	0x40013000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001024:	d10e      	bne.n	8001044 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b16      	ldr	r3, [pc, #88]	@ (8001084 <HAL_TIM_Base_MspInit+0x70>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102e:	4a15      	ldr	r2, [pc, #84]	@ (8001084 <HAL_TIM_Base_MspInit+0x70>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6413      	str	r3, [r2, #64]	@ 0x40
 8001036:	4b13      	ldr	r3, [pc, #76]	@ (8001084 <HAL_TIM_Base_MspInit+0x70>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001042:	e01a      	b.n	800107a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <HAL_TIM_Base_MspInit+0x74>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d115      	bne.n	800107a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <HAL_TIM_Base_MspInit+0x70>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001056:	4a0b      	ldr	r2, [pc, #44]	@ (8001084 <HAL_TIM_Base_MspInit+0x70>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6413      	str	r3, [r2, #64]	@ 0x40
 800105e:	4b09      	ldr	r3, [pc, #36]	@ (8001084 <HAL_TIM_Base_MspInit+0x70>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	201d      	movs	r0, #29
 8001070:	f000 ffb5 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001074:	201d      	movs	r0, #29
 8001076:	f000 ffce 	bl	8002016 <HAL_NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40000400 	.word	0x40000400

0800108c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ac:	d11e      	bne.n	80010ec <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <HAL_TIM_MspPostInit+0x68>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80010ca:	f248 0304 	movw	r3, #32772	@ 0x8004
 80010ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010dc:	2301      	movs	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	4804      	ldr	r0, [pc, #16]	@ (80010f8 <HAL_TIM_MspPostInit+0x6c>)
 80010e8:	f000 ffb0 	bl	800204c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020000 	.word	0x40020000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001152:	f000 f8ed 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <ADC_IRQHandler+0x10>)
 8001162:	f000 fafd 	bl	8001760 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000098 	.word	0x20000098

08001170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <TIM3_IRQHandler+0x10>)
 8001176:	f004 ffde 	bl	8006136 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000021c 	.word	0x2000021c

08001184 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8001188:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800118c:	f001 f914 	bl	80023b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <OTG_FS_IRQHandler+0x10>)
 800119a:	f001 fc05 	bl	80029a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000650 	.word	0x20000650

080011a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b0:	4a14      	ldr	r2, [pc, #80]	@ (8001204 <_sbrk+0x5c>)
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <_sbrk+0x60>)
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011bc:	4b13      	ldr	r3, [pc, #76]	@ (800120c <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d102      	bne.n	80011ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <_sbrk+0x64>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <_sbrk+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <_sbrk+0x64>)
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d207      	bcs.n	80011e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d8:	f009 fbae 	bl	800a938 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	220c      	movs	r2, #12
 80011e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e6:	e009      	b.n	80011fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <_sbrk+0x64>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4413      	add	r3, r2
 80011f6:	4a05      	ldr	r2, [pc, #20]	@ (800120c <_sbrk+0x64>)
 80011f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fa:	68fb      	ldr	r3, [r7, #12]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20020000 	.word	0x20020000
 8001208:	00000400 	.word	0x00000400
 800120c:	2000026c 	.word	0x2000026c
 8001210:	20000b78 	.word	0x20000b78

08001214 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <SystemInit+0x20>)
 800121a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800121e:	4a05      	ldr	r2, [pc, #20]	@ (8001234 <SystemInit+0x20>)
 8001220:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001224:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001238:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001270 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800123c:	f7ff ffea 	bl	8001214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480c      	ldr	r0, [pc, #48]	@ (8001274 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001242:	490d      	ldr	r1, [pc, #52]	@ (8001278 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001244:	4a0d      	ldr	r2, [pc, #52]	@ (800127c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001258:	4c0a      	ldr	r4, [pc, #40]	@ (8001284 <LoopFillZerobss+0x22>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f009 fb6d 	bl	800a944 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126a:	f7ff f961 	bl	8000530 <main>
  bx  lr    
 800126e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001270:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800127c:	0800aa68 	.word	0x0800aa68
  ldr r2, =_sbss
 8001280:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001284:	20000b78 	.word	0x20000b78

08001288 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <CAN1_RX0_IRQHandler>
	...

0800128c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <HAL_Init+0x40>)
 8001296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800129a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <HAL_Init+0x40>)
 80012a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a07      	ldr	r2, [pc, #28]	@ (80012cc <HAL_Init+0x40>)
 80012ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b4:	2003      	movs	r0, #3
 80012b6:	f000 fe87 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f808 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c0:	f7ff fd24 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023c00 	.word	0x40023c00

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fe9f 	bl	8002032 <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800130c:	f000 fe67 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	@ (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20000008 	.word	0x20000008
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	20000270 	.word	0x20000270

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000270 	.word	0x20000270

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008

080013b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e033      	b.n	8001436 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fcc0 	bl	8000d5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d118      	bne.n	8001428 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013fe:	f023 0302 	bic.w	r3, r3, #2
 8001402:	f043 0202 	orr.w	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fc06 	bl	8001c1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141a:	f023 0303 	bic.w	r3, r3, #3
 800141e:	f043 0201 	orr.w	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	641a      	str	r2, [r3, #64]	@ 0x40
 8001426:	e001      	b.n	800142c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001434:	7bfb      	ldrb	r3, [r7, #15]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001452:	2b01      	cmp	r3, #1
 8001454:	d101      	bne.n	800145a <HAL_ADC_Start+0x1a>
 8001456:	2302      	movs	r3, #2
 8001458:	e0b2      	b.n	80015c0 <HAL_ADC_Start+0x180>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b01      	cmp	r3, #1
 800146e:	d018      	beq.n	80014a2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0201 	orr.w	r2, r2, #1
 800147e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001480:	4b52      	ldr	r3, [pc, #328]	@ (80015cc <HAL_ADC_Start+0x18c>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_ADC_Start+0x190>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	0c9a      	lsrs	r2, r3, #18
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001494:	e002      	b.n	800149c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3b01      	subs	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d17a      	bne.n	80015a6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014da:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80014ee:	d106      	bne.n	80014fe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f4:	f023 0206 	bic.w	r2, r3, #6
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	645a      	str	r2, [r3, #68]	@ 0x44
 80014fc:	e002      	b.n	8001504 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800150c:	4b31      	ldr	r3, [pc, #196]	@ (80015d4 <HAL_ADC_Start+0x194>)
 800150e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001518:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2b00      	cmp	r3, #0
 8001524:	d12a      	bne.n	800157c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a2b      	ldr	r2, [pc, #172]	@ (80015d8 <HAL_ADC_Start+0x198>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d015      	beq.n	800155c <HAL_ADC_Start+0x11c>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a29      	ldr	r2, [pc, #164]	@ (80015dc <HAL_ADC_Start+0x19c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d105      	bne.n	8001546 <HAL_ADC_Start+0x106>
 800153a:	4b26      	ldr	r3, [pc, #152]	@ (80015d4 <HAL_ADC_Start+0x194>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00a      	beq.n	800155c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a25      	ldr	r2, [pc, #148]	@ (80015e0 <HAL_ADC_Start+0x1a0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d136      	bne.n	80015be <HAL_ADC_Start+0x17e>
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <HAL_ADC_Start+0x194>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0310 	and.w	r3, r3, #16
 8001558:	2b00      	cmp	r3, #0
 800155a:	d130      	bne.n	80015be <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d129      	bne.n	80015be <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	e020      	b.n	80015be <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a15      	ldr	r2, [pc, #84]	@ (80015d8 <HAL_ADC_Start+0x198>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d11b      	bne.n	80015be <HAL_ADC_Start+0x17e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d114      	bne.n	80015be <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	e00b      	b.n	80015be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	f043 0201 	orr.w	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	20000000 	.word	0x20000000
 80015d0:	431bde83 	.word	0x431bde83
 80015d4:	40012300 	.word	0x40012300
 80015d8:	40012000 	.word	0x40012000
 80015dc:	40012100 	.word	0x40012100
 80015e0:	40012200 	.word	0x40012200

080015e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Stop+0x16>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e021      	b.n	800163e <HAL_ADC_Stop+0x5a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d109      	bne.n	8001634 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
 8001652:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001666:	d113      	bne.n	8001690 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001676:	d10b      	bne.n	8001690 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f043 0220 	orr.w	r2, r3, #32
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e063      	b.n	8001758 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff fe62 	bl	8001358 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001696:	e021      	b.n	80016dc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800169e:	d01d      	beq.n	80016dc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d007      	beq.n	80016b6 <HAL_ADC_PollForConversion+0x6c>
 80016a6:	f7ff fe57 	bl	8001358 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d212      	bcs.n	80016dc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d00b      	beq.n	80016dc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	f043 0204 	orr.w	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e03d      	b.n	8001758 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d1d6      	bne.n	8001698 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 0212 	mvn.w	r2, #18
 80016f2:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d123      	bne.n	8001756 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11f      	bne.n	8001756 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001720:	2b00      	cmp	r3, #0
 8001722:	d006      	beq.n	8001732 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800172e:	2b00      	cmp	r3, #0
 8001730:	d111      	bne.n	8001756 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001736:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	2300      	movs	r3, #0
 800176e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d049      	beq.n	800182a <HAL_ADC_IRQHandler+0xca>
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d046      	beq.n	800182a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d12b      	bne.n	800181a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d127      	bne.n	800181a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d006      	beq.n	80017e6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0220 	bic.w	r2, r2, #32
 80017f4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d105      	bne.n	800181a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	f043 0201 	orr.w	r2, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f8bd 	bl	800199a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f06f 0212 	mvn.w	r2, #18
 8001828:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001838:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d057      	beq.n	80018f0 <HAL_ADC_IRQHandler+0x190>
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d054      	beq.n	80018f0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d139      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001872:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001884:	2b00      	cmp	r3, #0
 8001886:	d12b      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001892:	2b00      	cmp	r3, #0
 8001894:	d124      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11d      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d119      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80018ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	f043 0201 	orr.w	r2, r3, #1
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fa97 	bl	8001e14 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f06f 020c 	mvn.w	r2, #12
 80018ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d017      	beq.n	8001936 <HAL_ADC_IRQHandler+0x1d6>
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d014      	beq.n	8001936 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b01      	cmp	r3, #1
 8001918:	d10d      	bne.n	8001936 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f841 	bl	80019ae <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0201 	mvn.w	r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001944:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d015      	beq.n	8001978 <HAL_ADC_IRQHandler+0x218>
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d012      	beq.n	8001978 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001956:	f043 0202 	orr.w	r2, r3, #2
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0220 	mvn.w	r2, #32
 8001966:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f82a 	bl	80019c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f06f 0220 	mvn.w	r2, #32
 8001976:	601a      	str	r2, [r3, #0]
  }
}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80019c2:	b480      	push	{r7}
 80019c4:	b083      	sub	sp, #12
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1c>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e105      	b.n	8001c00 <HAL_ADC_ConfigChannel+0x228>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	d925      	bls.n	8001a50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68d9      	ldr	r1, [r3, #12]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	3b1e      	subs	r3, #30
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43da      	mvns	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	400a      	ands	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68d9      	ldr	r1, [r3, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	4403      	add	r3, r0
 8001a42:	3b1e      	subs	r3, #30
 8001a44:	409a      	lsls	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	e022      	b.n	8001a96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6919      	ldr	r1, [r3, #16]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	2207      	movs	r2, #7
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6919      	ldr	r1, [r3, #16]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	4603      	mov	r3, r0
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4403      	add	r3, r0
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d824      	bhi.n	8001ae8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b05      	subs	r3, #5
 8001ab0:	221f      	movs	r2, #31
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b05      	subs	r3, #5
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae6:	e04c      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d824      	bhi.n	8001b3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	4413      	add	r3, r2
 8001b00:	3b23      	subs	r3, #35	@ 0x23
 8001b02:	221f      	movs	r2, #31
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43da      	mvns	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	400a      	ands	r2, r1
 8001b10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4618      	mov	r0, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b23      	subs	r3, #35	@ 0x23
 8001b2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b38:	e023      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	4413      	add	r3, r2
 8001b4a:	3b41      	subs	r3, #65	@ 0x41
 8001b4c:	221f      	movs	r2, #31
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	400a      	ands	r2, r1
 8001b5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	3b41      	subs	r3, #65	@ 0x41
 8001b76:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b82:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <HAL_ADC_ConfigChannel+0x234>)
 8001b84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a21      	ldr	r2, [pc, #132]	@ (8001c10 <HAL_ADC_ConfigChannel+0x238>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d109      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1cc>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b12      	cmp	r3, #18
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_ADC_ConfigChannel+0x238>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d123      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d003      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x1e6>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b11      	cmp	r3, #17
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b10      	cmp	r3, #16
 8001bd0:	d111      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001bd2:	4b10      	ldr	r3, [pc, #64]	@ (8001c14 <HAL_ADC_ConfigChannel+0x23c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <HAL_ADC_ConfigChannel+0x240>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	0c9a      	lsrs	r2, r3, #18
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001be8:	e002      	b.n	8001bf0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3b01      	subs	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f9      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40012300 	.word	0x40012300
 8001c10:	40012000 	.word	0x40012000
 8001c14:	20000000 	.word	0x20000000
 8001c18:	431bde83 	.word	0x431bde83

08001c1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c24:	4b79      	ldr	r3, [pc, #484]	@ (8001e0c <ADC_Init+0x1f0>)
 8001c26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	685a      	ldr	r2, [r3, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6859      	ldr	r1, [r3, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	021a      	lsls	r2, r3, #8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6899      	ldr	r1, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	4a58      	ldr	r2, [pc, #352]	@ (8001e10 <ADC_Init+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001cc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6899      	ldr	r1, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ce4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6899      	ldr	r1, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	e00f      	b.n	8001d1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d18:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0202 	bic.w	r2, r2, #2
 8001d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7e1b      	ldrb	r3, [r3, #24]
 8001d34:	005a      	lsls	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d01b      	beq.n	8001d80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d56:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001d66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6859      	ldr	r1, [r3, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d72:	3b01      	subs	r3, #1
 8001d74:	035a      	lsls	r2, r3, #13
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	e007      	b.n	8001d90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	051a      	lsls	r2, r3, #20
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6899      	ldr	r1, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dd2:	025a      	lsls	r2, r3, #9
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6899      	ldr	r1, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	029a      	lsls	r2, r3, #10
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	609a      	str	r2, [r3, #8]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	40012300 	.word	0x40012300
 8001e10:	0f000001 	.word	0x0f000001

08001e14 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff3e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff31 	bl	8001e8c <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800205a:	2300      	movs	r3, #0
 800205c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	e16b      	b.n	8002340 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	f040 815a 	bne.w	800233a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b01      	cmp	r3, #1
 8002090:	d005      	beq.n	800209e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800209a:	2b02      	cmp	r3, #2
 800209c:	d130      	bne.n	8002100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 0201 	and.w	r2, r3, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 0303 	and.w	r3, r3, #3
 8002108:	2b03      	cmp	r3, #3
 800210a:	d017      	beq.n	800213c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d123      	bne.n	8002190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	220f      	movs	r2, #15
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	08da      	lsrs	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3208      	adds	r2, #8
 800218a:	69b9      	ldr	r1, [r7, #24]
 800218c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	2203      	movs	r2, #3
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0203 	and.w	r2, r3, #3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 80b4 	beq.w	800233a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	4b60      	ldr	r3, [pc, #384]	@ (8002358 <HAL_GPIO_Init+0x30c>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021da:	4a5f      	ldr	r2, [pc, #380]	@ (8002358 <HAL_GPIO_Init+0x30c>)
 80021dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_GPIO_Init+0x30c>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ee:	4a5b      	ldr	r2, [pc, #364]	@ (800235c <HAL_GPIO_Init+0x310>)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	089b      	lsrs	r3, r3, #2
 80021f4:	3302      	adds	r3, #2
 80021f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	220f      	movs	r2, #15
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43db      	mvns	r3, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4013      	ands	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	@ (8002360 <HAL_GPIO_Init+0x314>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d02b      	beq.n	8002272 <HAL_GPIO_Init+0x226>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a51      	ldr	r2, [pc, #324]	@ (8002364 <HAL_GPIO_Init+0x318>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d025      	beq.n	800226e <HAL_GPIO_Init+0x222>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a50      	ldr	r2, [pc, #320]	@ (8002368 <HAL_GPIO_Init+0x31c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01f      	beq.n	800226a <HAL_GPIO_Init+0x21e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <HAL_GPIO_Init+0x320>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d019      	beq.n	8002266 <HAL_GPIO_Init+0x21a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a4e      	ldr	r2, [pc, #312]	@ (8002370 <HAL_GPIO_Init+0x324>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d013      	beq.n	8002262 <HAL_GPIO_Init+0x216>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4d      	ldr	r2, [pc, #308]	@ (8002374 <HAL_GPIO_Init+0x328>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d00d      	beq.n	800225e <HAL_GPIO_Init+0x212>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a4c      	ldr	r2, [pc, #304]	@ (8002378 <HAL_GPIO_Init+0x32c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d007      	beq.n	800225a <HAL_GPIO_Init+0x20e>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a4b      	ldr	r2, [pc, #300]	@ (800237c <HAL_GPIO_Init+0x330>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_GPIO_Init+0x20a>
 8002252:	2307      	movs	r3, #7
 8002254:	e00e      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002256:	2308      	movs	r3, #8
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800225a:	2306      	movs	r3, #6
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x228>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x228>
 8002272:	2300      	movs	r3, #0
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002284:	4935      	ldr	r1, [pc, #212]	@ (800235c <HAL_GPIO_Init+0x310>)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002292:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_GPIO_Init+0x334>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022b6:	4a32      	ldr	r2, [pc, #200]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022bc:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e0:	4a27      	ldr	r2, [pc, #156]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_GPIO_Init+0x334>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4013      	ands	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230a:	4a1d      	ldr	r2, [pc, #116]	@ (8002380 <HAL_GPIO_Init+0x334>)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_GPIO_Init+0x334>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002334:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <HAL_GPIO_Init+0x334>)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3301      	adds	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f ae90 	bls.w	8002068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800
 800235c:	40013800 	.word	0x40013800
 8002360:	40020000 	.word	0x40020000
 8002364:	40020400 	.word	0x40020400
 8002368:	40020800 	.word	0x40020800
 800236c:	40020c00 	.word	0x40020c00
 8002370:	40021000 	.word	0x40021000
 8002374:	40021400 	.word	0x40021400
 8002378:	40021800 	.word	0x40021800
 800237c:	40021c00 	.word	0x40021c00
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
 8002390:	4613      	mov	r3, r2
 8002392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002394:	787b      	ldrb	r3, [r7, #1]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023a0:	e003      	b.n	80023aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023a2:	887b      	ldrh	r3, [r7, #2]
 80023a4:	041a      	lsls	r2, r3, #16
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	619a      	str	r2, [r3, #24]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023c2:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d006      	beq.n	80023dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d0:	88fb      	ldrh	r3, [r7, #6]
 80023d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe fc78 	bl	8000ccc <HAL_GPIO_EXTI_Callback>
  }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40013c00 	.word	0x40013c00

080023e8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e059      	b.n	80024ae <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f007 ff0d 	bl	800a234 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2203      	movs	r2, #3
 800241e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002428:	d102      	bne.n	8002430 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fd26 	bl	8006e86 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7c1a      	ldrb	r2, [r3, #16]
 8002442:	f88d 2000 	strb.w	r2, [sp]
 8002446:	3304      	adds	r3, #4
 8002448:	cb0e      	ldmia	r3, {r1, r2, r3}
 800244a:	f004 fca7 	bl	8006d9c <USB_CoreInit>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e026      	b.n	80024ae <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2101      	movs	r1, #1
 8002466:	4618      	mov	r0, r3
 8002468:	f004 fd1e 	bl	8006ea8 <USB_SetCurrentMode>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e017      	b.n	80024ae <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6818      	ldr	r0, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	7c1a      	ldrb	r2, [r3, #16]
 8002486:	f88d 2000 	strb.w	r2, [sp]
 800248a:	3304      	adds	r3, #4
 800248c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800248e:	f004 fec1 	bl	8007214 <USB_HostInit>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e004      	b.n	80024ae <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b08b      	sub	sp, #44	@ 0x2c
 80024ba:	af04      	add	r7, sp, #16
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	4608      	mov	r0, r1
 80024c0:	4611      	mov	r1, r2
 80024c2:	461a      	mov	r2, r3
 80024c4:	4603      	mov	r3, r0
 80024c6:	70fb      	strb	r3, [r7, #3]
 80024c8:	460b      	mov	r3, r1
 80024ca:	70bb      	strb	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80024d0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80024d2:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_HCD_HC_Init+0x2c>
 80024de:	2302      	movs	r3, #2
 80024e0:	e09d      	b.n	800261e <HAL_HCD_HC_Init+0x168>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	6879      	ldr	r1, [r7, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	1a9b      	subs	r3, r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	440b      	add	r3, r1
 80024f8:	3319      	adds	r3, #25
 80024fa:	2200      	movs	r2, #0
 80024fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024fe:	78fa      	ldrb	r2, [r7, #3]
 8002500:	6879      	ldr	r1, [r7, #4]
 8002502:	4613      	mov	r3, r2
 8002504:	011b      	lsls	r3, r3, #4
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3314      	adds	r3, #20
 800250e:	787a      	ldrb	r2, [r7, #1]
 8002510:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	3315      	adds	r3, #21
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	3326      	adds	r3, #38	@ 0x26
 8002536:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800253a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	78bb      	ldrb	r3, [r7, #2]
 8002540:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002544:	b2d8      	uxtb	r0, r3
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3316      	adds	r3, #22
 8002554:	4602      	mov	r2, r0
 8002556:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	4619      	mov	r1, r3
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 fbc7 	bl	8002cf0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002562:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002566:	2b00      	cmp	r3, #0
 8002568:	da0a      	bge.n	8002580 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800256a:	78fa      	ldrb	r2, [r7, #3]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3317      	adds	r3, #23
 800257a:	2201      	movs	r2, #1
 800257c:	701a      	strb	r2, [r3, #0]
 800257e:	e009      	b.n	8002594 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3317      	adds	r3, #23
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f004 ff9f 	bl	80074dc <USB_GetHostSpeed>
 800259e:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80025a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d10b      	bne.n	80025c0 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80025a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d107      	bne.n	80025c0 <HAL_HCD_HC_Init+0x10a>
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2bbc      	cmp	r3, #188	@ 0xbc
 80025ba:	d901      	bls.n	80025c0 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80025bc:	23bc      	movs	r3, #188	@ 0xbc
 80025be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	1a9b      	subs	r3, r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	3318      	adds	r3, #24
 80025d0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80025d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80025d6:	78fa      	ldrb	r2, [r7, #3]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	b298      	uxth	r0, r3
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3328      	adds	r3, #40	@ 0x28
 80025ea:	4602      	mov	r2, r0
 80025ec:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	787c      	ldrb	r4, [r7, #1]
 80025f8:	78ba      	ldrb	r2, [r7, #2]
 80025fa:	78f9      	ldrb	r1, [r7, #3]
 80025fc:	9302      	str	r3, [sp, #8]
 80025fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	4623      	mov	r3, r4
 800260c:	f004 ff8e 	bl	800752c <USB_HC_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800261c:	7bfb      	ldrb	r3, [r7, #15]
}
 800261e:	4618      	mov	r0, r3
 8002620:	371c      	adds	r7, #28
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}

08002626 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	460b      	mov	r3, r1
 8002630:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_HCD_HC_Halt+0x1e>
 8002640:	2302      	movs	r3, #2
 8002642:	e00f      	b.n	8002664 <HAL_HCD_HC_Halt+0x3e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f005 fb20 	bl	8007c9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002662:	7bfb      	ldrb	r3, [r7, #15]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4603      	mov	r3, r0
 800267c:	70fb      	strb	r3, [r7, #3]
 800267e:	460b      	mov	r3, r1
 8002680:	70bb      	strb	r3, [r7, #2]
 8002682:	4613      	mov	r3, r2
 8002684:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002686:	78fa      	ldrb	r2, [r7, #3]
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	011b      	lsls	r3, r3, #4
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3317      	adds	r3, #23
 8002696:	78ba      	ldrb	r2, [r7, #2]
 8002698:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	3326      	adds	r3, #38	@ 0x26
 80026aa:	787a      	ldrb	r2, [r7, #1]
 80026ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80026ae:	7c3b      	ldrb	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d114      	bne.n	80026de <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	332a      	adds	r3, #42	@ 0x2a
 80026c4:	2203      	movs	r2, #3
 80026c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	1a9b      	subs	r3, r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	3319      	adds	r3, #25
 80026d8:	7f3a      	ldrb	r2, [r7, #28]
 80026da:	701a      	strb	r2, [r3, #0]
 80026dc:	e009      	b.n	80026f2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026de:	78fa      	ldrb	r2, [r7, #3]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	011b      	lsls	r3, r3, #4
 80026e6:	1a9b      	subs	r3, r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	332a      	adds	r3, #42	@ 0x2a
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80026f2:	787b      	ldrb	r3, [r7, #1]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	f200 8102 	bhi.w	80028fe <HAL_HCD_HC_SubmitRequest+0x292>
 80026fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002700 <HAL_HCD_HC_SubmitRequest+0x94>)
 80026fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002700:	08002711 	.word	0x08002711
 8002704:	080028e9 	.word	0x080028e9
 8002708:	080027d5 	.word	0x080027d5
 800270c:	0800285f 	.word	0x0800285f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002710:	7c3b      	ldrb	r3, [r7, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	f040 80f5 	bne.w	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002718:	78bb      	ldrb	r3, [r7, #2]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d12d      	bne.n	800277a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800271e:	8b3b      	ldrh	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	333d      	adds	r3, #61	@ 0x3d
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333d      	adds	r3, #61	@ 0x3d
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10a      	bne.n	8002764 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	332a      	adds	r3, #42	@ 0x2a
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002762:	e0ce      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	332a      	adds	r3, #42	@ 0x2a
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
      break;
 8002778:	e0c3      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	331a      	adds	r3, #26
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	f040 80b8 	bne.w	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	333c      	adds	r3, #60	@ 0x3c
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	332a      	adds	r3, #42	@ 0x2a
 80027b8:	2200      	movs	r2, #0
 80027ba:	701a      	strb	r2, [r3, #0]
      break;
 80027bc:	e0a1      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	332a      	adds	r3, #42	@ 0x2a
 80027ce:	2202      	movs	r2, #2
 80027d0:	701a      	strb	r2, [r3, #0]
      break;
 80027d2:	e096      	b.n	8002902 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80027d4:	78bb      	ldrb	r3, [r7, #2]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d120      	bne.n	800281c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	1a9b      	subs	r3, r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	333d      	adds	r3, #61	@ 0x3d
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	332a      	adds	r3, #42	@ 0x2a
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002804:	e07e      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	332a      	adds	r3, #42	@ 0x2a
 8002816:	2202      	movs	r2, #2
 8002818:	701a      	strb	r2, [r3, #0]
      break;
 800281a:	e073      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	333c      	adds	r3, #60	@ 0x3c
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10a      	bne.n	8002848 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	332a      	adds	r3, #42	@ 0x2a
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
      break;
 8002846:	e05d      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	332a      	adds	r3, #42	@ 0x2a
 8002858:	2202      	movs	r2, #2
 800285a:	701a      	strb	r2, [r3, #0]
      break;
 800285c:	e052      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800285e:	78bb      	ldrb	r3, [r7, #2]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d120      	bne.n	80028a6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	333d      	adds	r3, #61	@ 0x3d
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	1a9b      	subs	r3, r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	332a      	adds	r3, #42	@ 0x2a
 800288a:	2200      	movs	r2, #0
 800288c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800288e:	e039      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	332a      	adds	r3, #42	@ 0x2a
 80028a0:	2202      	movs	r2, #2
 80028a2:	701a      	strb	r2, [r3, #0]
      break;
 80028a4:	e02e      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	333c      	adds	r3, #60	@ 0x3c
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	332a      	adds	r3, #42	@ 0x2a
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
      break;
 80028d0:	e018      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028d2:	78fa      	ldrb	r2, [r7, #3]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	1a9b      	subs	r3, r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	332a      	adds	r3, #42	@ 0x2a
 80028e2:	2202      	movs	r2, #2
 80028e4:	701a      	strb	r2, [r3, #0]
      break;
 80028e6:	e00d      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	332a      	adds	r3, #42	@ 0x2a
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]
      break;
 80028fc:	e002      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80028fe:	bf00      	nop
 8002900:	e000      	b.n	8002904 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002902:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	332c      	adds	r3, #44	@ 0x2c
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	8b39      	ldrh	r1, [r7, #24]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4403      	add	r3, r0
 8002928:	3334      	adds	r3, #52	@ 0x34
 800292a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334c      	adds	r3, #76	@ 0x4c
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3338      	adds	r3, #56	@ 0x38
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3315      	adds	r3, #21
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	334d      	adds	r3, #77	@ 0x4d
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6818      	ldr	r0, [r3, #0]
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	3310      	adds	r3, #16
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	1d19      	adds	r1, r3, #4
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	799b      	ldrb	r3, [r3, #6]
 8002996:	461a      	mov	r2, r3
 8002998:	f004 fef4 	bl	8007784 <USB_HC_StartXfer>
 800299c:	4603      	mov	r3, r0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop

080029a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f004 fbe8 	bl	8007194 <USB_GetMode>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	f040 80fb 	bne.w	8002bc2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fbab 	bl	800712c <USB_ReadInterrupts>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80f1 	beq.w	8002bc0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 fba2 	bl	800712c <USB_ReadInterrupts>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80029f2:	d104      	bne.n	80029fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80029fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f004 fb92 	bl	800712c <USB_ReadInterrupts>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a12:	d104      	bne.n	8002a1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002a1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f004 fb82 	bl	800712c <USB_ReadInterrupts>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a32:	d104      	bne.n	8002a3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 fb72 	bl	800712c <USB_ReadInterrupts>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d103      	bne.n	8002a5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2202      	movs	r2, #2
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fb64 	bl	800712c <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a6e:	d120      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002a78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d113      	bne.n	8002ab2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002a8a:	2110      	movs	r1, #16
 8002a8c:	6938      	ldr	r0, [r7, #16]
 8002a8e:	f004 fa57 	bl	8006f40 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002a92:	6938      	ldr	r0, [r7, #16]
 8002a94:	f004 fa86 	bl	8006fa4 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7a5b      	ldrb	r3, [r3, #9]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d105      	bne.n	8002aac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 fc78 	bl	800739c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f007 fc3f 	bl	800a330 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fb38 	bl	800712c <USB_ReadInterrupts>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac6:	d102      	bne.n	8002ace <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f001 fd4d 	bl	8004568 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fb2a 	bl	800712c <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d106      	bne.n	8002af0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f007 fc08 	bl	800a2f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2208      	movs	r2, #8
 8002aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fb19 	bl	800712c <USB_ReadInterrupts>
 8002afa:	4603      	mov	r3, r0
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b04:	d139      	bne.n	8002b7a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f005 f8b4 	bl	8007c78 <USB_HC_ReadInterrupt>
 8002b10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
 8002b16:	e025      	b.n	8002b64 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	fa22 f303 	lsr.w	r3, r2, r3
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d018      	beq.n	8002b5e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b42:	d106      	bne.n	8002b52 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	4619      	mov	r1, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f905 	bl	8002d5a <HCD_HC_IN_IRQHandler>
 8002b50:	e005      	b.n	8002b5e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 ff67 	bl	8003a2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	3301      	adds	r3, #1
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	795b      	ldrb	r3, [r3, #5]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d3d3      	bcc.n	8002b18 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f004 fad4 	bl	800712c <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d101      	bne.n	8002b92 <HAL_HCD_IRQHandler+0x1ea>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <HAL_HCD_IRQHandler+0x1ec>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699a      	ldr	r2, [r3, #24]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f001 fbfe 	bl	80043aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699a      	ldr	r2, [r3, #24]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0210 	orr.w	r2, r2, #16
 8002bbc:	619a      	str	r2, [r3, #24]
 8002bbe:	e000      	b.n	8002bc2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002bc0:	bf00      	nop
    }
  }
}
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_HCD_Start+0x16>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e013      	b.n	8002c06 <HAL_HCD_Start+0x3e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2101      	movs	r1, #1
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 fc3c 	bl	800746a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 f934 	bl	8006e64 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_HCD_Stop+0x16>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e00d      	b.n	8002c40 <HAL_HCD_Stop+0x32>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f005 f98f 	bl	8007f54 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 fbde 	bl	8007416 <USB_ResetPort>
 8002c5a:	4603      	mov	r3, r0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334c      	adds	r3, #76	@ 0x4c
 8002c80:	781b      	ldrb	r3, [r3, #0]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	460b      	mov	r3, r1
 8002c98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3338      	adds	r3, #56	@ 0x38
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f004 fc20 	bl	800750a <USB_GetCurrentFrame>
 8002cca:	4603      	mov	r3, r0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 fbfb 	bl	80074dc <USB_GetHostSpeed>
 8002ce6:	4603      	mov	r3, r0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	331a      	adds	r3, #26
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	331b      	adds	r3, #27
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3325      	adds	r3, #37	@ 0x25
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3324      	adds	r3, #36	@ 0x24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 f9ea 	bl	8007152 <USB_ReadChInterrupts>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d11a      	bne.n	8002dbe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	015a      	lsls	r2, r3, #5
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4413      	add	r3, r2
 8002d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d94:	461a      	mov	r2, r3
 8002d96:	2304      	movs	r3, #4
 8002d98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	334d      	adds	r3, #77	@ 0x4d
 8002daa:	2207      	movs	r2, #7
 8002dac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 ff6f 	bl	8007c9a <USB_HC_Halt>
 8002dbc:	e09e      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 f9c3 	bl	8007152 <USB_ReadChInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd6:	d11b      	bne.n	8002e10 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002dd8:	78fb      	ldrb	r3, [r7, #3]
 8002dda:	015a      	lsls	r2, r3, #5
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4413      	add	r3, r2
 8002de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002de4:	461a      	mov	r2, r3
 8002de6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334d      	adds	r3, #77	@ 0x4d
 8002dfc:	2208      	movs	r2, #8
 8002dfe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	4611      	mov	r1, r2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f004 ff46 	bl	8007c9a <USB_HC_Halt>
 8002e0e:	e075      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	78fa      	ldrb	r2, [r7, #3]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f004 f99a 	bl	8007152 <USB_ReadChInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 0308 	and.w	r3, r3, #8
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d11a      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e34:	461a      	mov	r2, r3
 8002e36:	2308      	movs	r3, #8
 8002e38:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	6879      	ldr	r1, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	440b      	add	r3, r1
 8002e48:	334d      	adds	r3, #77	@ 0x4d
 8002e4a:	2206      	movs	r2, #6
 8002e4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f004 ff1f 	bl	8007c9a <USB_HC_Halt>
 8002e5c:	e04e      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f973 	bl	8007152 <USB_ReadChInterrupts>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e76:	d11b      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e84:	461a      	mov	r2, r3
 8002e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334d      	adds	r3, #77	@ 0x4d
 8002e9c:	2209      	movs	r2, #9
 8002e9e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	4611      	mov	r1, r2
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 fef6 	bl	8007c9a <USB_HC_Halt>
 8002eae:	e025      	b.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f004 f94a 	bl	8007152 <USB_ReadChInterrupts>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d119      	bne.n	8002efc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	334d      	adds	r3, #77	@ 0x4d
 8002eea:	2207      	movs	r2, #7
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f004 fecf 	bl	8007c9a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f004 f924 	bl	8007152 <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f14:	d112      	bne.n	8002f3c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 febb 	bl	8007c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f30:	461a      	mov	r2, r3
 8002f32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f36:	6093      	str	r3, [r2, #8]
 8002f38:	f000 bd75 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4611      	mov	r1, r2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 f904 	bl	8007152 <USB_ReadChInterrupts>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	f040 8128 	bne.w	80031a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	2320      	movs	r3, #32
 8002f66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	331b      	adds	r3, #27
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d119      	bne.n	8002fb2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	0151      	lsls	r1, r2, #5
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fb0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	799b      	ldrb	r3, [r3, #6]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d01b      	beq.n	8002ff2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3330      	adds	r3, #48	@ 0x30
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	1ac9      	subs	r1, r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4403      	add	r3, r0
 8002fee:	3338      	adds	r3, #56	@ 0x38
 8002ff0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	334d      	adds	r3, #77	@ 0x4d
 8003002:	2201      	movs	r2, #1
 8003004:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3344      	adds	r3, #68	@ 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800301a:	78fb      	ldrb	r3, [r7, #3]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	2301      	movs	r3, #1
 800302a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3326      	adds	r3, #38	@ 0x26
 8003052:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003054:	2b02      	cmp	r3, #2
 8003056:	d110      	bne.n	800307a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f004 fe1a 	bl	8007c9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4413      	add	r3, r2
 800306e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003072:	461a      	mov	r2, r3
 8003074:	2310      	movs	r3, #16
 8003076:	6093      	str	r3, [r2, #8]
 8003078:	e03d      	b.n	80030f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3326      	adds	r3, #38	@ 0x26
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d00a      	beq.n	80030a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3326      	adds	r3, #38	@ 0x26
 80030a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d127      	bne.n	80030f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030a6:	78fb      	ldrb	r3, [r7, #3]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	0151      	lsls	r1, r2, #5
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	440a      	add	r2, r1
 80030bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80030c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	011b      	lsls	r3, r3, #4
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	@ 0x4c
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	@ 0x4c
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	4619      	mov	r1, r3
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f007 f92b 	bl	800a34c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	799b      	ldrb	r3, [r3, #6]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d13b      	bne.n	8003176 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	3338      	adds	r3, #56	@ 0x38
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4403      	add	r3, r0
 800311e:	3328      	adds	r3, #40	@ 0x28
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	440b      	add	r3, r1
 8003124:	1e59      	subs	r1, r3, #1
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	3328      	adds	r3, #40	@ 0x28
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	fbb1 f3f3 	udiv	r3, r1, r3
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8470 	beq.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	333c      	adds	r3, #60	@ 0x3c
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	f083 0301 	eor.w	r3, r3, #1
 800315e:	b2d8      	uxtb	r0, r3
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	333c      	adds	r3, #60	@ 0x3c
 800316e:	4602      	mov	r2, r0
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	f000 bc58 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	333c      	adds	r3, #60	@ 0x3c
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	f083 0301 	eor.w	r3, r3, #1
 800318e:	b2d8      	uxtb	r0, r3
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	333c      	adds	r3, #60	@ 0x3c
 800319e:	4602      	mov	r2, r0
 80031a0:	701a      	strb	r2, [r3, #0]
 80031a2:	f000 bc40 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f003 ffcf 	bl	8007152 <USB_ReadChInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	d131      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ca:	461a      	mov	r2, r3
 80031cc:	2320      	movs	r3, #32
 80031ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	331a      	adds	r3, #26
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 841f 	bne.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	331b      	adds	r3, #27
 80031f8:	2201      	movs	r2, #1
 80031fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334d      	adds	r3, #77	@ 0x4d
 800320c:	2203      	movs	r2, #3
 800320e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	4611      	mov	r1, r2
 8003218:	4618      	mov	r0, r3
 800321a:	f004 fd3e 	bl	8007c9a <USB_HC_Halt>
 800321e:	f000 bc02 	b.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f003 ff91 	bl	8007152 <USB_ReadChInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b02      	cmp	r3, #2
 8003238:	f040 8305 	bne.w	8003846 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800323c:	78fb      	ldrb	r3, [r7, #3]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003248:	461a      	mov	r2, r3
 800324a:	2302      	movs	r3, #2
 800324c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800324e:	78fa      	ldrb	r2, [r7, #3]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	1a9b      	subs	r3, r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334d      	adds	r3, #77	@ 0x4d
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d114      	bne.n	800328e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334d      	adds	r3, #77	@ 0x4d
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334c      	adds	r3, #76	@ 0x4c
 8003288:	2201      	movs	r2, #1
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e2cc      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d114      	bne.n	80032ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	2202      	movs	r2, #2
 80032b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334c      	adds	r3, #76	@ 0x4c
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	e2ac      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	334d      	adds	r3, #77	@ 0x4d
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b07      	cmp	r3, #7
 80032e2:	d00b      	beq.n	80032fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	334d      	adds	r3, #77	@ 0x4d
 80032f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032f6:	2b09      	cmp	r3, #9
 80032f8:	f040 80a6 	bne.w	8003448 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3344      	adds	r3, #68	@ 0x44
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3344      	adds	r3, #68	@ 0x44
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d943      	bls.n	80033d2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	3344      	adds	r3, #68	@ 0x44
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	331a      	adds	r3, #26
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d123      	bne.n	80033bc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331b      	adds	r3, #27
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	331c      	adds	r3, #28
 8003398:	2200      	movs	r2, #0
 800339a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	015a      	lsls	r2, r3, #5
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	0151      	lsls	r1, r2, #5
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	440a      	add	r2, r1
 80033b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033ba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	011b      	lsls	r3, r3, #4
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	334c      	adds	r3, #76	@ 0x4c
 80033cc:	2204      	movs	r2, #4
 80033ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033d0:	e229      	b.n	8003826 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	334c      	adds	r3, #76	@ 0x4c
 80033e2:	2202      	movs	r2, #2
 80033e4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3326      	adds	r3, #38	@ 0x26
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00b      	beq.n	8003414 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3326      	adds	r3, #38	@ 0x26
 800340c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800340e:	2b02      	cmp	r3, #2
 8003410:	f040 8209 	bne.w	8003826 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800342a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003432:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003440:	461a      	mov	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003446:	e1ee      	b.n	8003826 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	334d      	adds	r3, #77	@ 0x4d
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b05      	cmp	r3, #5
 800345c:	f040 80c8 	bne.w	80035f0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	@ 0x4d
 8003470:	2202      	movs	r2, #2
 8003472:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	331b      	adds	r3, #27
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	f040 81ce 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3326      	adds	r3, #38	@ 0x26
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d16b      	bne.n	800357a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3348      	adds	r3, #72	@ 0x48
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	1c59      	adds	r1, r3, #1
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4403      	add	r3, r0
 80034c2:	3348      	adds	r3, #72	@ 0x48
 80034c4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3348      	adds	r3, #72	@ 0x48
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d943      	bls.n	8003564 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	3348      	adds	r3, #72	@ 0x48
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	331b      	adds	r3, #27
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3344      	adds	r3, #68	@ 0x44
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d809      	bhi.n	800352e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	331c      	adds	r3, #28
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334c      	adds	r3, #76	@ 0x4c
 800355e:	2204      	movs	r2, #4
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e014      	b.n	800358e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	334c      	adds	r3, #76	@ 0x4c
 8003574:	2202      	movs	r2, #2
 8003576:	701a      	strb	r2, [r3, #0]
 8003578:	e009      	b.n	800358e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	334c      	adds	r3, #76	@ 0x4c
 800358a:	2202      	movs	r2, #2
 800358c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3326      	adds	r3, #38	@ 0x26
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00b      	beq.n	80035bc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	3326      	adds	r3, #38	@ 0x26
 80035b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	f040 8136 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035bc:	78fb      	ldrb	r3, [r7, #3]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e11b      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334d      	adds	r3, #77	@ 0x4d
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b03      	cmp	r3, #3
 8003604:	f040 8081 	bne.w	800370a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334d      	adds	r3, #77	@ 0x4d
 8003618:	2202      	movs	r2, #2
 800361a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	331b      	adds	r3, #27
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	f040 80fa 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003634:	78fa      	ldrb	r2, [r7, #3]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	4413      	add	r3, r2
 8003650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	0151      	lsls	r1, r2, #5
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	440a      	add	r2, r1
 800365e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003666:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	440a      	add	r2, r1
 800367e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003686:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003688:	78fb      	ldrb	r3, [r7, #3]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	0151      	lsls	r1, r2, #5
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	440a      	add	r2, r1
 800369e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036a2:	f023 0320 	bic.w	r3, r3, #32
 80036a6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	1a9b      	subs	r3, r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	3326      	adds	r3, #38	@ 0x26
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	011b      	lsls	r3, r3, #4
 80036c6:	1a9b      	subs	r3, r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3326      	adds	r3, #38	@ 0x26
 80036ce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	f040 80a9 	bne.w	8003828 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80036f6:	78fb      	ldrb	r3, [r7, #3]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003702:	461a      	mov	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e08e      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334d      	adds	r3, #77	@ 0x4d
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d143      	bne.n	80037a8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334d      	adds	r3, #77	@ 0x4d
 8003730:	2202      	movs	r2, #2
 8003732:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	334c      	adds	r3, #76	@ 0x4c
 8003744:	2202      	movs	r2, #2
 8003746:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3326      	adds	r3, #38	@ 0x26
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3326      	adds	r3, #38	@ 0x26
 800376e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003770:	2b02      	cmp	r3, #2
 8003772:	d159      	bne.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	015a      	lsls	r2, r3, #5
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800378a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003792:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a0:	461a      	mov	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	e03f      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	334d      	adds	r3, #77	@ 0x4d
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d126      	bne.n	800380c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	334d      	adds	r3, #77	@ 0x4d
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3344      	adds	r3, #68	@ 0x44
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c59      	adds	r1, r3, #1
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4403      	add	r3, r0
 80037f2:	3344      	adds	r3, #68	@ 0x44
 80037f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334c      	adds	r3, #76	@ 0x4c
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
 800380a:	e00d      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	334d      	adds	r3, #77	@ 0x4d
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b02      	cmp	r3, #2
 8003820:	f000 8100 	beq.w	8003a24 <HCD_HC_IN_IRQHandler+0xcca>
 8003824:	e000      	b.n	8003828 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003826:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334c      	adds	r3, #76	@ 0x4c
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f006 fd84 	bl	800a34c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003844:	e0ef      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f003 fc7f 	bl	8007152 <USB_ReadChInterrupts>
 8003854:	4603      	mov	r3, r0
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d12f      	bne.n	80038be <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386a:	461a      	mov	r2, r3
 800386c:	2340      	movs	r3, #64	@ 0x40
 800386e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	334d      	adds	r3, #77	@ 0x4d
 8003880:	2205      	movs	r2, #5
 8003882:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	331a      	adds	r3, #26
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	3344      	adds	r3, #68	@ 0x44
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	4611      	mov	r1, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f004 f9ef 	bl	8007c9a <USB_HC_Halt>
 80038bc:	e0b3      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 fc43 	bl	8007152 <USB_ReadChInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	f040 80a7 	bne.w	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3326      	adds	r3, #38	@ 0x26
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d11b      	bne.n	8003926 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	3344      	adds	r3, #68	@ 0x44
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	334d      	adds	r3, #77	@ 0x4d
 8003912:	2204      	movs	r2, #4
 8003914:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f004 f9bb 	bl	8007c9a <USB_HC_Halt>
 8003924:	e03f      	b.n	80039a6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	1a9b      	subs	r3, r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	440b      	add	r3, r1
 8003934:	3326      	adds	r3, #38	@ 0x26
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	3326      	adds	r3, #38	@ 0x26
 800394c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800394e:	2b02      	cmp	r3, #2
 8003950:	d129      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3344      	adds	r3, #68	@ 0x44
 8003962:	2200      	movs	r2, #0
 8003964:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	799b      	ldrb	r3, [r3, #6]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0xc2a>
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	331b      	adds	r3, #27
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d110      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	011b      	lsls	r3, r3, #4
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	334d      	adds	r3, #77	@ 0x4d
 8003994:	2204      	movs	r2, #4
 8003996:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f004 f97a 	bl	8007c9a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	331b      	adds	r3, #27
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d129      	bne.n	8003a10 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	331b      	adds	r3, #27
 80039cc:	2200      	movs	r2, #0
 80039ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	0151      	lsls	r1, r2, #5
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	440a      	add	r2, r1
 8003a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a0a:	f043 0320 	orr.w	r3, r3, #32
 8003a0e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2310      	movs	r3, #16
 8003a20:	6093      	str	r3, [r2, #8]
 8003a22:	e000      	b.n	8003a26 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003a24:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	460b      	mov	r3, r1
 8003a36:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f003 fb81 	bl	8007152 <USB_ReadChInterrupts>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d11b      	bne.n	8003a92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a66:	461a      	mov	r2, r3
 8003a68:	2304      	movs	r3, #4
 8003a6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	334d      	adds	r3, #77	@ 0x4d
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f004 f906 	bl	8007c9a <USB_HC_Halt>
 8003a8e:	f000 bc89 	b.w	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fb59 	bl	8007152 <USB_ReadChInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 8082 	bne.w	8003bb0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003aac:	78fb      	ldrb	r3, [r7, #3]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2320      	movs	r3, #32
 8003abc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3319      	adds	r3, #25
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d124      	bne.n	8003b1e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3319      	adds	r3, #25
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	334c      	adds	r3, #76	@ 0x4c
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003afc:	78fa      	ldrb	r2, [r7, #3]
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	4613      	mov	r3, r2
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	440b      	add	r3, r1
 8003b0a:	334d      	adds	r3, #77	@ 0x4d
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f004 f8be 	bl	8007c9a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	331a      	adds	r3, #26
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	f040 8437 	bne.w	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	331b      	adds	r3, #27
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 842b 	bne.w	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3326      	adds	r3, #38	@ 0x26
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d009      	beq.n	8003b78 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	331b      	adds	r3, #27
 8003b74:	2201      	movs	r2, #1
 8003b76:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	334d      	adds	r3, #77	@ 0x4d
 8003b88:	2203      	movs	r2, #3
 8003b8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	78fa      	ldrb	r2, [r7, #3]
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f004 f880 	bl	8007c9a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3344      	adds	r3, #68	@ 0x44
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	e3f9      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	4611      	mov	r1, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 faca 	bl	8007152 <USB_ReadChInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc8:	d111      	bne.n	8003bee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003bca:	78fb      	ldrb	r3, [r7, #3]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bdc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	4611      	mov	r1, r2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f004 f857 	bl	8007c9a <USB_HC_Halt>
 8003bec:	e3da      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 faab 	bl	8007152 <USB_ReadChInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d168      	bne.n	8003cd8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	3344      	adds	r3, #68	@ 0x44
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 fa95 	bl	8007152 <USB_ReadChInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c2e:	2b40      	cmp	r3, #64	@ 0x40
 8003c30:	d112      	bne.n	8003c58 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	3319      	adds	r3, #25
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c52:	461a      	mov	r2, r3
 8003c54:	2340      	movs	r3, #64	@ 0x40
 8003c56:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003c58:	78fa      	ldrb	r2, [r7, #3]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	331b      	adds	r3, #27
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d019      	beq.n	8003ca2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003c6e:	78fa      	ldrb	r2, [r7, #3]
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	4613      	mov	r3, r2
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	1a9b      	subs	r3, r3, r2
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	440b      	add	r3, r1
 8003c7c:	331b      	adds	r3, #27
 8003c7e:	2200      	movs	r2, #0
 8003c80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	0151      	lsls	r1, r2, #5
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	440a      	add	r2, r1
 8003c98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f003 ffe2 	bl	8007c9a <USB_HC_Halt>
 8003cd6:	e365      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fa36 	bl	8007152 <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cec:	2b40      	cmp	r3, #64	@ 0x40
 8003cee:	d139      	bne.n	8003d64 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	334d      	adds	r3, #77	@ 0x4d
 8003d00:	2205      	movs	r2, #5
 8003d02:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	331a      	adds	r3, #26
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3319      	adds	r3, #25
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003d2e:	78fa      	ldrb	r2, [r7, #3]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	1a9b      	subs	r3, r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3344      	adds	r3, #68	@ 0x44
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	78fa      	ldrb	r2, [r7, #3]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f003 ffa5 	bl	8007c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	2340      	movs	r3, #64	@ 0x40
 8003d60:	6093      	str	r3, [r2, #8]
 8003d62:	e31f      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 f9f0 	bl	8007152 <USB_ReadChInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d11a      	bne.n	8003db2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d88:	461a      	mov	r2, r3
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334d      	adds	r3, #77	@ 0x4d
 8003d9e:	2206      	movs	r2, #6
 8003da0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f003 ff75 	bl	8007c9a <USB_HC_Halt>
 8003db0:	e2f8      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	4611      	mov	r1, r2
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f003 f9c9 	bl	8007152 <USB_ReadChInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d144      	bne.n	8003e54 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3344      	adds	r3, #68	@ 0x44
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	334d      	adds	r3, #77	@ 0x4d
 8003dee:	2204      	movs	r2, #4
 8003df0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	3319      	adds	r3, #25
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d114      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003e08:	78fa      	ldrb	r2, [r7, #3]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3318      	adds	r3, #24
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003e1e:	78fa      	ldrb	r2, [r7, #3]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	011b      	lsls	r3, r3, #4
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3319      	adds	r3, #25
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f003 ff2d 	bl	8007c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2310      	movs	r3, #16
 8003e50:	6093      	str	r3, [r2, #8]
 8003e52:	e2a7      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f003 f978 	bl	8007152 <USB_ReadChInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e68:	2b80      	cmp	r3, #128	@ 0x80
 8003e6a:	f040 8083 	bne.w	8003f74 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	799b      	ldrb	r3, [r3, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d111      	bne.n	8003e9a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	334d      	adds	r3, #77	@ 0x4d
 8003e86:	2207      	movs	r2, #7
 8003e88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 ff01 	bl	8007c9a <USB_HC_Halt>
 8003e98:	e062      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3344      	adds	r3, #68	@ 0x44
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1c59      	adds	r1, r3, #1
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4403      	add	r3, r0
 8003eba:	3344      	adds	r3, #68	@ 0x44
 8003ebc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	3344      	adds	r3, #68	@ 0x44
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d922      	bls.n	8003f1a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	3344      	adds	r3, #68	@ 0x44
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	334c      	adds	r3, #76	@ 0x4c
 8003ef8:	2204      	movs	r2, #4
 8003efa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003efc:	78fa      	ldrb	r2, [r7, #3]
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	334c      	adds	r3, #76	@ 0x4c
 8003f0c:	781a      	ldrb	r2, [r3, #0]
 8003f0e:	78fb      	ldrb	r3, [r7, #3]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f006 fa1a 	bl	800a34c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f18:	e022      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334c      	adds	r3, #76	@ 0x4c
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f2e:	78fb      	ldrb	r3, [r7, #3]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f44:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f4c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f4e:	78fb      	ldrb	r3, [r7, #3]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2380      	movs	r3, #128	@ 0x80
 8003f70:	6093      	str	r3, [r2, #8]
 8003f72:	e217      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f003 f8e8 	bl	8007152 <USB_ReadChInterrupts>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f8c:	d11b      	bne.n	8003fc6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	011b      	lsls	r3, r3, #4
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	334d      	adds	r3, #77	@ 0x4d
 8003f9e:	2209      	movs	r2, #9
 8003fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	78fa      	ldrb	r2, [r7, #3]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f003 fe75 	bl	8007c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003fc2:	6093      	str	r3, [r2, #8]
 8003fc4:	e1ee      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f003 f8bf 	bl	8007152 <USB_ReadChInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f040 81df 	bne.w	800439e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fec:	461a      	mov	r2, r3
 8003fee:	2302      	movs	r3, #2
 8003ff0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	334d      	adds	r3, #77	@ 0x4d
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	f040 8093 	bne.w	8004130 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	334d      	adds	r3, #77	@ 0x4d
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	011b      	lsls	r3, r3, #4
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	334c      	adds	r3, #76	@ 0x4c
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	011b      	lsls	r3, r3, #4
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	3326      	adds	r3, #38	@ 0x26
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d00b      	beq.n	8004060 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3326      	adds	r3, #38	@ 0x26
 8004058:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800405a:	2b03      	cmp	r3, #3
 800405c:	f040 8190 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	799b      	ldrb	r3, [r3, #6]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d115      	bne.n	8004094 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	333d      	adds	r3, #61	@ 0x3d
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	78fa      	ldrb	r2, [r7, #3]
 800407c:	f083 0301 	eor.w	r3, r3, #1
 8004080:	b2d8      	uxtb	r0, r3
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	333d      	adds	r3, #61	@ 0x3d
 8004090:	4602      	mov	r2, r0
 8004092:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	799b      	ldrb	r3, [r3, #6]
 8004098:	2b01      	cmp	r3, #1
 800409a:	f040 8171 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3334      	adds	r3, #52	@ 0x34
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8165 	beq.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3334      	adds	r3, #52	@ 0x34
 80040c6:	6819      	ldr	r1, [r3, #0]
 80040c8:	78fa      	ldrb	r2, [r7, #3]
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	3328      	adds	r3, #40	@ 0x28
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	440b      	add	r3, r1
 80040dc:	1e59      	subs	r1, r3, #1
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4403      	add	r3, r0
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80040f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 813f 	beq.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004102:	78fa      	ldrb	r2, [r7, #3]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	333d      	adds	r3, #61	@ 0x3d
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	78fa      	ldrb	r2, [r7, #3]
 8004116:	f083 0301 	eor.w	r3, r3, #1
 800411a:	b2d8      	uxtb	r0, r3
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	333d      	adds	r3, #61	@ 0x3d
 800412a:	4602      	mov	r2, r0
 800412c:	701a      	strb	r2, [r3, #0]
 800412e:	e127      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	334d      	adds	r3, #77	@ 0x4d
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b03      	cmp	r3, #3
 8004144:	d120      	bne.n	8004188 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	334d      	adds	r3, #77	@ 0x4d
 8004156:	2202      	movs	r2, #2
 8004158:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	331b      	adds	r3, #27
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	2b01      	cmp	r3, #1
 800416e:	f040 8107 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	334c      	adds	r3, #76	@ 0x4c
 8004182:	2202      	movs	r2, #2
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e0fb      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d13a      	bne.n	8004214 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800419e:	78fa      	ldrb	r2, [r7, #3]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	1a9b      	subs	r3, r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	334d      	adds	r3, #77	@ 0x4d
 80041ae:	2202      	movs	r2, #2
 80041b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041b2:	78fa      	ldrb	r2, [r7, #3]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	1a9b      	subs	r3, r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	334c      	adds	r3, #76	@ 0x4c
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	331b      	adds	r3, #27
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	f040 80d1 	bne.w	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80041de:	78fa      	ldrb	r2, [r7, #3]
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	331b      	adds	r3, #27
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	0151      	lsls	r1, r2, #5
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	440a      	add	r2, r1
 8004208:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800420c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004210:	6053      	str	r3, [r2, #4]
 8004212:	e0b5      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	334d      	adds	r3, #77	@ 0x4d
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d114      	bne.n	8004254 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800422a:	78fa      	ldrb	r2, [r7, #3]
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	440b      	add	r3, r1
 8004238:	334d      	adds	r3, #77	@ 0x4d
 800423a:	2202      	movs	r2, #2
 800423c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	334c      	adds	r3, #76	@ 0x4c
 800424e:	2202      	movs	r2, #2
 8004250:	701a      	strb	r2, [r3, #0]
 8004252:	e095      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	4613      	mov	r3, r2
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	1a9b      	subs	r3, r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	334d      	adds	r3, #77	@ 0x4d
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b06      	cmp	r3, #6
 8004268:	d114      	bne.n	8004294 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	334d      	adds	r3, #77	@ 0x4d
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	334c      	adds	r3, #76	@ 0x4c
 800428e:	2205      	movs	r2, #5
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	e075      	b.n	8004380 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004294:	78fa      	ldrb	r2, [r7, #3]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4613      	mov	r3, r2
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	440b      	add	r3, r1
 80042a2:	334d      	adds	r3, #77	@ 0x4d
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b07      	cmp	r3, #7
 80042a8:	d00a      	beq.n	80042c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	6879      	ldr	r1, [r7, #4]
 80042ae:	4613      	mov	r3, r2
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	1a9b      	subs	r3, r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	334d      	adds	r3, #77	@ 0x4d
 80042ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80042bc:	2b09      	cmp	r3, #9
 80042be:	d170      	bne.n	80043a2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	011b      	lsls	r3, r3, #4
 80042c8:	1a9b      	subs	r3, r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	440b      	add	r3, r1
 80042ce:	334d      	adds	r3, #77	@ 0x4d
 80042d0:	2202      	movs	r2, #2
 80042d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80042d4:	78fa      	ldrb	r2, [r7, #3]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	4613      	mov	r3, r2
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	1a9b      	subs	r3, r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	440b      	add	r3, r1
 80042e2:	3344      	adds	r3, #68	@ 0x44
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4613      	mov	r3, r2
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4403      	add	r3, r0
 80042f4:	3344      	adds	r3, #68	@ 0x44
 80042f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	3344      	adds	r3, #68	@ 0x44
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d914      	bls.n	8004338 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3344      	adds	r3, #68	@ 0x44
 800431e:	2200      	movs	r2, #0
 8004320:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	334c      	adds	r3, #76	@ 0x4c
 8004332:	2204      	movs	r2, #4
 8004334:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004336:	e022      	b.n	800437e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	011b      	lsls	r3, r3, #4
 8004340:	1a9b      	subs	r3, r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	334c      	adds	r3, #76	@ 0x4c
 8004348:	2202      	movs	r2, #2
 800434a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004362:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800436a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004378:	461a      	mov	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800437e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334c      	adds	r3, #76	@ 0x4c
 8004390:	781a      	ldrb	r2, [r3, #0]
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 ffd8 	bl	800a34c <HAL_HCD_HC_NotifyURBChange_Callback>
 800439c:	e002      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800439e:	bf00      	nop
 80043a0:	e000      	b.n	80043a4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80043a2:	bf00      	nop
  }
}
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b08a      	sub	sp, #40	@ 0x28
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	0c5b      	lsrs	r3, r3, #17
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d004      	beq.n	80043f0 <HCD_RXQLVL_IRQHandler+0x46>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b05      	cmp	r3, #5
 80043ea:	f000 80b6 	beq.w	800455a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043ee:	e0b7      	b.n	8004560 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80b3 	beq.w	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	332c      	adds	r3, #44	@ 0x2c
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 80a7 	beq.w	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	3338      	adds	r3, #56	@ 0x38
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	18d1      	adds	r1, r2, r3
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	4403      	add	r3, r0
 8004434:	3334      	adds	r3, #52	@ 0x34
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4299      	cmp	r1, r3
 800443a:	f200 8083 	bhi.w	8004544 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4613      	mov	r3, r2
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	332c      	adds	r3, #44	@ 0x2c
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	b292      	uxth	r2, r2
 8004458:	4619      	mov	r1, r3
 800445a:	f002 fe0f 	bl	800707c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4613      	mov	r3, r2
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	1a9b      	subs	r3, r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	440b      	add	r3, r1
 800446c:	332c      	adds	r3, #44	@ 0x2c
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	18d1      	adds	r1, r2, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4403      	add	r3, r0
 8004482:	332c      	adds	r3, #44	@ 0x2c
 8004484:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004486:	6879      	ldr	r1, [r7, #4]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3338      	adds	r3, #56	@ 0x38
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	18d1      	adds	r1, r2, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4403      	add	r3, r0
 80044aa:	3338      	adds	r3, #56	@ 0x38
 80044ac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	6a3b      	ldr	r3, [r7, #32]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	0cdb      	lsrs	r3, r3, #19
 80044be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	3328      	adds	r3, #40	@ 0x28
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4293      	cmp	r3, r2
 80044dc:	d13f      	bne.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d03c      	beq.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004502:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004510:	461a      	mov	r2, r3
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	333c      	adds	r3, #60	@ 0x3c
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	f083 0301 	eor.w	r3, r3, #1
 800452c:	b2d8      	uxtb	r0, r3
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	333c      	adds	r3, #60	@ 0x3c
 800453e:	4602      	mov	r2, r0
 8004540:	701a      	strb	r2, [r3, #0]
      break;
 8004542:	e00c      	b.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	69ba      	ldr	r2, [r7, #24]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334c      	adds	r3, #76	@ 0x4c
 8004554:	2204      	movs	r2, #4
 8004556:	701a      	strb	r2, [r3, #0]
      break;
 8004558:	e001      	b.n	800455e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800455a:	bf00      	nop
 800455c:	e000      	b.n	8004560 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800455e:	bf00      	nop
  }
}
 8004560:	bf00      	nop
 8004562:	3728      	adds	r7, #40	@ 0x28
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004594:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b02      	cmp	r3, #2
 800459e:	d10b      	bne.n	80045b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f005 feb2 	bl	800a314 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0308 	and.w	r3, r3, #8
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d132      	bne.n	8004628 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0308 	orr.w	r3, r3, #8
 80045c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	d126      	bne.n	8004622 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	7a5b      	ldrb	r3, [r3, #9]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d113      	bne.n	8004604 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80045e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045e6:	d106      	bne.n	80045f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 fed4 	bl	800739c <USB_InitFSLSPClkSel>
 80045f4:	e011      	b.n	800461a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2101      	movs	r1, #1
 80045fc:	4618      	mov	r0, r3
 80045fe:	f002 fecd 	bl	800739c <USB_InitFSLSPClkSel>
 8004602:	e00a      	b.n	800461a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	79db      	ldrb	r3, [r3, #7]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d106      	bne.n	800461a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004612:	461a      	mov	r2, r3
 8004614:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004618:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f005 fea4 	bl	800a368 <HAL_HCD_PortEnabled_Callback>
 8004620:	e002      	b.n	8004628 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f005 feae 	bl	800a384 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d103      	bne.n	800463a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 0320 	orr.w	r3, r3, #32
 8004638:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004640:	461a      	mov	r2, r3
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6013      	str	r3, [r2, #0]
}
 8004646:	bf00      	nop
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e12b      	b.n	80048ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc fbbc 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	@ 0x24
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80046b4:	f001 fa20 	bl	8005af8 <HAL_RCC_GetPCLK1Freq>
 80046b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a81      	ldr	r2, [pc, #516]	@ (80048c4 <HAL_I2C_Init+0x274>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d807      	bhi.n	80046d4 <HAL_I2C_Init+0x84>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a80      	ldr	r2, [pc, #512]	@ (80048c8 <HAL_I2C_Init+0x278>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	bf94      	ite	ls
 80046cc:	2301      	movls	r3, #1
 80046ce:	2300      	movhi	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e006      	b.n	80046e2 <HAL_I2C_Init+0x92>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4a7d      	ldr	r2, [pc, #500]	@ (80048cc <HAL_I2C_Init+0x27c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	bf94      	ite	ls
 80046dc:	2301      	movls	r3, #1
 80046de:	2300      	movhi	r3, #0
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0e7      	b.n	80048ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a78      	ldr	r2, [pc, #480]	@ (80048d0 <HAL_I2C_Init+0x280>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0c9b      	lsrs	r3, r3, #18
 80046f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a6a      	ldr	r2, [pc, #424]	@ (80048c4 <HAL_I2C_Init+0x274>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d802      	bhi.n	8004724 <HAL_I2C_Init+0xd4>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3301      	adds	r3, #1
 8004722:	e009      	b.n	8004738 <HAL_I2C_Init+0xe8>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	4a69      	ldr	r2, [pc, #420]	@ (80048d4 <HAL_I2C_Init+0x284>)
 8004730:	fba2 2303 	umull	r2, r3, r2, r3
 8004734:	099b      	lsrs	r3, r3, #6
 8004736:	3301      	adds	r3, #1
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	430b      	orrs	r3, r1
 800473e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69db      	ldr	r3, [r3, #28]
 8004746:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800474a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	495c      	ldr	r1, [pc, #368]	@ (80048c4 <HAL_I2C_Init+0x274>)
 8004754:	428b      	cmp	r3, r1
 8004756:	d819      	bhi.n	800478c <HAL_I2C_Init+0x13c>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1e59      	subs	r1, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	fbb1 f3f3 	udiv	r3, r1, r3
 8004766:	1c59      	adds	r1, r3, #1
 8004768:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800476c:	400b      	ands	r3, r1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00a      	beq.n	8004788 <HAL_I2C_Init+0x138>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1e59      	subs	r1, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004780:	3301      	adds	r3, #1
 8004782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004786:	e051      	b.n	800482c <HAL_I2C_Init+0x1dc>
 8004788:	2304      	movs	r3, #4
 800478a:	e04f      	b.n	800482c <HAL_I2C_Init+0x1dc>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d111      	bne.n	80047b8 <HAL_I2C_Init+0x168>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	1e58      	subs	r0, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6859      	ldr	r1, [r3, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	440b      	add	r3, r1
 80047a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a6:	3301      	adds	r3, #1
 80047a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e012      	b.n	80047de <HAL_I2C_Init+0x18e>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	1e58      	subs	r0, r3, #1
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6859      	ldr	r1, [r3, #4]
 80047c0:	460b      	mov	r3, r1
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	0099      	lsls	r1, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80047ce:	3301      	adds	r3, #1
 80047d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Init+0x196>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e022      	b.n	800482c <HAL_I2C_Init+0x1dc>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10e      	bne.n	800480c <HAL_I2C_Init+0x1bc>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	1e58      	subs	r0, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6859      	ldr	r1, [r3, #4]
 80047f6:	460b      	mov	r3, r1
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	440b      	add	r3, r1
 80047fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004800:	3301      	adds	r3, #1
 8004802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480a:	e00f      	b.n	800482c <HAL_I2C_Init+0x1dc>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	1e58      	subs	r0, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6859      	ldr	r1, [r3, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	0099      	lsls	r1, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004822:	3301      	adds	r3, #1
 8004824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	6809      	ldr	r1, [r1, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	69da      	ldr	r2, [r3, #28]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800485a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6911      	ldr	r1, [r2, #16]
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	68d2      	ldr	r2, [r2, #12]
 8004866:	4311      	orrs	r1, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	430b      	orrs	r3, r1
 800486e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	431a      	orrs	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	000186a0 	.word	0x000186a0
 80048c8:	001e847f 	.word	0x001e847f
 80048cc:	003d08ff 	.word	0x003d08ff
 80048d0:	431bde83 	.word	0x431bde83
 80048d4:	10624dd3 	.word	0x10624dd3

080048d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e128      	b.n	8004b3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d109      	bne.n	800490a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a90      	ldr	r2, [pc, #576]	@ (8004b44 <HAL_I2S_Init+0x26c>)
 8004902:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7fc fabd 	bl	8000e84 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69db      	ldr	r3, [r3, #28]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004920:	f023 030f 	bic.w	r3, r3, #15
 8004924:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2202      	movs	r2, #2
 800492c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d060      	beq.n	80049f8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d102      	bne.n	8004944 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800493e:	2310      	movs	r3, #16
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e001      	b.n	8004948 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004944:	2320      	movs	r3, #32
 8004946:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	2b20      	cmp	r3, #32
 800494e:	d802      	bhi.n	8004956 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004956:	2001      	movs	r0, #1
 8004958:	f001 f9c4 	bl	8005ce4 <HAL_RCCEx_GetPeriphCLKFreq>
 800495c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004966:	d125      	bne.n	80049b4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d010      	beq.n	8004992 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	fbb2 f2f3 	udiv	r2, r2, r3
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	461a      	mov	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	fbb2 f3f3 	udiv	r3, r2, r3
 800498c:	3305      	adds	r3, #5
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	e01f      	b.n	80049d2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	fbb2 f2f3 	udiv	r2, r2, r3
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	461a      	mov	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ae:	3305      	adds	r3, #5
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	e00e      	b.n	80049d2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	461a      	mov	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	3305      	adds	r3, #5
 80049d0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4a5c      	ldr	r2, [pc, #368]	@ (8004b48 <HAL_I2S_Init+0x270>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	085b      	lsrs	r3, r3, #1
 80049ee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	021b      	lsls	r3, r3, #8
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e003      	b.n	8004a00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80049f8:	2302      	movs	r3, #2
 80049fa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d902      	bls.n	8004a0c <HAL_I2S_Init+0x134>
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	2bff      	cmp	r3, #255	@ 0xff
 8004a0a:	d907      	bls.n	8004a1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a10:	f043 0210 	orr.w	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e08f      	b.n	8004b3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	ea42 0103 	orr.w	r1, r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004a3a:	f023 030f 	bic.w	r3, r3, #15
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6851      	ldr	r1, [r2, #4]
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6892      	ldr	r2, [r2, #8]
 8004a46:	4311      	orrs	r1, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	68d2      	ldr	r2, [r2, #12]
 8004a4c:	4311      	orrs	r1, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	6992      	ldr	r2, [r2, #24]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d161      	bne.n	8004b2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	@ (8004b4c <HAL_I2S_Init+0x274>)
 8004a6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a37      	ldr	r2, [pc, #220]	@ (8004b50 <HAL_I2S_Init+0x278>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d101      	bne.n	8004a7c <HAL_I2S_Init+0x1a4>
 8004a78:	4b36      	ldr	r3, [pc, #216]	@ (8004b54 <HAL_I2S_Init+0x27c>)
 8004a7a:	e001      	b.n	8004a80 <HAL_I2S_Init+0x1a8>
 8004a7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	6812      	ldr	r2, [r2, #0]
 8004a86:	4932      	ldr	r1, [pc, #200]	@ (8004b50 <HAL_I2S_Init+0x278>)
 8004a88:	428a      	cmp	r2, r1
 8004a8a:	d101      	bne.n	8004a90 <HAL_I2S_Init+0x1b8>
 8004a8c:	4a31      	ldr	r2, [pc, #196]	@ (8004b54 <HAL_I2S_Init+0x27c>)
 8004a8e:	e001      	b.n	8004a94 <HAL_I2S_Init+0x1bc>
 8004a90:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004a94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004a98:	f023 030f 	bic.w	r3, r3, #15
 8004a9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8004b50 <HAL_I2S_Init+0x278>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d101      	bne.n	8004aac <HAL_I2S_Init+0x1d4>
 8004aa8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b54 <HAL_I2S_Init+0x27c>)
 8004aaa:	e001      	b.n	8004ab0 <HAL_I2S_Init+0x1d8>
 8004aac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ab0:	2202      	movs	r2, #2
 8004ab2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a25      	ldr	r2, [pc, #148]	@ (8004b50 <HAL_I2S_Init+0x278>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2S_Init+0x1ea>
 8004abe:	4b25      	ldr	r3, [pc, #148]	@ (8004b54 <HAL_I2S_Init+0x27c>)
 8004ac0:	e001      	b.n	8004ac6 <HAL_I2S_Init+0x1ee>
 8004ac2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad2:	d003      	beq.n	8004adc <HAL_I2S_Init+0x204>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004adc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	e001      	b.n	8004ae8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004af2:	4313      	orrs	r3, r2
 8004af4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004afc:	4313      	orrs	r3, r2
 8004afe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b06:	4313      	orrs	r3, r2
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	897b      	ldrh	r3, [r7, #10]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004b14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b50 <HAL_I2S_Init+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2S_Init+0x24c>
 8004b20:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <HAL_I2S_Init+0x27c>)
 8004b22:	e001      	b.n	8004b28 <HAL_I2S_Init+0x250>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b28:	897a      	ldrh	r2, [r7, #10]
 8004b2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	08004c4f 	.word	0x08004c4f
 8004b48:	cccccccd 	.word	0xcccccccd
 8004b4c:	08004d65 	.word	0x08004d65
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40003400 	.word	0x40003400

08004b58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ffb8 	bl	8004b58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	b292      	uxth	r2, r2
 8004c04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10e      	bne.n	8004c46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004c36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff93 	bl	8004b6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d13a      	bne.n	8004ce0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d109      	bne.n	8004c88 <I2S_IRQHandler+0x3a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	d102      	bne.n	8004c88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffb4 	bl	8004bf0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b40      	cmp	r3, #64	@ 0x40
 8004c90:	d126      	bne.n	8004ce0 <I2S_IRQHandler+0x92>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d11f      	bne.n	8004ce0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd2:	f043 0202 	orr.w	r2, r3, #2
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff50 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d136      	bne.n	8004d5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d109      	bne.n	8004d0a <I2S_IRQHandler+0xbc>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b80      	cmp	r3, #128	@ 0x80
 8004d02:	d102      	bne.n	8004d0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff45 	bl	8004b94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d122      	bne.n	8004d5a <I2S_IRQHandler+0x10c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d11b      	bne.n	8004d5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff13 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a92      	ldr	r2, [pc, #584]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d7e:	4b92      	ldr	r3, [pc, #584]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d80:	e001      	b.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a8b      	ldr	r2, [pc, #556]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d9c:	4b8a      	ldr	r3, [pc, #552]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004da0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004db0:	d004      	beq.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8099 	bne.w	8004eee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f925 	bl	8005020 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f9c8 	bl	8005180 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df6:	2b40      	cmp	r3, #64	@ 0x40
 8004df8:	d13a      	bne.n	8004e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d035      	beq.n	8004e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e10:	e001      	b.n	8004e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4969      	ldr	r1, [pc, #420]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e1e:	428b      	cmp	r3, r1
 8004e20:	d101      	bne.n	8004e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e22:	4b69      	ldr	r3, [pc, #420]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e24:	e001      	b.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e26:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004e2a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe88 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	f040 80c3 	bne.w	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80bd 	beq.w	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004e96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a49      	ldr	r2, [pc, #292]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ea2:	4b49      	ldr	r3, [pc, #292]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ea4:	e001      	b.n	8004eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ea6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4944      	ldr	r1, [pc, #272]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004eb2:	428b      	cmp	r3, r1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004eb6:	4b44      	ldr	r3, [pc, #272]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eb8:	e001      	b.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004eba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ebe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ec2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	f043 0204 	orr.w	r2, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe4a 	bl	8004b80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eec:	e089      	b.n	8005002 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d107      	bne.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8be 	bl	8005084 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d107      	bne.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8fd 	bl	800511c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f28:	2b40      	cmp	r3, #64	@ 0x40
 8004f2a:	d12f      	bne.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02a      	beq.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004f44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1e      	ldr	r2, [pc, #120]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004f50:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f52:	e001      	b.n	8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004f54:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4919      	ldr	r1, [pc, #100]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f60:	428b      	cmp	r3, r1
 8004f62:	d101      	bne.n	8004f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f64:	4b18      	ldr	r3, [pc, #96]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f66:	e001      	b.n	8004f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	f043 0202 	orr.w	r2, r3, #2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fdfa 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d136      	bne.n	8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d031      	beq.n	8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a07      	ldr	r2, [pc, #28]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d101      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004faa:	4b07      	ldr	r3, [pc, #28]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fac:	e001      	b.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4902      	ldr	r1, [pc, #8]	@ (8004fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004fba:	428b      	cmp	r3, r1
 8004fbc:	d106      	bne.n	8004fcc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004fbe:	4b02      	ldr	r3, [pc, #8]	@ (8004fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fc0:	e006      	b.n	8004fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004fc2:	bf00      	nop
 8004fc4:	40003800 	.word	0x40003800
 8004fc8:	40003400 	.word	0x40003400
 8004fcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fd0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fd4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685a      	ldr	r2, [r3, #4]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004fe4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	f043 0204 	orr.w	r2, r3, #4
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff fdc0 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005000:	e000      	b.n	8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005002:	bf00      	nop
}
 8005004:	bf00      	nop
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	1c99      	adds	r1, r3, #2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6251      	str	r1, [r2, #36]	@ 0x24
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005060:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ffc9 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005090:	1c99      	adds	r1, r3, #2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6251      	str	r1, [r2, #36]	@ 0x24
 8005096:	8819      	ldrh	r1, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1d      	ldr	r2, [pc, #116]	@ (8005114 <I2SEx_TxISR_I2SExt+0x90>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <I2SEx_TxISR_I2SExt+0x22>
 80050a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005118 <I2SEx_TxISR_I2SExt+0x94>)
 80050a4:	e001      	b.n	80050aa <I2SEx_TxISR_I2SExt+0x26>
 80050a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050aa:	460a      	mov	r2, r1
 80050ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d121      	bne.n	800510a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a12      	ldr	r2, [pc, #72]	@ (8005114 <I2SEx_TxISR_I2SExt+0x90>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <I2SEx_TxISR_I2SExt+0x50>
 80050d0:	4b11      	ldr	r3, [pc, #68]	@ (8005118 <I2SEx_TxISR_I2SExt+0x94>)
 80050d2:	e001      	b.n	80050d8 <I2SEx_TxISR_I2SExt+0x54>
 80050d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	490d      	ldr	r1, [pc, #52]	@ (8005114 <I2SEx_TxISR_I2SExt+0x90>)
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d101      	bne.n	80050e8 <I2SEx_TxISR_I2SExt+0x64>
 80050e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005118 <I2SEx_TxISR_I2SExt+0x94>)
 80050e6:	e001      	b.n	80050ec <I2SEx_TxISR_I2SExt+0x68>
 80050e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff81 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40003800 	.word	0x40003800
 8005118:	40003400 	.word	0x40003400

0800511c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68d8      	ldr	r0, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	1c99      	adds	r1, r3, #2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005134:	b282      	uxth	r2, r0
 8005136:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d113      	bne.n	8005178 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800515e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ff4a 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a20      	ldr	r2, [pc, #128]	@ (8005210 <I2SEx_RxISR_I2SExt+0x90>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d101      	bne.n	8005196 <I2SEx_RxISR_I2SExt+0x16>
 8005192:	4b20      	ldr	r3, [pc, #128]	@ (8005214 <I2SEx_RxISR_I2SExt+0x94>)
 8005194:	e001      	b.n	800519a <I2SEx_RxISR_I2SExt+0x1a>
 8005196:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800519a:	68d8      	ldr	r0, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a0:	1c99      	adds	r1, r3, #2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80051a6:	b282      	uxth	r2, r0
 80051a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d121      	bne.n	8005206 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a12      	ldr	r2, [pc, #72]	@ (8005210 <I2SEx_RxISR_I2SExt+0x90>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <I2SEx_RxISR_I2SExt+0x50>
 80051cc:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <I2SEx_RxISR_I2SExt+0x94>)
 80051ce:	e001      	b.n	80051d4 <I2SEx_RxISR_I2SExt+0x54>
 80051d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	490d      	ldr	r1, [pc, #52]	@ (8005210 <I2SEx_RxISR_I2SExt+0x90>)
 80051dc:	428b      	cmp	r3, r1
 80051de:	d101      	bne.n	80051e4 <I2SEx_RxISR_I2SExt+0x64>
 80051e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005214 <I2SEx_RxISR_I2SExt+0x94>)
 80051e2:	e001      	b.n	80051e8 <I2SEx_RxISR_I2SExt+0x68>
 80051e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80051ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ff03 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40003800 	.word	0x40003800
 8005214:	40003400 	.word	0x40003400

08005218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e267      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d075      	beq.n	8005322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005236:	4b88      	ldr	r3, [pc, #544]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00c      	beq.n	800525c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005242:	4b85      	ldr	r3, [pc, #532]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800524a:	2b08      	cmp	r3, #8
 800524c:	d112      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800524e:	4b82      	ldr	r3, [pc, #520]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005256:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800525a:	d10b      	bne.n	8005274 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	4b7e      	ldr	r3, [pc, #504]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d05b      	beq.n	8005320 <HAL_RCC_OscConfig+0x108>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d157      	bne.n	8005320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e242      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x74>
 800527e:	4b76      	ldr	r3, [pc, #472]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e01d      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x98>
 8005296:	4b70      	ldr	r3, [pc, #448]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a6f      	ldr	r2, [pc, #444]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800529c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b6d      	ldr	r3, [pc, #436]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a6c      	ldr	r2, [pc, #432]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ac:	6013      	str	r3, [r2, #0]
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0xb0>
 80052b0:	4b69      	ldr	r3, [pc, #420]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a68      	ldr	r2, [pc, #416]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	4b66      	ldr	r3, [pc, #408]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a65      	ldr	r2, [pc, #404]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d0:	f7fc f842 	bl	8001358 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d8:	f7fc f83e 	bl	8001358 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b64      	cmp	r3, #100	@ 0x64
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e207      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	4b5b      	ldr	r3, [pc, #364]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f0      	beq.n	80052d8 <HAL_RCC_OscConfig+0xc0>
 80052f6:	e014      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fc f82e 	bl	8001358 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005300:	f7fc f82a 	bl	8001358 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	@ 0x64
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1f3      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	4b51      	ldr	r3, [pc, #324]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f0      	bne.n	8005300 <HAL_RCC_OscConfig+0xe8>
 800531e:	e000      	b.n	8005322 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d063      	beq.n	80053f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800532e:	4b4a      	ldr	r3, [pc, #296]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005342:	2b08      	cmp	r3, #8
 8005344:	d11c      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005346:	4b44      	ldr	r3, [pc, #272]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d116      	bne.n	8005380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	4b41      	ldr	r3, [pc, #260]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d005      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d001      	beq.n	800536a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e1c7      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	00db      	lsls	r3, r3, #3
 8005378:	4937      	ldr	r1, [pc, #220]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800537a:	4313      	orrs	r3, r2
 800537c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800537e:	e03a      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d020      	beq.n	80053ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005388:	4b34      	ldr	r3, [pc, #208]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fb ffe3 	bl	8001358 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005396:	f7fb ffdf 	bl	8001358 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e1a8      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0f0      	beq.n	8005396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b4:	4b28      	ldr	r3, [pc, #160]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4925      	ldr	r1, [pc, #148]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	600b      	str	r3, [r1, #0]
 80053c8:	e015      	b.n	80053f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ca:	4b24      	ldr	r3, [pc, #144]	@ (800545c <HAL_RCC_OscConfig+0x244>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fb ffc2 	bl	8001358 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fb ffbe 	bl	8001358 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e187      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	4b1b      	ldr	r3, [pc, #108]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0308 	and.w	r3, r3, #8
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d036      	beq.n	8005470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d016      	beq.n	8005438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800540a:	4b15      	ldr	r3, [pc, #84]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800540c:	2201      	movs	r2, #1
 800540e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fb ffa2 	bl	8001358 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005418:	f7fb ff9e 	bl	8001358 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e167      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_OscConfig+0x240>)
 800542c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x200>
 8005436:	e01b      	b.n	8005470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005438:	4b09      	ldr	r3, [pc, #36]	@ (8005460 <HAL_RCC_OscConfig+0x248>)
 800543a:	2200      	movs	r2, #0
 800543c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fb ff8b 	bl	8001358 <HAL_GetTick>
 8005442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005444:	e00e      	b.n	8005464 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005446:	f7fb ff87 	bl	8001358 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d907      	bls.n	8005464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e150      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005458:	40023800 	.word	0x40023800
 800545c:	42470000 	.word	0x42470000
 8005460:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005464:	4b88      	ldr	r3, [pc, #544]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005468:	f003 0302 	and.w	r3, r3, #2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1ea      	bne.n	8005446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 8097 	beq.w	80055ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800547e:	2300      	movs	r3, #0
 8005480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005482:	4b81      	ldr	r3, [pc, #516]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548e:	2300      	movs	r3, #0
 8005490:	60bb      	str	r3, [r7, #8]
 8005492:	4b7d      	ldr	r3, [pc, #500]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	4a7c      	ldr	r2, [pc, #496]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549c:	6413      	str	r3, [r2, #64]	@ 0x40
 800549e:	4b7a      	ldr	r3, [pc, #488]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	60bb      	str	r3, [r7, #8]
 80054a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054aa:	2301      	movs	r3, #1
 80054ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ae:	4b77      	ldr	r3, [pc, #476]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ba:	4b74      	ldr	r3, [pc, #464]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a73      	ldr	r2, [pc, #460]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fb ff47 	bl	8001358 <HAL_GetTick>
 80054ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fb ff43 	bl	8001358 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e10c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b6a      	ldr	r3, [pc, #424]	@ (800568c <HAL_RCC_OscConfig+0x474>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d106      	bne.n	8005502 <HAL_RCC_OscConfig+0x2ea>
 80054f4:	4b64      	ldr	r3, [pc, #400]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054f8:	4a63      	ldr	r2, [pc, #396]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005500:	e01c      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b05      	cmp	r3, #5
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x30c>
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550e:	4a5e      	ldr	r2, [pc, #376]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005510:	f043 0304 	orr.w	r3, r3, #4
 8005514:	6713      	str	r3, [r2, #112]	@ 0x70
 8005516:	4b5c      	ldr	r3, [pc, #368]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800551a:	4a5b      	ldr	r2, [pc, #364]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	6713      	str	r3, [r2, #112]	@ 0x70
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0x324>
 8005524:	4b58      	ldr	r3, [pc, #352]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005528:	4a57      	ldr	r2, [pc, #348]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005530:	4b55      	ldr	r3, [pc, #340]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005534:	4a54      	ldr	r2, [pc, #336]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005536:	f023 0304 	bic.w	r3, r3, #4
 800553a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d015      	beq.n	8005570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005544:	f7fb ff08 	bl	8001358 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fb ff04 	bl	8001358 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0cb      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d0ee      	beq.n	800554c <HAL_RCC_OscConfig+0x334>
 800556e:	e014      	b.n	800559a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005570:	f7fb fef2 	bl	8001358 <HAL_GetTick>
 8005574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	e00a      	b.n	800558e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005578:	f7fb feee 	bl	8001358 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005586:	4293      	cmp	r3, r2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0b5      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558e:	4b3e      	ldr	r3, [pc, #248]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005592:	f003 0302 	and.w	r3, r3, #2
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1ee      	bne.n	8005578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d105      	bne.n	80055ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055a0:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	4a38      	ldr	r2, [pc, #224]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80a1 	beq.w	80056f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 030c 	and.w	r3, r3, #12
 80055be:	2b08      	cmp	r3, #8
 80055c0:	d05c      	beq.n	800567c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d141      	bne.n	800564e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ca:	4b31      	ldr	r3, [pc, #196]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055d0:	f7fb fec2 	bl	8001358 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055d8:	f7fb febe 	bl	8001358 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e087      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	4b27      	ldr	r3, [pc, #156]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1f0      	bne.n	80055d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69da      	ldr	r2, [r3, #28]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	431a      	orrs	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560c:	085b      	lsrs	r3, r3, #1
 800560e:	3b01      	subs	r3, #1
 8005610:	041b      	lsls	r3, r3, #16
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	061b      	lsls	r3, r3, #24
 800561a:	491b      	ldr	r1, [pc, #108]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 800561c:	4313      	orrs	r3, r2
 800561e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005620:	4b1b      	ldr	r3, [pc, #108]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005626:	f7fb fe97 	bl	8001358 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562e:	f7fb fe93 	bl	8001358 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e05c      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	4b11      	ldr	r3, [pc, #68]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x416>
 800564c:	e054      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800564e:	4b10      	ldr	r3, [pc, #64]	@ (8005690 <HAL_RCC_OscConfig+0x478>)
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005654:	f7fb fe80 	bl	8001358 <HAL_GetTick>
 8005658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800565a:	e008      	b.n	800566e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800565c:	f7fb fe7c 	bl	8001358 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e045      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_OscConfig+0x470>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1f0      	bne.n	800565c <HAL_RCC_OscConfig+0x444>
 800567a:	e03d      	b.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e038      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
 8005688:	40023800 	.word	0x40023800
 800568c:	40007000 	.word	0x40007000
 8005690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005694:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_RCC_OscConfig+0x4ec>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d028      	beq.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d121      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d11a      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d111      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	085b      	lsrs	r3, r3, #1
 80056dc:	3b01      	subs	r3, #1
 80056de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d107      	bne.n	80056f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3718      	adds	r7, #24
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800

08005708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0cc      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b68      	ldr	r3, [pc, #416]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0307 	and.w	r3, r3, #7
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d90c      	bls.n	8005744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b65      	ldr	r3, [pc, #404]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005732:	4b63      	ldr	r3, [pc, #396]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0307 	and.w	r3, r3, #7
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	429a      	cmp	r2, r3
 800573e:	d001      	beq.n	8005744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0b8      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d020      	beq.n	8005792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800575c:	4b59      	ldr	r3, [pc, #356]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a58      	ldr	r2, [pc, #352]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005766:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005774:	4b53      	ldr	r3, [pc, #332]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	4a52      	ldr	r2, [pc, #328]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800577a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800577e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005780:	4b50      	ldr	r3, [pc, #320]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	494d      	ldr	r1, [pc, #308]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	4313      	orrs	r3, r2
 8005790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d044      	beq.n	8005828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057a6:	4b47      	ldr	r3, [pc, #284]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d119      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e07f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d003      	beq.n	80057c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	d107      	bne.n	80057d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057c6:	4b3f      	ldr	r3, [pc, #252]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d109      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e06f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057d6:	4b3b      	ldr	r3, [pc, #236]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e067      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057e6:	4b37      	ldr	r3, [pc, #220]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f023 0203 	bic.w	r2, r3, #3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	4934      	ldr	r1, [pc, #208]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057f8:	f7fb fdae 	bl	8001358 <HAL_GetTick>
 80057fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	e00a      	b.n	8005816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005800:	f7fb fdaa 	bl	8001358 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800580e:	4293      	cmp	r3, r2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e04f      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f003 020c 	and.w	r2, r3, #12
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	429a      	cmp	r2, r3
 8005826:	d1eb      	bne.n	8005800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005828:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d20c      	bcs.n	8005850 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e032      	b.n	80058b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800585c:	4b19      	ldr	r3, [pc, #100]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	4916      	ldr	r1, [pc, #88]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	4313      	orrs	r3, r2
 800586c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800587a:	4b12      	ldr	r3, [pc, #72]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	490e      	ldr	r1, [pc, #56]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800588e:	f000 f821 	bl	80058d4 <HAL_RCC_GetSysClockFreq>
 8005892:	4602      	mov	r2, r0
 8005894:	4b0b      	ldr	r3, [pc, #44]	@ (80058c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 030f 	and.w	r3, r3, #15
 800589e:	490a      	ldr	r1, [pc, #40]	@ (80058c8 <HAL_RCC_ClockConfig+0x1c0>)
 80058a0:	5ccb      	ldrb	r3, [r1, r3]
 80058a2:	fa22 f303 	lsr.w	r3, r2, r3
 80058a6:	4a09      	ldr	r2, [pc, #36]	@ (80058cc <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058aa:	4b09      	ldr	r3, [pc, #36]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fb fd0e 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	40023c00 	.word	0x40023c00
 80058c4:	40023800 	.word	0x40023800
 80058c8:	0800aa40 	.word	0x0800aa40
 80058cc:	20000000 	.word	0x20000000
 80058d0:	20000004 	.word	0x20000004

080058d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d8:	b094      	sub	sp, #80	@ 0x50
 80058da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058ec:	4b79      	ldr	r3, [pc, #484]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 030c 	and.w	r3, r3, #12
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d00d      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x40>
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	f200 80e1 	bhi.w	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x34>
 8005902:	2b04      	cmp	r3, #4
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x3a>
 8005906:	e0db      	b.n	8005ac0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005908:	4b73      	ldr	r3, [pc, #460]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800590c:	e0db      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800590e:	4b73      	ldr	r3, [pc, #460]	@ (8005adc <HAL_RCC_GetSysClockFreq+0x208>)
 8005910:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005912:	e0d8      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005914:	4b6f      	ldr	r3, [pc, #444]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800591c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800591e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d063      	beq.n	80059f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	099b      	lsrs	r3, r3, #6
 8005930:	2200      	movs	r2, #0
 8005932:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005934:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800593c:	633b      	str	r3, [r7, #48]	@ 0x30
 800593e:	2300      	movs	r3, #0
 8005940:	637b      	str	r3, [r7, #52]	@ 0x34
 8005942:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	f04f 0100 	mov.w	r1, #0
 8005952:	0159      	lsls	r1, r3, #5
 8005954:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005958:	0150      	lsls	r0, r2, #5
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4621      	mov	r1, r4
 8005960:	1a51      	subs	r1, r2, r1
 8005962:	6139      	str	r1, [r7, #16]
 8005964:	4629      	mov	r1, r5
 8005966:	eb63 0301 	sbc.w	r3, r3, r1
 800596a:	617b      	str	r3, [r7, #20]
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005978:	4659      	mov	r1, fp
 800597a:	018b      	lsls	r3, r1, #6
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005982:	4651      	mov	r1, sl
 8005984:	018a      	lsls	r2, r1, #6
 8005986:	4651      	mov	r1, sl
 8005988:	ebb2 0801 	subs.w	r8, r2, r1
 800598c:	4659      	mov	r1, fp
 800598e:	eb63 0901 	sbc.w	r9, r3, r1
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800599e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059a6:	4690      	mov	r8, r2
 80059a8:	4699      	mov	r9, r3
 80059aa:	4623      	mov	r3, r4
 80059ac:	eb18 0303 	adds.w	r3, r8, r3
 80059b0:	60bb      	str	r3, [r7, #8]
 80059b2:	462b      	mov	r3, r5
 80059b4:	eb49 0303 	adc.w	r3, r9, r3
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059c6:	4629      	mov	r1, r5
 80059c8:	024b      	lsls	r3, r1, #9
 80059ca:	4621      	mov	r1, r4
 80059cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059d0:	4621      	mov	r1, r4
 80059d2:	024a      	lsls	r2, r1, #9
 80059d4:	4610      	mov	r0, r2
 80059d6:	4619      	mov	r1, r3
 80059d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059da:	2200      	movs	r2, #0
 80059dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059e4:	f7fa fbf0 	bl	80001c8 <__aeabi_uldivmod>
 80059e8:	4602      	mov	r2, r0
 80059ea:	460b      	mov	r3, r1
 80059ec:	4613      	mov	r3, r2
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059f0:	e058      	b.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059f2:	4b38      	ldr	r3, [pc, #224]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	099b      	lsrs	r3, r3, #6
 80059f8:	2200      	movs	r2, #0
 80059fa:	4618      	mov	r0, r3
 80059fc:	4611      	mov	r1, r2
 80059fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a02:	623b      	str	r3, [r7, #32]
 8005a04:	2300      	movs	r3, #0
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	f04f 0000 	mov.w	r0, #0
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	0159      	lsls	r1, r3, #5
 8005a1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a1e:	0150      	lsls	r0, r2, #5
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4641      	mov	r1, r8
 8005a26:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a30:	f04f 0200 	mov.w	r2, #0
 8005a34:	f04f 0300 	mov.w	r3, #0
 8005a38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a44:	ebb2 040a 	subs.w	r4, r2, sl
 8005a48:	eb63 050b 	sbc.w	r5, r3, fp
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	00eb      	lsls	r3, r5, #3
 8005a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5a:	00e2      	lsls	r2, r4, #3
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	4643      	mov	r3, r8
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	464b      	mov	r3, r9
 8005a68:	eb45 0303 	adc.w	r3, r5, r3
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	028b      	lsls	r3, r1, #10
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a84:	4621      	mov	r1, r4
 8005a86:	028a      	lsls	r2, r1, #10
 8005a88:	4610      	mov	r0, r2
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a8e:	2200      	movs	r2, #0
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	61fa      	str	r2, [r7, #28]
 8005a94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a98:	f7fa fb96 	bl	80001c8 <__aeabi_uldivmod>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	0c1b      	lsrs	r3, r3, #16
 8005aaa:	f003 0303 	and.w	r3, r3, #3
 8005aae:	3301      	adds	r3, #1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ab4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005abc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005abe:	e002      	b.n	8005ac6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ac0:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3750      	adds	r7, #80	@ 0x50
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	007a1200 	.word	0x007a1200

08005ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ae4:	4b03      	ldr	r3, [pc, #12]	@ (8005af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	20000000 	.word	0x20000000

08005af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005afc:	f7ff fff0 	bl	8005ae0 <HAL_RCC_GetHCLKFreq>
 8005b00:	4602      	mov	r2, r0
 8005b02:	4b05      	ldr	r3, [pc, #20]	@ (8005b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	0a9b      	lsrs	r3, r3, #10
 8005b08:	f003 0307 	and.w	r3, r3, #7
 8005b0c:	4903      	ldr	r1, [pc, #12]	@ (8005b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b0e:	5ccb      	ldrb	r3, [r1, r3]
 8005b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40023800 	.word	0x40023800
 8005b1c:	0800aa50 	.word	0x0800aa50

08005b20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d035      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b48:	4b62      	ldr	r3, [pc, #392]	@ (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b4e:	f7fb fc03 	bl	8001358 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b54:	e008      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b56:	f7fb fbff 	bl	8001358 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e0b0      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b68:	4b5b      	ldr	r3, [pc, #364]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f0      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	019a      	lsls	r2, r3, #6
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	071b      	lsls	r3, r3, #28
 8005b80:	4955      	ldr	r1, [pc, #340]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005b88:	4b52      	ldr	r3, [pc, #328]	@ (8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b8e:	f7fb fbe3 	bl	8001358 <HAL_GetTick>
 8005b92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b96:	f7fb fbdf 	bl	8001358 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e090      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f0      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8083 	beq.w	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	4b44      	ldr	r3, [pc, #272]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	4a43      	ldr	r2, [pc, #268]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bd2:	4b41      	ldr	r3, [pc, #260]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005bde:	4b3f      	ldr	r3, [pc, #252]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a3e      	ldr	r2, [pc, #248]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005bea:	f7fb fbb5 	bl	8001358 <HAL_GetTick>
 8005bee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf2:	f7fb fbb1 	bl	8001358 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e062      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005c04:	4b35      	ldr	r3, [pc, #212]	@ (8005cdc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c10:	4b31      	ldr	r3, [pc, #196]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d028      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c38:	4b29      	ldr	r3, [pc, #164]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c3e:	4b28      	ldr	r3, [pc, #160]	@ (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c4a:	4b23      	ldr	r3, [pc, #140]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d114      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005c56:	f7fb fb7f 	bl	8001358 <HAL_GetTick>
 8005c5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fb fb7b 	bl	8001358 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e02a      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c74:	4b18      	ldr	r3, [pc, #96]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ee      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c8c:	d10d      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca2:	490d      	ldr	r1, [pc, #52]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005caa:	4b0b      	ldr	r3, [pc, #44]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005cb4:	6093      	str	r3, [r2, #8]
 8005cb6:	4b08      	ldr	r3, [pc, #32]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc2:	4905      	ldr	r1, [pc, #20]	@ (8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3718      	adds	r7, #24
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	42470068 	.word	0x42470068
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	40007000 	.word	0x40007000
 8005ce0:	42470e40 	.word	0x42470e40

08005ce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b087      	sub	sp, #28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d13f      	bne.n	8005d82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d02:	4b24      	ldr	r3, [pc, #144]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d0a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d006      	beq.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005d18:	d12f      	bne.n	8005d7a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8005d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d1c:	617b      	str	r3, [r7, #20]
          break;
 8005d1e:	e02f      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d20:	4b1c      	ldr	r3, [pc, #112]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d2c:	d108      	bne.n	8005d40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d2e:	4b19      	ldr	r3, [pc, #100]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d36:	4a19      	ldr	r2, [pc, #100]	@ (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	613b      	str	r3, [r7, #16]
 8005d3e:	e007      	b.n	8005d50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d40:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d48:	4a15      	ldr	r2, [pc, #84]	@ (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d4e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d56:	099b      	lsrs	r3, r3, #6
 8005d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d6a:	0f1b      	lsrs	r3, r3, #28
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d76:	617b      	str	r3, [r7, #20]
          break;
 8005d78:	e002      	b.n	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]
          break;
 8005d7e:	bf00      	nop
        }
      }
      break;
 8005d80:	e000      	b.n	8005d84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005d82:	bf00      	nop
    }
  }
  return frequency;
 8005d84:	697b      	ldr	r3, [r7, #20]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40023800 	.word	0x40023800
 8005d98:	00bb8000 	.word	0x00bb8000
 8005d9c:	007a1200 	.word	0x007a1200
 8005da0:	00f42400 	.word	0x00f42400

08005da4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b082      	sub	sp, #8
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e07b      	b.n	8005eae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d108      	bne.n	8005dd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dc6:	d009      	beq.n	8005ddc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	61da      	str	r2, [r3, #28]
 8005dce:	e005      	b.n	8005ddc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d106      	bne.n	8005dfc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb f8c4 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e12:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e24:	431a      	orrs	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	69db      	ldr	r3, [r3, #28]
 8005e52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	ea42 0103 	orr.w	r1, r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e68:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	f003 0104 	and.w	r1, r3, #4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e82:	f003 0210 	and.w	r2, r3, #16
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	69da      	ldr	r2, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e041      	b.n	8005f4c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d106      	bne.n	8005ee2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7fb f899 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f000 fbcb 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6a1a      	ldr	r2, [r3, #32]
 8005f62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f66:	4013      	ands	r3, r2
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d10f      	bne.n	8005f8c <HAL_TIM_Base_Stop+0x38>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6a1a      	ldr	r2, [r3, #32]
 8005f72:	f240 4344 	movw	r3, #1092	@ 0x444
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d107      	bne.n	8005f8c <HAL_TIM_Base_Stop+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d001      	beq.n	8005fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e04e      	b.n	800605a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a23      	ldr	r2, [pc, #140]	@ (8006068 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d022      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d01d      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <HAL_TIM_Base_Start_IT+0xc8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d018      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8006070 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d013      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <HAL_TIM_Base_Start_IT+0xd0>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00e      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <HAL_TIM_Base_Start_IT+0xd4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d009      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a19      	ldr	r2, [pc, #100]	@ (800607c <HAL_TIM_Base_Start_IT+0xd8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d004      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x80>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a18      	ldr	r2, [pc, #96]	@ (8006080 <HAL_TIM_Base_Start_IT+0xdc>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d111      	bne.n	8006048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f003 0307 	and.w	r3, r3, #7
 800602e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b06      	cmp	r3, #6
 8006034:	d010      	beq.n	8006058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0201 	orr.w	r2, r2, #1
 8006044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	e007      	b.n	8006058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f042 0201 	orr.w	r2, r2, #1
 8006056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	40010000 	.word	0x40010000
 800606c:	40000400 	.word	0x40000400
 8006070:	40000800 	.word	0x40000800
 8006074:	40000c00 	.word	0x40000c00
 8006078:	40010400 	.word	0x40010400
 800607c:	40014000 	.word	0x40014000
 8006080:	40001800 	.word	0x40001800

08006084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e041      	b.n	800611a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 f839 	bl	8006122 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	3304      	adds	r3, #4
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f000 fae4 	bl	8006690 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006122:	b480      	push	{r7}
 8006124:	b083      	sub	sp, #12
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d020      	beq.n	800619a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01b      	beq.n	800619a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0202 	mvn.w	r2, #2
 800616a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fa66 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 8006186:	e005      	b.n	8006194 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fa58 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa69 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d020      	beq.n	80061e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f003 0304 	and.w	r3, r3, #4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d01b      	beq.n	80061e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f06f 0204 	mvn.w	r2, #4
 80061b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d003      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa40 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 80061d2:	e005      	b.n	80061e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fa32 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa43 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f003 0308 	and.w	r3, r3, #8
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d020      	beq.n	8006232 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d01b      	beq.n	8006232 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f06f 0208 	mvn.w	r2, #8
 8006202:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa1a 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 800621e:	e005      	b.n	800622c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fa0c 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fa1d 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f003 0310 	and.w	r3, r3, #16
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01b      	beq.n	800627e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f06f 0210 	mvn.w	r2, #16
 800624e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2208      	movs	r2, #8
 8006254:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f9f4 	bl	8006652 <HAL_TIM_IC_CaptureCallback>
 800626a:	e005      	b.n	8006278 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f9e6 	bl	800663e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f9f7 	bl	8006666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00c      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d007      	beq.n	80062a2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f06f 0201 	mvn.w	r2, #1
 800629a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9c4 	bl	800662a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00c      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80062be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fd61 	bl	8006d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00c      	beq.n	80062ea <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d007      	beq.n	80062ea <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f9c8 	bl	800667a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f003 0320 	and.w	r3, r3, #32
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00c      	beq.n	800630e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f06f 0220 	mvn.w	r2, #32
 8006306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fd33 	bl	8006d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006324:	2300      	movs	r3, #0
 8006326:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006332:	2302      	movs	r3, #2
 8006334:	e0ae      	b.n	8006494 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2201      	movs	r2, #1
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b0c      	cmp	r3, #12
 8006342:	f200 809f 	bhi.w	8006484 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006346:	a201      	add	r2, pc, #4	@ (adr r2, 800634c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634c:	08006381 	.word	0x08006381
 8006350:	08006485 	.word	0x08006485
 8006354:	08006485 	.word	0x08006485
 8006358:	08006485 	.word	0x08006485
 800635c:	080063c1 	.word	0x080063c1
 8006360:	08006485 	.word	0x08006485
 8006364:	08006485 	.word	0x08006485
 8006368:	08006485 	.word	0x08006485
 800636c:	08006403 	.word	0x08006403
 8006370:	08006485 	.word	0x08006485
 8006374:	08006485 	.word	0x08006485
 8006378:	08006485 	.word	0x08006485
 800637c:	08006443 	.word	0x08006443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 fa2e 	bl	80067e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699a      	ldr	r2, [r3, #24]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f042 0208 	orr.w	r2, r2, #8
 800639a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0204 	bic.w	r2, r2, #4
 80063aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6999      	ldr	r1, [r3, #24]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	430a      	orrs	r2, r1
 80063bc:	619a      	str	r2, [r3, #24]
      break;
 80063be:	e064      	b.n	800648a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 fa7e 	bl	80068c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6999      	ldr	r1, [r3, #24]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	021a      	lsls	r2, r3, #8
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	619a      	str	r2, [r3, #24]
      break;
 8006400:	e043      	b.n	800648a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68b9      	ldr	r1, [r7, #8]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 fad3 	bl	80069b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69da      	ldr	r2, [r3, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0208 	orr.w	r2, r2, #8
 800641c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	69da      	ldr	r2, [r3, #28]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0204 	bic.w	r2, r2, #4
 800642c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69d9      	ldr	r1, [r3, #28]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	61da      	str	r2, [r3, #28]
      break;
 8006440:	e023      	b.n	800648a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68b9      	ldr	r1, [r7, #8]
 8006448:	4618      	mov	r0, r3
 800644a:	f000 fb27 	bl	8006a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800645c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800646c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	69d9      	ldr	r1, [r3, #28]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	021a      	lsls	r2, r3, #8
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	61da      	str	r2, [r3, #28]
      break;
 8006482:	e002      	b.n	800648a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	75fb      	strb	r3, [r7, #23]
      break;
 8006488:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006492:	7dfb      	ldrb	r3, [r7, #23]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIM_ConfigClockSource+0x1c>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e0b4      	b.n	8006622 <HAL_TIM_ConfigClockSource+0x186>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2202      	movs	r2, #2
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f0:	d03e      	beq.n	8006570 <HAL_TIM_ConfigClockSource+0xd4>
 80064f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064f6:	f200 8087 	bhi.w	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 80064fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064fe:	f000 8086 	beq.w	800660e <HAL_TIM_ConfigClockSource+0x172>
 8006502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006506:	d87f      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006508:	2b70      	cmp	r3, #112	@ 0x70
 800650a:	d01a      	beq.n	8006542 <HAL_TIM_ConfigClockSource+0xa6>
 800650c:	2b70      	cmp	r3, #112	@ 0x70
 800650e:	d87b      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006510:	2b60      	cmp	r3, #96	@ 0x60
 8006512:	d050      	beq.n	80065b6 <HAL_TIM_ConfigClockSource+0x11a>
 8006514:	2b60      	cmp	r3, #96	@ 0x60
 8006516:	d877      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006518:	2b50      	cmp	r3, #80	@ 0x50
 800651a:	d03c      	beq.n	8006596 <HAL_TIM_ConfigClockSource+0xfa>
 800651c:	2b50      	cmp	r3, #80	@ 0x50
 800651e:	d873      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b40      	cmp	r3, #64	@ 0x40
 8006522:	d058      	beq.n	80065d6 <HAL_TIM_ConfigClockSource+0x13a>
 8006524:	2b40      	cmp	r3, #64	@ 0x40
 8006526:	d86f      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b30      	cmp	r3, #48	@ 0x30
 800652a:	d064      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x15a>
 800652c:	2b30      	cmp	r3, #48	@ 0x30
 800652e:	d86b      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b20      	cmp	r3, #32
 8006532:	d060      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006534:	2b20      	cmp	r3, #32
 8006536:	d867      	bhi.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b00      	cmp	r3, #0
 800653a:	d05c      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x15a>
 800653c:	2b10      	cmp	r3, #16
 800653e:	d05a      	beq.n	80065f6 <HAL_TIM_ConfigClockSource+0x15a>
 8006540:	e062      	b.n	8006608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006552:	f000 fb73 	bl	8006c3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	609a      	str	r2, [r3, #8]
      break;
 800656e:	e04f      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006580:	f000 fb5c 	bl	8006c3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006592:	609a      	str	r2, [r3, #8]
      break;
 8006594:	e03c      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	461a      	mov	r2, r3
 80065a4:	f000 fad0 	bl	8006b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2150      	movs	r1, #80	@ 0x50
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 fb29 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065b4:	e02c      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c2:	461a      	mov	r2, r3
 80065c4:	f000 faef 	bl	8006ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2160      	movs	r1, #96	@ 0x60
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fb19 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065d4:	e01c      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e2:	461a      	mov	r2, r3
 80065e4:	f000 fab0 	bl	8006b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2140      	movs	r1, #64	@ 0x40
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fb09 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 80065f4:	e00c      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4619      	mov	r1, r3
 8006600:	4610      	mov	r0, r2
 8006602:	f000 fb00 	bl	8006c06 <TIM_ITRx_SetConfig>
      break;
 8006606:	e003      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
      break;
 800660c:	e000      	b.n	8006610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800660e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006632:	bf00      	nop
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663e:	b480      	push	{r7}
 8006640:	b083      	sub	sp, #12
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006652:	b480      	push	{r7}
 8006654:	b083      	sub	sp, #12
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800666e:	bf00      	nop
 8006670:	370c      	adds	r7, #12
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a46      	ldr	r2, [pc, #280]	@ (80067bc <TIM_Base_SetConfig+0x12c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d013      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ae:	d00f      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a43      	ldr	r2, [pc, #268]	@ (80067c0 <TIM_Base_SetConfig+0x130>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00b      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a42      	ldr	r2, [pc, #264]	@ (80067c4 <TIM_Base_SetConfig+0x134>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d007      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a41      	ldr	r2, [pc, #260]	@ (80067c8 <TIM_Base_SetConfig+0x138>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a40      	ldr	r2, [pc, #256]	@ (80067cc <TIM_Base_SetConfig+0x13c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d108      	bne.n	80066e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	4313      	orrs	r3, r2
 80066e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a35      	ldr	r2, [pc, #212]	@ (80067bc <TIM_Base_SetConfig+0x12c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d02b      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f0:	d027      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a32      	ldr	r2, [pc, #200]	@ (80067c0 <TIM_Base_SetConfig+0x130>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d023      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a31      	ldr	r2, [pc, #196]	@ (80067c4 <TIM_Base_SetConfig+0x134>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d01f      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a30      	ldr	r2, [pc, #192]	@ (80067c8 <TIM_Base_SetConfig+0x138>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01b      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2f      	ldr	r2, [pc, #188]	@ (80067cc <TIM_Base_SetConfig+0x13c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d017      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2e      	ldr	r2, [pc, #184]	@ (80067d0 <TIM_Base_SetConfig+0x140>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a2d      	ldr	r2, [pc, #180]	@ (80067d4 <TIM_Base_SetConfig+0x144>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00f      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a2c      	ldr	r2, [pc, #176]	@ (80067d8 <TIM_Base_SetConfig+0x148>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00b      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a2b      	ldr	r2, [pc, #172]	@ (80067dc <TIM_Base_SetConfig+0x14c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d007      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a2a      	ldr	r2, [pc, #168]	@ (80067e0 <TIM_Base_SetConfig+0x150>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a29      	ldr	r2, [pc, #164]	@ (80067e4 <TIM_Base_SetConfig+0x154>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d108      	bne.n	8006754 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a10      	ldr	r2, [pc, #64]	@ (80067bc <TIM_Base_SetConfig+0x12c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_Base_SetConfig+0xf8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a12      	ldr	r2, [pc, #72]	@ (80067cc <TIM_Base_SetConfig+0x13c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d103      	bne.n	8006790 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	691a      	ldr	r2, [r3, #16]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d105      	bne.n	80067ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f023 0201 	bic.w	r2, r3, #1
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	611a      	str	r2, [r3, #16]
  }
}
 80067ae:	bf00      	nop
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40000400 	.word	0x40000400
 80067c4:	40000800 	.word	0x40000800
 80067c8:	40000c00 	.word	0x40000c00
 80067cc:	40010400 	.word	0x40010400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800
 80067dc:	40001800 	.word	0x40001800
 80067e0:	40001c00 	.word	0x40001c00
 80067e4:	40002000 	.word	0x40002000

080067e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f023 0201 	bic.w	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f023 0302 	bic.w	r3, r3, #2
 8006830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a20      	ldr	r2, [pc, #128]	@ (80068c0 <TIM_OC1_SetConfig+0xd8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d003      	beq.n	800684c <TIM_OC1_SetConfig+0x64>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1f      	ldr	r2, [pc, #124]	@ (80068c4 <TIM_OC1_SetConfig+0xdc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d10c      	bne.n	8006866 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0308 	bic.w	r3, r3, #8
 8006852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f023 0304 	bic.w	r3, r3, #4
 8006864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <TIM_OC1_SetConfig+0xd8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_OC1_SetConfig+0x8e>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a14      	ldr	r2, [pc, #80]	@ (80068c4 <TIM_OC1_SetConfig+0xdc>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d111      	bne.n	800689a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800687c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	4313      	orrs	r3, r2
 800688e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	699b      	ldr	r3, [r3, #24]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	4313      	orrs	r3, r2
 8006898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	621a      	str	r2, [r3, #32]
}
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	40010000 	.word	0x40010000
 80068c4:	40010400 	.word	0x40010400

080068c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f023 0210 	bic.w	r2, r3, #16
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	021b      	lsls	r3, r3, #8
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	f023 0320 	bic.w	r3, r3, #32
 8006912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a22      	ldr	r2, [pc, #136]	@ (80069ac <TIM_OC2_SetConfig+0xe4>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_OC2_SetConfig+0x68>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a21      	ldr	r2, [pc, #132]	@ (80069b0 <TIM_OC2_SetConfig+0xe8>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10d      	bne.n	800694c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800694a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a17      	ldr	r2, [pc, #92]	@ (80069ac <TIM_OC2_SetConfig+0xe4>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d003      	beq.n	800695c <TIM_OC2_SetConfig+0x94>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a16      	ldr	r2, [pc, #88]	@ (80069b0 <TIM_OC2_SetConfig+0xe8>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d113      	bne.n	8006984 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800696a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685a      	ldr	r2, [r3, #4]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	697a      	ldr	r2, [r7, #20]
 800699c:	621a      	str	r2, [r3, #32]
}
 800699e:	bf00      	nop
 80069a0:	371c      	adds	r7, #28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40010400 	.word	0x40010400

080069b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0303 	bic.w	r3, r3, #3
 80069ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a21      	ldr	r2, [pc, #132]	@ (8006a94 <TIM_OC3_SetConfig+0xe0>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d003      	beq.n	8006a1a <TIM_OC3_SetConfig+0x66>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4a20      	ldr	r2, [pc, #128]	@ (8006a98 <TIM_OC3_SetConfig+0xe4>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d10d      	bne.n	8006a36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	021b      	lsls	r3, r3, #8
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a16      	ldr	r2, [pc, #88]	@ (8006a94 <TIM_OC3_SetConfig+0xe0>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d003      	beq.n	8006a46 <TIM_OC3_SetConfig+0x92>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a15      	ldr	r2, [pc, #84]	@ (8006a98 <TIM_OC3_SetConfig+0xe4>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d113      	bne.n	8006a6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	40010000 	.word	0x40010000
 8006a98:	40010400 	.word	0x40010400

08006a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a1b      	ldr	r3, [r3, #32]
 8006ab0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	031b      	lsls	r3, r3, #12
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	4a12      	ldr	r2, [pc, #72]	@ (8006b40 <TIM_OC4_SetConfig+0xa4>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d003      	beq.n	8006b04 <TIM_OC4_SetConfig+0x68>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a11      	ldr	r2, [pc, #68]	@ (8006b44 <TIM_OC4_SetConfig+0xa8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d109      	bne.n	8006b18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	019b      	lsls	r3, r3, #6
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685a      	ldr	r2, [r3, #4]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	621a      	str	r2, [r3, #32]
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	40010000 	.word	0x40010000
 8006b44:	40010400 	.word	0x40010400

08006b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	f023 0201 	bic.w	r2, r3, #1
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	011b      	lsls	r3, r3, #4
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 030a 	bic.w	r3, r3, #10
 8006b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b087      	sub	sp, #28
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f023 0210 	bic.w	r2, r3, #16
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	031b      	lsls	r3, r3, #12
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006be2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	f043 0307 	orr.w	r3, r3, #7
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b087      	sub	sp, #28
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	021a      	lsls	r2, r3, #8
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	bf00      	nop
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d101      	bne.n	8006c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c90:	2302      	movs	r3, #2
 8006c92:	e05a      	b.n	8006d4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a21      	ldr	r2, [pc, #132]	@ (8006d58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d022      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce0:	d01d      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d018      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00e      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a18      	ldr	r2, [pc, #96]	@ (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	@ (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a15      	ldr	r2, [pc, #84]	@ (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d10c      	bne.n	8006d38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40001800 	.word	0x40001800

08006d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	f107 001c 	add.w	r0, r7, #28
 8006daa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d123      	bne.n	8006dfe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006dde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d105      	bne.n	8006df2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f9dc 	bl	80071b0 <USB_CoreReset>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]
 8006dfc:	e01b      	b.n	8006e36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9d0 	bl	80071b0 <USB_CoreReset>
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e28:	e005      	b.n	8006e36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e36:	7fbb      	ldrb	r3, [r7, #30]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d10b      	bne.n	8006e54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f043 0206 	orr.w	r2, r3, #6
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f043 0220 	orr.w	r2, r3, #32
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e60:	b004      	add	sp, #16
 8006e62:	4770      	bx	lr

08006e64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f043 0201 	orr.w	r2, r3, #1
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	370c      	adds	r7, #12
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr

08006e86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f023 0201 	bic.w	r2, r3, #1
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	370c      	adds	r7, #12
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ec4:	78fb      	ldrb	r3, [r7, #3]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d115      	bne.n	8006ef6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006ed6:	200a      	movs	r0, #10
 8006ed8:	f7fa fa4a 	bl	8001370 <HAL_Delay>
      ms += 10U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	330a      	adds	r3, #10
 8006ee0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f956 	bl	8007194 <USB_GetMode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d01e      	beq.n	8006f2c <USB_SetCurrentMode+0x84>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ef2:	d9f0      	bls.n	8006ed6 <USB_SetCurrentMode+0x2e>
 8006ef4:	e01a      	b.n	8006f2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ef6:	78fb      	ldrb	r3, [r7, #3]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d115      	bne.n	8006f28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006f08:	200a      	movs	r0, #10
 8006f0a:	f7fa fa31 	bl	8001370 <HAL_Delay>
      ms += 10U;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	330a      	adds	r3, #10
 8006f12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f93d 	bl	8007194 <USB_GetMode>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d005      	beq.n	8006f2c <USB_SetCurrentMode+0x84>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2bc7      	cmp	r3, #199	@ 0xc7
 8006f24:	d9f0      	bls.n	8006f08 <USB_SetCurrentMode+0x60>
 8006f26:	e001      	b.n	8006f2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e005      	b.n	8006f38 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f30:	d101      	bne.n	8006f36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e000      	b.n	8006f38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b085      	sub	sp, #20
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3301      	adds	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f5a:	d901      	bls.n	8006f60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e01b      	b.n	8006f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	daf2      	bge.n	8006f4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	019b      	lsls	r3, r3, #6
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f84:	d901      	bls.n	8006f8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e006      	b.n	8006f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b20      	cmp	r3, #32
 8006f94:	d0f0      	beq.n	8006f78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fbc:	d901      	bls.n	8006fc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e018      	b.n	8006ff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	daf2      	bge.n	8006fb0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2210      	movs	r2, #16
 8006fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fe0:	d901      	bls.n	8006fe6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e006      	b.n	8006ff4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d0f0      	beq.n	8006fd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007000:	b480      	push	{r7}
 8007002:	b089      	sub	sp, #36	@ 0x24
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4611      	mov	r1, r2
 800700c:	461a      	mov	r2, r3
 800700e:	460b      	mov	r3, r1
 8007010:	71fb      	strb	r3, [r7, #7]
 8007012:	4613      	mov	r3, r2
 8007014:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800701e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007022:	2b00      	cmp	r3, #0
 8007024:	d123      	bne.n	800706e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007026:	88bb      	ldrh	r3, [r7, #4]
 8007028:	3303      	adds	r3, #3
 800702a:	089b      	lsrs	r3, r3, #2
 800702c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
 8007032:	e018      	b.n	8007066 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	031a      	lsls	r2, r3, #12
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4413      	add	r3, r2
 800703c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007040:	461a      	mov	r2, r3
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	3301      	adds	r3, #1
 800704c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	3301      	adds	r3, #1
 8007052:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	3301      	adds	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	3301      	adds	r3, #1
 800705e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	3301      	adds	r3, #1
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3e2      	bcc.n	8007034 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3724      	adds	r7, #36	@ 0x24
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800707c:	b480      	push	{r7}
 800707e:	b08b      	sub	sp, #44	@ 0x2c
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007092:	88fb      	ldrh	r3, [r7, #6]
 8007094:	089b      	lsrs	r3, r3, #2
 8007096:	b29b      	uxth	r3, r3
 8007098:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	f003 0303 	and.w	r3, r3, #3
 80070a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80070a2:	2300      	movs	r3, #0
 80070a4:	623b      	str	r3, [r7, #32]
 80070a6:	e014      	b.n	80070d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	3301      	adds	r3, #1
 80070b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	3301      	adds	r3, #1
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	3301      	adds	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80070c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c8:	3301      	adds	r3, #1
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	3301      	adds	r3, #1
 80070d0:	623b      	str	r3, [r7, #32]
 80070d2:	6a3a      	ldr	r2, [r7, #32]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d3e6      	bcc.n	80070a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80070da:	8bfb      	ldrh	r3, [r7, #30]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01e      	beq.n	800711e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80070ea:	461a      	mov	r2, r3
 80070ec:	f107 0310 	add.w	r3, r7, #16
 80070f0:	6812      	ldr	r2, [r2, #0]
 80070f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	6a3b      	ldr	r3, [r7, #32]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007100:	b2da      	uxtb	r2, r3
 8007102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007104:	701a      	strb	r2, [r3, #0]
      i++;
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	3301      	adds	r3, #1
 800710a:	623b      	str	r3, [r7, #32]
      pDest++;
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	3301      	adds	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007112:	8bfb      	ldrh	r3, [r7, #30]
 8007114:	3b01      	subs	r3, #1
 8007116:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007118:	8bfb      	ldrh	r3, [r7, #30]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1ea      	bne.n	80070f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007120:	4618      	mov	r0, r3
 8007122:	372c      	adds	r7, #44	@ 0x2c
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	695b      	ldr	r3, [r3, #20]
 8007138:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4013      	ands	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007144:	68fb      	ldr	r3, [r7, #12]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3714      	adds	r7, #20
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	460b      	mov	r3, r1
 800715c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007162:	78fb      	ldrb	r3, [r7, #3]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	4013      	ands	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007186:	68bb      	ldr	r3, [r7, #8]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0301 	and.w	r3, r3, #1
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	3301      	adds	r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071c8:	d901      	bls.n	80071ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e01b      	b.n	8007206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	daf2      	bge.n	80071bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f043 0201 	orr.w	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	3301      	adds	r3, #1
 80071ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f2:	d901      	bls.n	80071f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e006      	b.n	8007206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b01      	cmp	r3, #1
 8007202:	d0f0      	beq.n	80071e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007214:	b084      	sub	sp, #16
 8007216:	b580      	push	{r7, lr}
 8007218:	b086      	sub	sp, #24
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007234:	461a      	mov	r2, r3
 8007236:	2300      	movs	r3, #0
 8007238:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800723e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007256:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007266:	2b00      	cmp	r3, #0
 8007268:	d119      	bne.n	800729e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800726a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10a      	bne.n	8007288 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007280:	f043 0304 	orr.w	r3, r3, #4
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	e014      	b.n	80072b2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007296:	f023 0304 	bic.w	r3, r3, #4
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	e009      	b.n	80072b2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072ac:	f023 0304 	bic.w	r3, r3, #4
 80072b0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072b2:	2110      	movs	r1, #16
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fe43 	bl	8006f40 <USB_FlushTxFifo>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff fe6d 	bl	8006fa4 <USB_FlushRxFifo>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d001      	beq.n	80072d4 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
 80072d8:	e015      	b.n	8007306 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072e6:	461a      	mov	r2, r3
 80072e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072ec:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072fa:	461a      	mov	r2, r3
 80072fc:	2300      	movs	r3, #0
 80072fe:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	3301      	adds	r3, #1
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800730a:	461a      	mov	r2, r3
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	4293      	cmp	r3, r2
 8007310:	d3e3      	bcc.n	80072da <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800731e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a18      	ldr	r2, [pc, #96]	@ (8007384 <USB_HostInit+0x170>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d10b      	bne.n	8007340 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800732e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a15      	ldr	r2, [pc, #84]	@ (8007388 <USB_HostInit+0x174>)
 8007334:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a14      	ldr	r2, [pc, #80]	@ (800738c <USB_HostInit+0x178>)
 800733a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800733e:	e009      	b.n	8007354 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2280      	movs	r2, #128	@ 0x80
 8007344:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <USB_HostInit+0x17c>)
 800734a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a11      	ldr	r2, [pc, #68]	@ (8007394 <USB_HostInit+0x180>)
 8007350:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007354:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007358:	2b00      	cmp	r3, #0
 800735a:	d105      	bne.n	8007368 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f043 0210 	orr.w	r2, r3, #16
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699a      	ldr	r2, [r3, #24]
 800736c:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <USB_HostInit+0x184>)
 800736e:	4313      	orrs	r3, r2
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007380:	b004      	add	sp, #16
 8007382:	4770      	bx	lr
 8007384:	40040000 	.word	0x40040000
 8007388:	01000200 	.word	0x01000200
 800738c:	00e00300 	.word	0x00e00300
 8007390:	00600080 	.word	0x00600080
 8007394:	004000e0 	.word	0x004000e0
 8007398:	a3200008 	.word	0xa3200008

0800739c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073c6:	681a      	ldr	r2, [r3, #0]
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	f003 0303 	and.w	r3, r3, #3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80073d4:	4313      	orrs	r3, r2
 80073d6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80073d8:	78fb      	ldrb	r3, [r7, #3]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d107      	bne.n	80073ee <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e4:	461a      	mov	r2, r3
 80073e6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80073ea:	6053      	str	r3, [r2, #4]
 80073ec:	e00c      	b.n	8007408 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80073ee:	78fb      	ldrb	r3, [r7, #3]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d107      	bne.n	8007404 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073fa:	461a      	mov	r2, r3
 80073fc:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007400:	6053      	str	r3, [r2, #4]
 8007402:	e001      	b.n	8007408 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e000      	b.n	800740a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3714      	adds	r7, #20
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007436:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007440:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007444:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007446:	2064      	movs	r0, #100	@ 0x64
 8007448:	f7f9 ff92 	bl	8001370 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007458:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800745a:	200a      	movs	r0, #10
 800745c:	f7f9 ff88 	bl	8001370 <HAL_Delay>

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800746a:	b480      	push	{r7}
 800746c:	b085      	sub	sp, #20
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800748e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d109      	bne.n	80074ae <USB_DriveVbus+0x44>
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d106      	bne.n	80074ae <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80074a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80074ac:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80074b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b8:	d109      	bne.n	80074ce <USB_DriveVbus+0x64>
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80074c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074cc:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	0c5b      	lsrs	r3, r3, #17
 80074fa:	f003 0303 	and.w	r3, r3, #3
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	b29b      	uxth	r3, r3
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	461a      	mov	r2, r3
 800753a:	4603      	mov	r3, r0
 800753c:	70fb      	strb	r3, [r7, #3]
 800753e:	460b      	mov	r3, r1
 8007540:	70bb      	strb	r3, [r7, #2]
 8007542:	4613      	mov	r3, r2
 8007544:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007546:	2300      	movs	r3, #0
 8007548:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	015a      	lsls	r2, r3, #5
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	4413      	add	r3, r2
 8007556:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800755a:	461a      	mov	r2, r3
 800755c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007560:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007562:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007566:	2b03      	cmp	r3, #3
 8007568:	d87c      	bhi.n	8007664 <USB_HC_Init+0x138>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <USB_HC_Init+0x44>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007581 	.word	0x08007581
 8007574:	08007627 	.word	0x08007627
 8007578:	08007581 	.word	0x08007581
 800757c:	080075e9 	.word	0x080075e9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758c:	461a      	mov	r2, r3
 800758e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007592:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007594:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007598:	2b00      	cmp	r3, #0
 800759a:	da10      	bge.n	80075be <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	78fa      	ldrb	r2, [r7, #3]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075ba:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80075bc:	e055      	b.n	800766a <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	4a6f      	ldr	r2, [pc, #444]	@ (8007780 <USB_HC_Init+0x254>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d151      	bne.n	800766a <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80075c6:	78fb      	ldrb	r3, [r7, #3]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075e0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80075e4:	60d3      	str	r3, [r2, #12]
      break;
 80075e6:	e040      	b.n	800766a <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80075e8:	78fb      	ldrb	r3, [r7, #3]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075f4:	461a      	mov	r2, r3
 80075f6:	f240 639d 	movw	r3, #1693	@ 0x69d
 80075fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80075fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007600:	2b00      	cmp	r3, #0
 8007602:	da34      	bge.n	800766e <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	4413      	add	r3, r2
 800760c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	78fa      	ldrb	r2, [r7, #3]
 8007614:	0151      	lsls	r1, r2, #5
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	440a      	add	r2, r1
 800761a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800761e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007622:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007624:	e023      	b.n	800766e <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4413      	add	r3, r2
 800762e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007632:	461a      	mov	r2, r3
 8007634:	f240 2325 	movw	r3, #549	@ 0x225
 8007638:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800763a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da17      	bge.n	8007672 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	78fa      	ldrb	r2, [r7, #3]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	440a      	add	r2, r1
 8007658:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800765c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007660:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007662:	e006      	b.n	8007672 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	77fb      	strb	r3, [r7, #31]
      break;
 8007668:	e004      	b.n	8007674 <USB_HC_Init+0x148>
      break;
 800766a:	bf00      	nop
 800766c:	e002      	b.n	8007674 <USB_HC_Init+0x148>
      break;
 800766e:	bf00      	nop
 8007670:	e000      	b.n	8007674 <USB_HC_Init+0x148>
      break;
 8007672:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007674:	78fb      	ldrb	r3, [r7, #3]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	4413      	add	r3, r2
 800767c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007680:	461a      	mov	r2, r3
 8007682:	2300      	movs	r3, #0
 8007684:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007686:	78fb      	ldrb	r3, [r7, #3]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	4413      	add	r3, r2
 800768e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	78fa      	ldrb	r2, [r7, #3]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	440a      	add	r2, r1
 800769c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076ac:	699a      	ldr	r2, [r3, #24]
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	2101      	movs	r1, #1
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	6939      	ldr	r1, [r7, #16]
 80076bc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80076c0:	4313      	orrs	r3, r2
 80076c2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80076d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	da03      	bge.n	80076e0 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80076d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	e001      	b.n	80076e4 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff fef9 	bl	80074dc <USB_GetHostSpeed>
 80076ea:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80076ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d106      	bne.n	8007702 <USB_HC_Init+0x1d6>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d003      	beq.n	8007702 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80076fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80076fe:	617b      	str	r3, [r7, #20]
 8007700:	e001      	b.n	8007706 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007706:	787b      	ldrb	r3, [r7, #1]
 8007708:	059b      	lsls	r3, r3, #22
 800770a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800770e:	78bb      	ldrb	r3, [r7, #2]
 8007710:	02db      	lsls	r3, r3, #11
 8007712:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007716:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007718:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800771c:	049b      	lsls	r3, r3, #18
 800771e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007722:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007724:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007726:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800772a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	431a      	orrs	r2, r3
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	0151      	lsls	r1, r2, #5
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	440a      	add	r2, r1
 800773c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007740:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007744:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007746:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800774a:	2b03      	cmp	r3, #3
 800774c:	d003      	beq.n	8007756 <USB_HC_Init+0x22a>
 800774e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007752:	2b01      	cmp	r3, #1
 8007754:	d10f      	bne.n	8007776 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007756:	78fb      	ldrb	r3, [r7, #3]
 8007758:	015a      	lsls	r2, r3, #5
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	4413      	add	r3, r2
 800775e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	0151      	lsls	r1, r2, #5
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	440a      	add	r2, r1
 800776c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007774:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007776:	7ffb      	ldrb	r3, [r7, #31]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3720      	adds	r7, #32
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40040000 	.word	0x40040000

08007784 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	@ 0x30
 8007788:	af02      	add	r7, sp, #8
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	785b      	ldrb	r3, [r3, #1]
 800779a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800779c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80077a0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4a5d      	ldr	r2, [pc, #372]	@ (800791c <USB_HC_StartXfer+0x198>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d12f      	bne.n	800780a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80077aa:	79fb      	ldrb	r3, [r7, #7]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d11c      	bne.n	80077ea <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	7c9b      	ldrb	r3, [r3, #18]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <USB_HC_StartXfer+0x3c>
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	7c9b      	ldrb	r3, [r3, #18]
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d124      	bne.n	800780a <USB_HC_StartXfer+0x86>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	799b      	ldrb	r3, [r3, #6]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d120      	bne.n	800780a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e6:	60d3      	str	r3, [r2, #12]
 80077e8:	e00f      	b.n	800780a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	791b      	ldrb	r3, [r3, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <USB_HC_StartXfer+0x86>
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	795b      	ldrb	r3, [r3, #5]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d107      	bne.n	800780a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	785b      	ldrb	r3, [r3, #1]
 80077fe:	4619      	mov	r1, r3
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 fb6b 	bl	8007edc <USB_DoPing>
        return HAL_OK;
 8007806:	2300      	movs	r3, #0
 8007808:	e232      	b.n	8007c70 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	799b      	ldrb	r3, [r3, #6]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d158      	bne.n	80078c4 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007812:	2301      	movs	r3, #1
 8007814:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	78db      	ldrb	r3, [r3, #3]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d007      	beq.n	800782e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800781e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007820:	68ba      	ldr	r2, [r7, #8]
 8007822:	8a92      	ldrh	r2, [r2, #20]
 8007824:	fb03 f202 	mul.w	r2, r3, r2
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	61da      	str	r2, [r3, #28]
 800782c:	e07c      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	7c9b      	ldrb	r3, [r3, #18]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d130      	bne.n	8007898 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	2bbc      	cmp	r3, #188	@ 0xbc
 800783c:	d918      	bls.n	8007870 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	8a9b      	ldrh	r3, [r3, #20]
 8007842:	461a      	mov	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d003      	beq.n	8007860 <USB_HC_StartXfer+0xdc>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	2b02      	cmp	r3, #2
 800785e:	d103      	bne.n	8007868 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2202      	movs	r2, #2
 8007864:	60da      	str	r2, [r3, #12]
 8007866:	e05f      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2201      	movs	r2, #1
 800786c:	60da      	str	r2, [r3, #12]
 800786e:	e05b      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	6a1a      	ldr	r2, [r3, #32]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d007      	beq.n	8007890 <USB_HC_StartXfer+0x10c>
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	2b02      	cmp	r3, #2
 8007886:	d003      	beq.n	8007890 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2204      	movs	r2, #4
 800788c:	60da      	str	r2, [r3, #12]
 800788e:	e04b      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2203      	movs	r2, #3
 8007894:	60da      	str	r2, [r3, #12]
 8007896:	e047      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d10d      	bne.n	80078ba <USB_HC_StartXfer+0x136>
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	8a92      	ldrh	r2, [r2, #20]
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d907      	bls.n	80078ba <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078ac:	68ba      	ldr	r2, [r7, #8]
 80078ae:	8a92      	ldrh	r2, [r2, #20]
 80078b0:	fb03 f202 	mul.w	r2, r3, r2
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	61da      	str	r2, [r3, #28]
 80078b8:	e036      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6a1a      	ldr	r2, [r3, #32]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	61da      	str	r2, [r3, #28]
 80078c2:	e031      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	6a1b      	ldr	r3, [r3, #32]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d018      	beq.n	80078fe <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	6a1b      	ldr	r3, [r3, #32]
 80078d0:	68ba      	ldr	r2, [r7, #8]
 80078d2:	8a92      	ldrh	r2, [r2, #20]
 80078d4:	4413      	add	r3, r2
 80078d6:	3b01      	subs	r3, #1
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	8a92      	ldrh	r2, [r2, #20]
 80078dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80078e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80078e2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80078e4:	8b7b      	ldrh	r3, [r7, #26]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d90b      	bls.n	8007902 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80078ea:	8b7b      	ldrh	r3, [r7, #26]
 80078ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80078ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078f0:	68ba      	ldr	r2, [r7, #8]
 80078f2:	8a92      	ldrh	r2, [r2, #20]
 80078f4:	fb03 f202 	mul.w	r2, r3, r2
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	61da      	str	r2, [r3, #28]
 80078fc:	e001      	b.n	8007902 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80078fe:	2301      	movs	r3, #1
 8007900:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	78db      	ldrb	r3, [r3, #3]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800790a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	8a92      	ldrh	r2, [r2, #20]
 8007910:	fb03 f202 	mul.w	r2, r3, r2
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	61da      	str	r2, [r3, #28]
 8007918:	e006      	b.n	8007928 <USB_HC_StartXfer+0x1a4>
 800791a:	bf00      	nop
 800791c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	6a1a      	ldr	r2, [r3, #32]
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007930:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007932:	04d9      	lsls	r1, r3, #19
 8007934:	4ba3      	ldr	r3, [pc, #652]	@ (8007bc4 <USB_HC_StartXfer+0x440>)
 8007936:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007938:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	7d9b      	ldrb	r3, [r3, #22]
 800793e:	075b      	lsls	r3, r3, #29
 8007940:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	0148      	lsls	r0, r1, #5
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	4401      	add	r1, r0
 800794c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007950:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007952:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007954:	79fb      	ldrb	r3, [r7, #7]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	6999      	ldr	r1, [r3, #24]
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	4413      	add	r3, r2
 8007966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800796a:	460a      	mov	r2, r1
 800796c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	440a      	add	r2, r1
 800799c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80079a4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80079a6:	69fb      	ldr	r3, [r7, #28]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	7e7b      	ldrb	r3, [r7, #25]
 80079b6:	075b      	lsls	r3, r3, #29
 80079b8:	69f9      	ldr	r1, [r7, #28]
 80079ba:	0148      	lsls	r0, r1, #5
 80079bc:	6a39      	ldr	r1, [r7, #32]
 80079be:	4401      	add	r1, r0
 80079c0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80079c4:	4313      	orrs	r3, r2
 80079c6:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	799b      	ldrb	r3, [r3, #6]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	f040 80c3 	bne.w	8007b58 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	7c5b      	ldrb	r3, [r3, #17]
 80079d6:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079dc:	4313      	orrs	r3, r2
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	0151      	lsls	r1, r2, #5
 80079e2:	6a3a      	ldr	r2, [r7, #32]
 80079e4:	440a      	add	r2, r1
 80079e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80079ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80079ee:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	015a      	lsls	r2, r3, #5
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	4413      	add	r3, r2
 80079f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	69fa      	ldr	r2, [r7, #28]
 8007a00:	0151      	lsls	r1, r2, #5
 8007a02:	6a3a      	ldr	r2, [r7, #32]
 8007a04:	440a      	add	r2, r1
 8007a06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a0a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a0e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	79db      	ldrb	r3, [r3, #7]
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d123      	bne.n	8007a60 <USB_HC_StartXfer+0x2dc>
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	78db      	ldrb	r3, [r3, #3]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11f      	bne.n	8007a60 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	69fa      	ldr	r2, [r7, #28]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	6a3a      	ldr	r2, [r7, #32]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a3e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	0151      	lsls	r1, r2, #5
 8007a52:	6a3a      	ldr	r2, [r7, #32]
 8007a54:	440a      	add	r2, r1
 8007a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a5e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	7c9b      	ldrb	r3, [r3, #18]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d003      	beq.n	8007a70 <USB_HC_StartXfer+0x2ec>
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	7c9b      	ldrb	r3, [r3, #18]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d117      	bne.n	8007aa0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d113      	bne.n	8007aa0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	78db      	ldrb	r3, [r3, #3]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d10f      	bne.n	8007aa0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	0151      	lsls	r1, r2, #5
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	440a      	add	r2, r1
 8007a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a9e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	7c9b      	ldrb	r3, [r3, #18]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d162      	bne.n	8007b6e <USB_HC_StartXfer+0x3ea>
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	78db      	ldrb	r3, [r3, #3]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d15e      	bne.n	8007b6e <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d858      	bhi.n	8007b6c <USB_HC_StartXfer+0x3e8>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <USB_HC_StartXfer+0x33c>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad1 	.word	0x08007ad1
 8007ac4:	08007af3 	.word	0x08007af3
 8007ac8:	08007b15 	.word	0x08007b15
 8007acc:	08007b37 	.word	0x08007b37
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	6a3a      	ldr	r2, [r7, #32]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aee:	6053      	str	r3, [r2, #4]
          break;
 8007af0:	e03d      	b.n	8007b6e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	015a      	lsls	r2, r3, #5
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	4413      	add	r3, r2
 8007afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b0c:	f043 030e 	orr.w	r3, r3, #14
 8007b10:	6053      	str	r3, [r2, #4]
          break;
 8007b12:	e02c      	b.n	8007b6e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	69fa      	ldr	r2, [r7, #28]
 8007b24:	0151      	lsls	r1, r2, #5
 8007b26:	6a3a      	ldr	r2, [r7, #32]
 8007b28:	440a      	add	r2, r1
 8007b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b32:	6053      	str	r3, [r2, #4]
          break;
 8007b34:	e01b      	b.n	8007b6e <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	69fa      	ldr	r2, [r7, #28]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	6a3a      	ldr	r2, [r7, #32]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b54:	6053      	str	r3, [r2, #4]
          break;
 8007b56:	e00a      	b.n	8007b6e <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b64:	461a      	mov	r2, r3
 8007b66:	2300      	movs	r3, #0
 8007b68:	6053      	str	r3, [r2, #4]
 8007b6a:	e000      	b.n	8007b6e <USB_HC_StartXfer+0x3ea>
          break;
 8007b6c:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b84:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	78db      	ldrb	r3, [r3, #3]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d004      	beq.n	8007b98 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b94:	613b      	str	r3, [r7, #16]
 8007b96:	e003      	b.n	8007ba0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b9e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ba6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d003      	beq.n	8007bc8 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e055      	b.n	8007c70 <USB_HC_StartXfer+0x4ec>
 8007bc4:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	78db      	ldrb	r3, [r3, #3]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d14e      	bne.n	8007c6e <USB_HC_StartXfer+0x4ea>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d04a      	beq.n	8007c6e <USB_HC_StartXfer+0x4ea>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	79db      	ldrb	r3, [r3, #7]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d146      	bne.n	8007c6e <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	7c9b      	ldrb	r3, [r3, #18]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d831      	bhi.n	8007c4c <USB_HC_StartXfer+0x4c8>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <USB_HC_StartXfer+0x46c>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c25 	.word	0x08007c25
 8007bf8:	08007c01 	.word	0x08007c01
 8007bfc:	08007c25 	.word	0x08007c25
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	3303      	adds	r3, #3
 8007c06:	089b      	lsrs	r3, r3, #2
 8007c08:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007c0a:	8afa      	ldrh	r2, [r7, #22]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d91c      	bls.n	8007c50 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	f043 0220 	orr.w	r2, r3, #32
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c22:	e015      	b.n	8007c50 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	6a1b      	ldr	r3, [r3, #32]
 8007c28:	3303      	adds	r3, #3
 8007c2a:	089b      	lsrs	r3, r3, #2
 8007c2c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007c2e:	8afa      	ldrh	r2, [r7, #22]
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d90a      	bls.n	8007c54 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	619a      	str	r2, [r3, #24]
        }
        break;
 8007c4a:	e003      	b.n	8007c54 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007c4c:	bf00      	nop
 8007c4e:	e002      	b.n	8007c56 <USB_HC_StartXfer+0x4d2>
        break;
 8007c50:	bf00      	nop
 8007c52:	e000      	b.n	8007c56 <USB_HC_StartXfer+0x4d2>
        break;
 8007c54:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6999      	ldr	r1, [r3, #24]
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	785a      	ldrb	r2, [r3, #1]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	2000      	movs	r0, #0
 8007c66:	9000      	str	r0, [sp, #0]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f7ff f9c9 	bl	8007000 <USB_WritePacket>
  }

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3728      	adds	r7, #40	@ 0x28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b085      	sub	sp, #20
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	b29b      	uxth	r3, r3
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b089      	sub	sp, #36	@ 0x24
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	015a      	lsls	r2, r3, #5
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	0c9b      	lsrs	r3, r3, #18
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	0fdb      	lsrs	r3, r3, #31
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	0fdb      	lsrs	r3, r3, #31
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d10d      	bne.n	8007d1c <USB_HC_Halt+0x82>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10a      	bne.n	8007d1c <USB_HC_Halt+0x82>
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d005      	beq.n	8007d18 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d002      	beq.n	8007d18 <USB_HC_Halt+0x7e>
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d101      	bne.n	8007d1c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	e0d8      	b.n	8007ece <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <USB_HC_Halt+0x8e>
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d173      	bne.n	8007e10 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	0151      	lsls	r1, r2, #5
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	440a      	add	r2, r1
 8007d3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d46:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f003 0320 	and.w	r3, r3, #32
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d14a      	bne.n	8007dea <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d133      	bne.n	8007dc8 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	0151      	lsls	r1, r2, #5
 8007d72:	69fa      	ldr	r2, [r7, #28]
 8007d74:	440a      	add	r2, r1
 8007d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d7e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	015a      	lsls	r2, r3, #5
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	4413      	add	r3, r2
 8007d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	69ba      	ldr	r2, [r7, #24]
 8007d90:	0151      	lsls	r1, r2, #5
 8007d92:	69fa      	ldr	r2, [r7, #28]
 8007d94:	440a      	add	r2, r1
 8007d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d9e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dac:	d82e      	bhi.n	8007e0c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007dc4:	d0ec      	beq.n	8007da0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007dc6:	e081      	b.n	8007ecc <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dc8:	69bb      	ldr	r3, [r7, #24]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	0151      	lsls	r1, r2, #5
 8007dda:	69fa      	ldr	r2, [r7, #28]
 8007ddc:	440a      	add	r2, r1
 8007dde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007de2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007de6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007de8:	e070      	b.n	8007ecc <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	015a      	lsls	r2, r3, #5
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	4413      	add	r3, r2
 8007df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e08:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e0a:	e05f      	b.n	8007ecc <USB_HC_Halt+0x232>
            break;
 8007e0c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007e0e:	e05d      	b.n	8007ecc <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e2a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e2e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d133      	bne.n	8007ea8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	015a      	lsls	r2, r3, #5
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	4413      	add	r3, r2
 8007e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	69ba      	ldr	r2, [r7, #24]
 8007e50:	0151      	lsls	r1, r2, #5
 8007e52:	69fa      	ldr	r2, [r7, #28]
 8007e54:	440a      	add	r2, r1
 8007e56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e5e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e7e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e8c:	d81d      	bhi.n	8007eca <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e8e:	69bb      	ldr	r3, [r7, #24]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ea4:	d0ec      	beq.n	8007e80 <USB_HC_Halt+0x1e6>
 8007ea6:	e011      	b.n	8007ecc <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	015a      	lsls	r2, r3, #5
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	4413      	add	r3, r2
 8007eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	0151      	lsls	r1, r2, #5
 8007eba:	69fa      	ldr	r2, [r7, #28]
 8007ebc:	440a      	add	r2, r1
 8007ebe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ec2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	e000      	b.n	8007ecc <USB_HC_Halt+0x232>
          break;
 8007eca:	bf00      	nop
    }
  }

  return HAL_OK;
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3724      	adds	r7, #36	@ 0x24
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
	...

08007edc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b087      	sub	sp, #28
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007eec:	78fb      	ldrb	r3, [r7, #3]
 8007eee:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	04da      	lsls	r2, r3, #19
 8007ef8:	4b15      	ldr	r3, [pc, #84]	@ (8007f50 <USB_DoPing+0x74>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f0c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f24:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f2c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	1ff80000 	.word	0x1ff80000

08007f54 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fe ff8c 	bl	8006e86 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f6e:	2110      	movs	r1, #16
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7fe ffe5 	bl	8006f40 <USB_FlushTxFifo>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff f80f 	bl	8006fa4 <USB_FlushRxFifo>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007f90:	2300      	movs	r3, #0
 8007f92:	61bb      	str	r3, [r7, #24]
 8007f94:	e01f      	b.n	8007fd6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fac:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007fbc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fca:	461a      	mov	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61bb      	str	r3, [r7, #24]
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b0f      	cmp	r3, #15
 8007fda:	d9dc      	bls.n	8007f96 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	61bb      	str	r3, [r7, #24]
 8007fe0:	e034      	b.n	800804c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ff8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008000:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008008:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008016:	461a      	mov	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	3301      	adds	r3, #1
 8008020:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008028:	d80c      	bhi.n	8008044 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	4413      	add	r3, r2
 8008032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800803c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008040:	d0ec      	beq.n	800801c <USB_StopHost+0xc8>
 8008042:	e000      	b.n	8008046 <USB_StopHost+0xf2>
        break;
 8008044:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	3301      	adds	r3, #1
 800804a:	61bb      	str	r3, [r7, #24]
 800804c:	69bb      	ldr	r3, [r7, #24]
 800804e:	2b0f      	cmp	r3, #15
 8008050:	d9c7      	bls.n	8007fe2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008058:	461a      	mov	r2, r3
 800805a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800805e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008066:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7fe fefb 	bl	8006e64 <USB_EnableGlobalInt>

  return ret;
 800806e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008078:	b590      	push	{r4, r7, lr}
 800807a:	b089      	sub	sp, #36	@ 0x24
 800807c:	af04      	add	r7, sp, #16
 800807e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008080:	2301      	movs	r3, #1
 8008082:	2202      	movs	r2, #2
 8008084:	2102      	movs	r1, #2
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fc85 	bl	8008996 <USBH_FindInterface>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2bff      	cmp	r3, #255	@ 0xff
 8008094:	d002      	beq.n	800809c <USBH_CDC_InterfaceInit+0x24>
 8008096:	7bfb      	ldrb	r3, [r7, #15]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d901      	bls.n	80080a0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800809c:	2302      	movs	r3, #2
 800809e:	e13d      	b.n	800831c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fc5a 	bl	800895e <USBH_SelectInterface>
 80080aa:	4603      	mov	r3, r0
 80080ac:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80080ae:	7bbb      	ldrb	r3, [r7, #14]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80080b4:	2302      	movs	r3, #2
 80080b6:	e131      	b.n	800831c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80080be:	2050      	movs	r0, #80	@ 0x50
 80080c0:	f002 fb64 	bl	800a78c <malloc>
 80080c4:	4603      	mov	r3, r0
 80080c6:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080ce:	69db      	ldr	r3, [r3, #28]
 80080d0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80080d8:	2302      	movs	r3, #2
 80080da:	e11f      	b.n	800831c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80080dc:	2250      	movs	r2, #80	@ 0x50
 80080de:	2100      	movs	r1, #0
 80080e0:	68b8      	ldr	r0, [r7, #8]
 80080e2:	f002 fc11 	bl	800a908 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	211a      	movs	r1, #26
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b25b      	sxtb	r3, r3
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	da15      	bge.n	800812a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080fe:	7bfb      	ldrb	r3, [r7, #15]
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	211a      	movs	r1, #26
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	4413      	add	r3, r2
 800810a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008114:	7bfb      	ldrb	r3, [r7, #15]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	211a      	movs	r1, #26
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	4413      	add	r3, r2
 8008120:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008124:	881a      	ldrh	r2, [r3, #0]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f001 ffbe 	bl	800a0b2 <USBH_AllocPipe>
 8008136:	4603      	mov	r3, r0
 8008138:	461a      	mov	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	7819      	ldrb	r1, [r3, #0]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	7858      	ldrb	r0, [r3, #1]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	8952      	ldrh	r2, [r2, #10]
 8008156:	9202      	str	r2, [sp, #8]
 8008158:	2203      	movs	r2, #3
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4623      	mov	r3, r4
 8008160:	4602      	mov	r2, r0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f001 ff76 	bl	800a054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2200      	movs	r2, #0
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f002 fa85 	bl	800a680 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008176:	2300      	movs	r3, #0
 8008178:	2200      	movs	r2, #0
 800817a:	210a      	movs	r1, #10
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 fc0a 	bl	8008996 <USBH_FindInterface>
 8008182:	4603      	mov	r3, r0
 8008184:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008186:	7bfb      	ldrb	r3, [r7, #15]
 8008188:	2bff      	cmp	r3, #255	@ 0xff
 800818a:	d002      	beq.n	8008192 <USBH_CDC_InterfaceInit+0x11a>
 800818c:	7bfb      	ldrb	r3, [r7, #15]
 800818e:	2b01      	cmp	r3, #1
 8008190:	d901      	bls.n	8008196 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008192:	2302      	movs	r3, #2
 8008194:	e0c2      	b.n	800831c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	211a      	movs	r1, #26
 800819c:	fb01 f303 	mul.w	r3, r1, r3
 80081a0:	4413      	add	r3, r2
 80081a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	b25b      	sxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	da16      	bge.n	80081dc <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	211a      	movs	r1, #26
 80081b4:	fb01 f303 	mul.w	r3, r1, r3
 80081b8:	4413      	add	r3, r2
 80081ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081be:	781a      	ldrb	r2, [r3, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	211a      	movs	r1, #26
 80081ca:	fb01 f303 	mul.w	r3, r1, r3
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80081d4:	881a      	ldrh	r2, [r3, #0]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	835a      	strh	r2, [r3, #26]
 80081da:	e015      	b.n	8008208 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80081dc:	7bfb      	ldrb	r3, [r7, #15]
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	211a      	movs	r1, #26
 80081e2:	fb01 f303 	mul.w	r3, r1, r3
 80081e6:	4413      	add	r3, r2
 80081e8:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80081ec:	781a      	ldrb	r2, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	211a      	movs	r1, #26
 80081f8:	fb01 f303 	mul.w	r3, r1, r3
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008202:	881a      	ldrh	r2, [r3, #0]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	211a      	movs	r1, #26
 800820e:	fb01 f303 	mul.w	r3, r1, r3
 8008212:	4413      	add	r3, r2
 8008214:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b25b      	sxtb	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	da16      	bge.n	800824e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	211a      	movs	r1, #26
 8008226:	fb01 f303 	mul.w	r3, r1, r3
 800822a:	4413      	add	r3, r2
 800822c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008230:	781a      	ldrb	r2, [r3, #0]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	211a      	movs	r1, #26
 800823c:	fb01 f303 	mul.w	r3, r1, r3
 8008240:	4413      	add	r3, r2
 8008242:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008246:	881a      	ldrh	r2, [r3, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	835a      	strh	r2, [r3, #26]
 800824c:	e015      	b.n	800827a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	211a      	movs	r1, #26
 8008254:	fb01 f303 	mul.w	r3, r1, r3
 8008258:	4413      	add	r3, r2
 800825a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800825e:	781a      	ldrb	r2, [r3, #0]
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	211a      	movs	r1, #26
 800826a:	fb01 f303 	mul.w	r3, r1, r3
 800826e:	4413      	add	r3, r2
 8008270:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008274:	881a      	ldrh	r2, [r3, #0]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	7b9b      	ldrb	r3, [r3, #14]
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 ff16 	bl	800a0b2 <USBH_AllocPipe>
 8008286:	4603      	mov	r3, r0
 8008288:	461a      	mov	r2, r3
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	7bdb      	ldrb	r3, [r3, #15]
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 ff0c 	bl	800a0b2 <USBH_AllocPipe>
 800829a:	4603      	mov	r3, r0
 800829c:	461a      	mov	r2, r3
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	7b59      	ldrb	r1, [r3, #13]
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	7b98      	ldrb	r0, [r3, #14]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	8b12      	ldrh	r2, [r2, #24]
 80082ba:	9202      	str	r2, [sp, #8]
 80082bc:	2202      	movs	r2, #2
 80082be:	9201      	str	r2, [sp, #4]
 80082c0:	9300      	str	r3, [sp, #0]
 80082c2:	4623      	mov	r3, r4
 80082c4:	4602      	mov	r2, r0
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 fec4 	bl	800a054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	7b19      	ldrb	r1, [r3, #12]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	7bd8      	ldrb	r0, [r3, #15]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	8b52      	ldrh	r2, [r2, #26]
 80082e4:	9202      	str	r2, [sp, #8]
 80082e6:	2202      	movs	r2, #2
 80082e8:	9201      	str	r2, [sp, #4]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4623      	mov	r3, r4
 80082ee:	4602      	mov	r2, r0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 feaf 	bl	800a054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	7b5b      	ldrb	r3, [r3, #13]
 8008302:	2200      	movs	r2, #0
 8008304:	4619      	mov	r1, r3
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f002 f9ba 	bl	800a680 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	7b1b      	ldrb	r3, [r3, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f002 f9b3 	bl	800a680 <USBH_LL_SetToggle>

  return USBH_OK;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	bd90      	pop	{r4, r7, pc}

08008324 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008332:	69db      	ldr	r3, [r3, #28]
 8008334:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00e      	beq.n	800835c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f001 fea4 	bl	800a092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 fecf 	bl	800a0f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	7b1b      	ldrb	r3, [r3, #12]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	7b1b      	ldrb	r3, [r3, #12]
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fe91 	bl	800a092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	7b1b      	ldrb	r3, [r3, #12]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 febc 	bl	800a0f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2200      	movs	r2, #0
 8008380:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	7b5b      	ldrb	r3, [r3, #13]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00e      	beq.n	80083a8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	7b5b      	ldrb	r3, [r3, #13]
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fe7e 	bl	800a092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	7b5b      	ldrb	r3, [r3, #13]
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f001 fea9 	bl	800a0f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00b      	beq.n	80083cc <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 f9ed 	bl	800a79c <free>
    phost->pActiveClass->pData = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083c8:	2200      	movs	r2, #0
 80083ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	3340      	adds	r3, #64	@ 0x40
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f8b1 	bl	8008556 <GetLineCoding>
 80083f4:	4603      	mov	r3, r0
 80083f6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d105      	bne.n	800840a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008404:	2102      	movs	r1, #2
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800840a:	7afb      	ldrb	r3, [r7, #11]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800841c:	2301      	movs	r3, #1
 800841e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008434:	2b04      	cmp	r3, #4
 8008436:	d877      	bhi.n	8008528 <USBH_CDC_Process+0x114>
 8008438:	a201      	add	r2, pc, #4	@ (adr r2, 8008440 <USBH_CDC_Process+0x2c>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008455 	.word	0x08008455
 8008444:	0800845b 	.word	0x0800845b
 8008448:	0800848b 	.word	0x0800848b
 800844c:	080084ff 	.word	0x080084ff
 8008450:	0800850d 	.word	0x0800850d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
      break;
 8008458:	e06d      	b.n	8008536 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 f897 	bl	8008594 <SetLineCoding>
 8008466:	4603      	mov	r3, r0
 8008468:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800846a:	7bbb      	ldrb	r3, [r7, #14]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	2202      	movs	r2, #2
 8008474:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008478:	e058      	b.n	800852c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800847a:	7bbb      	ldrb	r3, [r7, #14]
 800847c:	2b01      	cmp	r3, #1
 800847e:	d055      	beq.n	800852c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	2204      	movs	r2, #4
 8008484:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008488:	e050      	b.n	800852c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	3340      	adds	r3, #64	@ 0x40
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f860 	bl	8008556 <GetLineCoding>
 8008496:	4603      	mov	r3, r0
 8008498:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d126      	bne.n	80084ee <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b2:	791b      	ldrb	r3, [r3, #4]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d13b      	bne.n	8008530 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d133      	bne.n	8008530 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084d2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d12b      	bne.n	8008530 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084e0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d124      	bne.n	8008530 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f958 	bl	800879c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80084ec:	e020      	b.n	8008530 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d01d      	beq.n	8008530 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2204      	movs	r2, #4
 80084f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80084fc:	e018      	b.n	8008530 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f867 	bl	80085d2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f8da 	bl	80086be <CDC_ProcessReception>
      break;
 800850a:	e014      	b.n	8008536 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800850c:	2100      	movs	r1, #0
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 f81a 	bl	8009548 <USBH_ClrFeature>
 8008514:	4603      	mov	r3, r0
 8008516:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008518:	7bbb      	ldrb	r3, [r7, #14]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008526:	e005      	b.n	8008534 <USBH_CDC_Process+0x120>

    default:
      break;
 8008528:	bf00      	nop
 800852a:	e004      	b.n	8008536 <USBH_CDC_Process+0x122>
      break;
 800852c:	bf00      	nop
 800852e:	e002      	b.n	8008536 <USBH_CDC_Process+0x122>
      break;
 8008530:	bf00      	nop
 8008532:	e000      	b.n	8008536 <USBH_CDC_Process+0x122>
      break;
 8008534:	bf00      	nop

  }

  return status;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
}
 8008538:	4618      	mov	r0, r3
 800853a:	3710      	adds	r7, #16
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b082      	sub	sp, #8
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	22a1      	movs	r2, #161	@ 0xa1
 8008564:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2221      	movs	r2, #33	@ 0x21
 800856a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2207      	movs	r2, #7
 800857c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2207      	movs	r2, #7
 8008582:	4619      	mov	r1, r3
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f001 fb14 	bl	8009bb2 <USBH_CtlReq>
 800858a:	4603      	mov	r3, r0
}
 800858c:	4618      	mov	r0, r3
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2221      	movs	r2, #33	@ 0x21
 80085a2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2220      	movs	r2, #32
 80085a8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2207      	movs	r2, #7
 80085ba:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	2207      	movs	r2, #7
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f001 faf5 	bl	8009bb2 <USBH_CtlReq>
 80085c8:	4603      	mov	r3, r0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af02      	add	r7, sp, #8
 80085d8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085e4:	2300      	movs	r3, #0
 80085e6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d002      	beq.n	80085f8 <CDC_ProcessTransmission+0x26>
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d023      	beq.n	800863e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80085f6:	e05e      	b.n	80086b6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	8b12      	ldrh	r2, [r2, #24]
 8008600:	4293      	cmp	r3, r2
 8008602:	d90b      	bls.n	800861c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	69d9      	ldr	r1, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	8b1a      	ldrh	r2, [r3, #24]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	7b5b      	ldrb	r3, [r3, #13]
 8008610:	2001      	movs	r0, #1
 8008612:	9000      	str	r0, [sp, #0]
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f001 fcda 	bl	8009fce <USBH_BulkSendData>
 800861a:	e00b      	b.n	8008634 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008624:	b29a      	uxth	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	7b5b      	ldrb	r3, [r3, #13]
 800862a:	2001      	movs	r0, #1
 800862c:	9000      	str	r0, [sp, #0]
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fccd 	bl	8009fce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800863c:	e03b      	b.n	80086b6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	7b5b      	ldrb	r3, [r3, #13]
 8008642:	4619      	mov	r1, r3
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f001 fff1 	bl	800a62c <USBH_LL_GetURBState>
 800864a:	4603      	mov	r3, r0
 800864c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800864e:	7afb      	ldrb	r3, [r7, #11]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d128      	bne.n	80086a6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	8b12      	ldrh	r2, [r2, #24]
 800865c:	4293      	cmp	r3, r2
 800865e:	d90e      	bls.n	800867e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	8b12      	ldrh	r2, [r2, #24]
 8008668:	1a9a      	subs	r2, r3, r2
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	69db      	ldr	r3, [r3, #28]
 8008672:	68fa      	ldr	r2, [r7, #12]
 8008674:	8b12      	ldrh	r2, [r2, #24]
 8008676:	441a      	add	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	61da      	str	r2, [r3, #28]
 800867c:	e002      	b.n	8008684 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d004      	beq.n	8008696 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008694:	e00e      	b.n	80086b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f868 	bl	8008774 <USBH_CDC_TransmitCallback>
      break;
 80086a4:	e006      	b.n	80086b4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80086a6:	7afb      	ldrb	r3, [r7, #11]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d103      	bne.n	80086b4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2201      	movs	r2, #1
 80086b0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80086b4:	bf00      	nop
  }
}
 80086b6:	bf00      	nop
 80086b8:	3710      	adds	r7, #16
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80086d0:	2300      	movs	r3, #0
 80086d2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80086da:	2b03      	cmp	r3, #3
 80086dc:	d002      	beq.n	80086e4 <CDC_ProcessReception+0x26>
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d00e      	beq.n	8008700 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80086e2:	e043      	b.n	800876c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	6a19      	ldr	r1, [r3, #32]
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	8b5a      	ldrh	r2, [r3, #26]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	7b1b      	ldrb	r3, [r3, #12]
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f001 fc91 	bl	800a018 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2204      	movs	r2, #4
 80086fa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80086fe:	e035      	b.n	800876c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	7b1b      	ldrb	r3, [r3, #12]
 8008704:	4619      	mov	r1, r3
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 ff90 	bl	800a62c <USBH_LL_GetURBState>
 800870c:	4603      	mov	r3, r0
 800870e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008710:	7cfb      	ldrb	r3, [r7, #19]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d129      	bne.n	800876a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	7b1b      	ldrb	r3, [r3, #12]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f001 fef3 	bl	800a508 <USBH_LL_GetLastXferSize>
 8008722:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	429a      	cmp	r2, r3
 800872c:	d016      	beq.n	800875c <CDC_ProcessReception+0x9e>
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	8b5b      	ldrh	r3, [r3, #26]
 8008732:	461a      	mov	r2, r3
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4293      	cmp	r3, r2
 8008738:	d110      	bne.n	800875c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1ad2      	subs	r2, r2, r3
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	441a      	add	r2, r3
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2203      	movs	r2, #3
 8008756:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800875a:	e006      	b.n	800876a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f80f 	bl	8008788 <USBH_CDC_ReceiveCallback>
      break;
 800876a:	bf00      	nop
  }
}
 800876c:	bf00      	nop
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4613      	mov	r3, r2
 80087bc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80087c4:	2302      	movs	r3, #2
 80087c6:	e029      	b.n	800881c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	79fa      	ldrb	r2, [r7, #7]
 80087cc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 f81f 	bl	8008824 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f001 fdc3 	bl	800a3a0 <USBH_LL_Init>

  return USBH_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e009      	b.n	800884a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	33e0      	adds	r3, #224	@ 0xe0
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	2200      	movs	r2, #0
 8008842:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b0f      	cmp	r3, #15
 800884e:	d9f2      	bls.n	8008836 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	e009      	b.n	800886a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3301      	adds	r3, #1
 8008868:	60fb      	str	r3, [r7, #12]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008870:	d3f1      	bcc.n	8008856 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2240      	movs	r2, #64	@ 0x40
 8008896:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	331c      	adds	r3, #28
 80088c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f81d 	bl	800a908 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80088d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f002 f814 	bl	800a908 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80088e6:	2212      	movs	r2, #18
 80088e8:	2100      	movs	r1, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f002 f80c 	bl	800a908 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088f6:	223e      	movs	r2, #62	@ 0x3e
 80088f8:	2100      	movs	r1, #0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f002 f804 	bl	800a908 <memset>

  return USBH_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d016      	beq.n	800894c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10e      	bne.n	8008946 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800892e:	1c59      	adds	r1, r3, #1
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	33de      	adds	r3, #222	@ 0xde
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e004      	b.n	8008950 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008946:	2302      	movs	r3, #2
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	e001      	b.n	8008950 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800894c:	2302      	movs	r3, #2
 800894e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	460b      	mov	r3, r1
 8008968:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008974:	78fa      	ldrb	r2, [r7, #3]
 8008976:	429a      	cmp	r2, r3
 8008978:	d204      	bcs.n	8008984 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008982:	e001      	b.n	8008988 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008984:	2302      	movs	r3, #2
 8008986:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008996:	b480      	push	{r7}
 8008998:	b087      	sub	sp, #28
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	4608      	mov	r0, r1
 80089a0:	4611      	mov	r1, r2
 80089a2:	461a      	mov	r2, r3
 80089a4:	4603      	mov	r3, r0
 80089a6:	70fb      	strb	r3, [r7, #3]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70bb      	strb	r3, [r7, #2]
 80089ac:	4613      	mov	r3, r2
 80089ae:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089b4:	2300      	movs	r3, #0
 80089b6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80089be:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80089c0:	e025      	b.n	8008a0e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
 80089c4:	221a      	movs	r2, #26
 80089c6:	fb02 f303 	mul.w	r3, r2, r3
 80089ca:	3308      	adds	r3, #8
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	3302      	adds	r3, #2
 80089d2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	795b      	ldrb	r3, [r3, #5]
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d002      	beq.n	80089e4 <USBH_FindInterface+0x4e>
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	2bff      	cmp	r3, #255	@ 0xff
 80089e2:	d111      	bne.n	8008a08 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80089e8:	78ba      	ldrb	r2, [r7, #2]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d002      	beq.n	80089f4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089ee:	78bb      	ldrb	r3, [r7, #2]
 80089f0:	2bff      	cmp	r3, #255	@ 0xff
 80089f2:	d109      	bne.n	8008a08 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80089f8:	787a      	ldrb	r2, [r7, #1]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d002      	beq.n	8008a04 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80089fe:	787b      	ldrb	r3, [r7, #1]
 8008a00:	2bff      	cmp	r3, #255	@ 0xff
 8008a02:	d101      	bne.n	8008a08 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008a04:	7dfb      	ldrb	r3, [r7, #23]
 8008a06:	e006      	b.n	8008a16 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d9d6      	bls.n	80089c2 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008a14:	23ff      	movs	r3, #255	@ 0xff
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	371c      	adds	r7, #28
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f001 fcf4 	bl	800a418 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008a30:	2101      	movs	r1, #1
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 fe0d 	bl	800a652 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
	...

08008a44 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af04      	add	r7, sp, #16
 8008a4a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008a50:	2300      	movs	r3, #0
 8008a52:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d102      	bne.n	8008a66 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2203      	movs	r2, #3
 8008a64:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b0b      	cmp	r3, #11
 8008a6e:	f200 81bb 	bhi.w	8008de8 <USBH_Process+0x3a4>
 8008a72:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <USBH_Process+0x34>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008aa9 	.word	0x08008aa9
 8008a7c:	08008adb 	.word	0x08008adb
 8008a80:	08008b43 	.word	0x08008b43
 8008a84:	08008d83 	.word	0x08008d83
 8008a88:	08008de9 	.word	0x08008de9
 8008a8c:	08008be3 	.word	0x08008be3
 8008a90:	08008d29 	.word	0x08008d29
 8008a94:	08008c19 	.word	0x08008c19
 8008a98:	08008c39 	.word	0x08008c39
 8008a9c:	08008c57 	.word	0x08008c57
 8008aa0:	08008c9b 	.word	0x08008c9b
 8008aa4:	08008d6b 	.word	0x08008d6b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 819b 	beq.w	8008dec <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008abc:	20c8      	movs	r0, #200	@ 0xc8
 8008abe:	f001 fe12 	bl	800a6e6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 fd05 	bl	800a4d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ad8:	e188      	b.n	8008dec <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d107      	bne.n	8008af4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008af2:	e18a      	b.n	8008e0a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008afa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008afe:	d914      	bls.n	8008b2a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008b06:	3301      	adds	r3, #1
 8008b08:	b2da      	uxtb	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008b16:	2b03      	cmp	r3, #3
 8008b18:	d903      	bls.n	8008b22 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	220d      	movs	r2, #13
 8008b1e:	701a      	strb	r2, [r3, #0]
      break;
 8008b20:	e173      	b.n	8008e0a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	701a      	strb	r2, [r3, #0]
      break;
 8008b28:	e16f      	b.n	8008e0a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008b30:	f103 020a 	add.w	r2, r3, #10
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008b3a:	200a      	movs	r0, #10
 8008b3c:	f001 fdd3 	bl	800a6e6 <USBH_Delay>
      break;
 8008b40:	e163      	b.n	8008e0a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b52:	2104      	movs	r1, #4
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008b58:	2064      	movs	r0, #100	@ 0x64
 8008b5a:	f001 fdc4 	bl	800a6e6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 fc90 	bl	800a484 <USBH_LL_GetSpeed>
 8008b64:	4603      	mov	r3, r0
 8008b66:	461a      	mov	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2205      	movs	r2, #5
 8008b72:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008b74:	2100      	movs	r1, #0
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fa9b 	bl	800a0b2 <USBH_AllocPipe>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	461a      	mov	r2, r3
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008b84:	2180      	movs	r1, #128	@ 0x80
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f001 fa93 	bl	800a0b2 <USBH_AllocPipe>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7919      	ldrb	r1, [r3, #4]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008ba8:	9202      	str	r2, [sp, #8]
 8008baa:	2200      	movs	r2, #0
 8008bac:	9201      	str	r2, [sp, #4]
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2280      	movs	r2, #128	@ 0x80
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fa4d 	bl	800a054 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	7959      	ldrb	r1, [r3, #5]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008bce:	9202      	str	r2, [sp, #8]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	9201      	str	r2, [sp, #4]
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2200      	movs	r2, #0
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 fa3a 	bl	800a054 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008be0:	e113      	b.n	8008e0a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f916 	bl	8008e14 <USBH_HandleEnum>
 8008be8:	4603      	mov	r3, r0
 8008bea:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 80fd 	bne.w	8008df0 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d103      	bne.n	8008c10 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c0e:	e0ef      	b.n	8008df0 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2207      	movs	r2, #7
 8008c14:	701a      	strb	r2, [r3, #0]
      break;
 8008c16:	e0eb      	b.n	8008df0 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80e8 	beq.w	8008df4 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c2a:	2101      	movs	r1, #1
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2208      	movs	r2, #8
 8008c34:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008c36:	e0dd      	b.n	8008df4 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc3a 	bl	80094ba <USBH_SetCfg>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f040 80d5 	bne.w	8008df8 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2209      	movs	r2, #9
 8008c52:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c54:	e0d0      	b.n	8008df8 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008c5c:	f003 0320 	and.w	r3, r3, #32
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d016      	beq.n	8008c92 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c64:	2101      	movs	r1, #1
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fc4a 	bl	8009500 <USBH_SetFeature>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c70:	7bbb      	ldrb	r3, [r7, #14]
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d103      	bne.n	8008c80 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	220a      	movs	r2, #10
 8008c7c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c7e:	e0bd      	b.n	8008dfc <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	f040 80b9 	bne.w	8008dfc <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	220a      	movs	r2, #10
 8008c8e:	701a      	strb	r2, [r3, #0]
      break;
 8008c90:	e0b4      	b.n	8008dfc <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	220a      	movs	r2, #10
 8008c96:	701a      	strb	r2, [r3, #0]
      break;
 8008c98:	e0b0      	b.n	8008dfc <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f000 80ad 	beq.w	8008e00 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
 8008cb2:	e016      	b.n	8008ce2 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008cb4:	7bfa      	ldrb	r2, [r7, #15]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	32de      	adds	r2, #222	@ 0xde
 8008cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbe:	791a      	ldrb	r2, [r3, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d108      	bne.n	8008cdc <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008cca:	7bfa      	ldrb	r2, [r7, #15]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	32de      	adds	r2, #222	@ 0xde
 8008cd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008cda:	e005      	b.n	8008ce8 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	73fb      	strb	r3, [r7, #15]
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d0e5      	beq.n	8008cb4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d016      	beq.n	8008d20 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	4798      	blx	r3
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d109      	bne.n	8008d18 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2206      	movs	r2, #6
 8008d08:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d10:	2103      	movs	r1, #3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d16:	e073      	b.n	8008e00 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	220d      	movs	r2, #13
 8008d1c:	701a      	strb	r2, [r3, #0]
      break;
 8008d1e:	e06f      	b.n	8008e00 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	220d      	movs	r2, #13
 8008d24:	701a      	strb	r2, [r3, #0]
      break;
 8008d26:	e06b      	b.n	8008e00 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d017      	beq.n	8008d62 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	220b      	movs	r2, #11
 8008d4e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d50:	e058      	b.n	8008e04 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d154      	bne.n	8008e04 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	220d      	movs	r2, #13
 8008d5e:	701a      	strb	r2, [r3, #0]
      break;
 8008d60:	e050      	b.n	8008e04 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	220d      	movs	r2, #13
 8008d66:	701a      	strb	r2, [r3, #0]
      break;
 8008d68:	e04c      	b.n	8008e04 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d049      	beq.n	8008e08 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
      }
      break;
 8008d80:	e042      	b.n	8008e08 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fd4a 	bl	8008824 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008da0:	68db      	ldr	r3, [r3, #12]
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d005      	beq.n	8008dc4 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dbe:	2105      	movs	r1, #5
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d107      	bne.n	8008de0 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fe22 	bl	8008a22 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dde:	e014      	b.n	8008e0a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 fb19 	bl	800a418 <USBH_LL_Start>
      break;
 8008de6:	e010      	b.n	8008e0a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008de8:	bf00      	nop
 8008dea:	e00e      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008dec:	bf00      	nop
 8008dee:	e00c      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008df0:	bf00      	nop
 8008df2:	e00a      	b.n	8008e0a <USBH_Process+0x3c6>
    break;
 8008df4:	bf00      	nop
 8008df6:	e008      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008df8:	bf00      	nop
 8008dfa:	e006      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008dfc:	bf00      	nop
 8008dfe:	e004      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008e00:	bf00      	nop
 8008e02:	e002      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008e04:	bf00      	nop
 8008e06:	e000      	b.n	8008e0a <USBH_Process+0x3c6>
      break;
 8008e08:	bf00      	nop
  }
  return USBH_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b088      	sub	sp, #32
 8008e18:	af04      	add	r7, sp, #16
 8008e1a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e20:	2301      	movs	r3, #1
 8008e22:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	785b      	ldrb	r3, [r3, #1]
 8008e28:	2b07      	cmp	r3, #7
 8008e2a:	f200 81bd 	bhi.w	80091a8 <USBH_HandleEnum+0x394>
 8008e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <USBH_HandleEnum+0x20>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e55 	.word	0x08008e55
 8008e38:	08008f0f 	.word	0x08008f0f
 8008e3c:	08008f79 	.word	0x08008f79
 8008e40:	08009003 	.word	0x08009003
 8008e44:	0800906d 	.word	0x0800906d
 8008e48:	080090dd 	.word	0x080090dd
 8008e4c:	08009123 	.word	0x08009123
 8008e50:	08009169 	.word	0x08009169
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e54:	2108      	movs	r1, #8
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fa4c 	bl	80092f4 <USBH_Get_DevDesc>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e60:	7bbb      	ldrb	r3, [r7, #14]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d12e      	bne.n	8008ec4 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7919      	ldrb	r1, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008e8a:	9202      	str	r2, [sp, #8]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	9201      	str	r2, [sp, #4]
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	4603      	mov	r3, r0
 8008e94:	2280      	movs	r2, #128	@ 0x80
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 f8dc 	bl	800a054 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7959      	ldrb	r1, [r3, #5]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008eb0:	9202      	str	r2, [sp, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	9201      	str	r2, [sp, #4]
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2200      	movs	r2, #0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f001 f8c9 	bl	800a054 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ec2:	e173      	b.n	80091ac <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ec4:	7bbb      	ldrb	r3, [r7, #14]
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	f040 8170 	bne.w	80091ac <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008ee2:	2b03      	cmp	r3, #3
 8008ee4:	d903      	bls.n	8008eee <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	220d      	movs	r2, #13
 8008eea:	701a      	strb	r2, [r3, #0]
      break;
 8008eec:	e15e      	b.n	80091ac <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	795b      	ldrb	r3, [r3, #5]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f001 f8fd 	bl	800a0f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	791b      	ldrb	r3, [r3, #4]
 8008efe:	4619      	mov	r1, r3
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 f8f7 	bl	800a0f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	701a      	strb	r2, [r3, #0]
      break;
 8008f0c:	e14e      	b.n	80091ac <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f0e:	2112      	movs	r1, #18
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f9ef 	bl	80092f4 <USBH_Get_DevDesc>
 8008f16:	4603      	mov	r3, r0
 8008f18:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f1a:	7bbb      	ldrb	r3, [r7, #14]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d103      	bne.n	8008f28 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f26:	e143      	b.n	80091b0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	f040 8140 	bne.w	80091b0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f36:	3301      	adds	r3, #1
 8008f38:	b2da      	uxtb	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d903      	bls.n	8008f52 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	220d      	movs	r2, #13
 8008f4e:	701a      	strb	r2, [r3, #0]
      break;
 8008f50:	e12e      	b.n	80091b0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	795b      	ldrb	r3, [r3, #5]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f8cb 	bl	800a0f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	791b      	ldrb	r3, [r3, #4]
 8008f62:	4619      	mov	r1, r3
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f001 f8c5 	bl	800a0f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	701a      	strb	r2, [r3, #0]
      break;
 8008f76:	e11b      	b.n	80091b0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008f78:	2101      	movs	r1, #1
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa79 	bl	8009472 <USBH_SetAddress>
 8008f80:	4603      	mov	r3, r0
 8008f82:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d130      	bne.n	8008fec <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008f8a:	2002      	movs	r0, #2
 8008f8c:	f001 fbab 	bl	800a6e6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	7919      	ldrb	r1, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008fb2:	9202      	str	r2, [sp, #8]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	9201      	str	r2, [sp, #4]
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2280      	movs	r2, #128	@ 0x80
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 f848 	bl	800a054 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	7959      	ldrb	r1, [r3, #5]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008fd8:	9202      	str	r2, [sp, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	9201      	str	r2, [sp, #4]
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f001 f835 	bl	800a054 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008fea:	e0e3      	b.n	80091b4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008fec:	7bbb      	ldrb	r3, [r7, #14]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	f040 80e0 	bne.w	80091b4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	220d      	movs	r2, #13
 8008ff8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	705a      	strb	r2, [r3, #1]
      break;
 8009000:	e0d8      	b.n	80091b4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009002:	2109      	movs	r1, #9
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 f9a1 	bl	800934c <USBH_Get_CfgDesc>
 800900a:	4603      	mov	r3, r0
 800900c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800900e:	7bbb      	ldrb	r3, [r7, #14]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2204      	movs	r2, #4
 8009018:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800901a:	e0cd      	b.n	80091b8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800901c:	7bbb      	ldrb	r3, [r7, #14]
 800901e:	2b03      	cmp	r3, #3
 8009020:	f040 80ca 	bne.w	80091b8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800902a:	3301      	adds	r3, #1
 800902c:	b2da      	uxtb	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800903a:	2b03      	cmp	r3, #3
 800903c:	d903      	bls.n	8009046 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	220d      	movs	r2, #13
 8009042:	701a      	strb	r2, [r3, #0]
      break;
 8009044:	e0b8      	b.n	80091b8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	795b      	ldrb	r3, [r3, #5]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f001 f851 	bl	800a0f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	791b      	ldrb	r3, [r3, #4]
 8009056:	4619      	mov	r1, r3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f001 f84b 	bl	800a0f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	701a      	strb	r2, [r3, #0]
      break;
 800906a:	e0a5      	b.n	80091b8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009072:	4619      	mov	r1, r3
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f969 	bl	800934c <USBH_Get_CfgDesc>
 800907a:	4603      	mov	r3, r0
 800907c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2205      	movs	r2, #5
 8009088:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800908a:	e097      	b.n	80091bc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b03      	cmp	r3, #3
 8009090:	f040 8094 	bne.w	80091bc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800909a:	3301      	adds	r3, #1
 800909c:	b2da      	uxtb	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d903      	bls.n	80090b6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	220d      	movs	r2, #13
 80090b2:	701a      	strb	r2, [r3, #0]
      break;
 80090b4:	e082      	b.n	80091bc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	795b      	ldrb	r3, [r3, #5]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 f819 	bl	800a0f4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	791b      	ldrb	r3, [r3, #4]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f813 	bl	800a0f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
      break;
 80090da:	e06f      	b.n	80091bc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d019      	beq.n	800911a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80090f2:	23ff      	movs	r3, #255	@ 0xff
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f953 	bl	80093a0 <USBH_Get_StringDesc>
 80090fa:	4603      	mov	r3, r0
 80090fc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80090fe:	7bbb      	ldrb	r3, [r7, #14]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d103      	bne.n	800910c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2206      	movs	r2, #6
 8009108:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800910a:	e059      	b.n	80091c0 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800910c:	7bbb      	ldrb	r3, [r7, #14]
 800910e:	2b03      	cmp	r3, #3
 8009110:	d156      	bne.n	80091c0 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2206      	movs	r2, #6
 8009116:	705a      	strb	r2, [r3, #1]
      break;
 8009118:	e052      	b.n	80091c0 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2206      	movs	r2, #6
 800911e:	705a      	strb	r2, [r3, #1]
      break;
 8009120:	e04e      	b.n	80091c0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009128:	2b00      	cmp	r3, #0
 800912a:	d019      	beq.n	8009160 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009138:	23ff      	movs	r3, #255	@ 0xff
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f930 	bl	80093a0 <USBH_Get_StringDesc>
 8009140:	4603      	mov	r3, r0
 8009142:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009144:	7bbb      	ldrb	r3, [r7, #14]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d103      	bne.n	8009152 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2207      	movs	r2, #7
 800914e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009150:	e038      	b.n	80091c4 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b03      	cmp	r3, #3
 8009156:	d135      	bne.n	80091c4 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2207      	movs	r2, #7
 800915c:	705a      	strb	r2, [r3, #1]
      break;
 800915e:	e031      	b.n	80091c4 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2207      	movs	r2, #7
 8009164:	705a      	strb	r2, [r3, #1]
      break;
 8009166:	e02d      	b.n	80091c4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800916e:	2b00      	cmp	r3, #0
 8009170:	d017      	beq.n	80091a2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800917e:	23ff      	movs	r3, #255	@ 0xff
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 f90d 	bl	80093a0 <USBH_Get_StringDesc>
 8009186:	4603      	mov	r3, r0
 8009188:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800918a:	7bbb      	ldrb	r3, [r7, #14]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d102      	bne.n	8009196 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009194:	e018      	b.n	80091c8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009196:	7bbb      	ldrb	r3, [r7, #14]
 8009198:	2b03      	cmp	r3, #3
 800919a:	d115      	bne.n	80091c8 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]
      break;
 80091a0:	e012      	b.n	80091c8 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
      break;
 80091a6:	e00f      	b.n	80091c8 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80091a8:	bf00      	nop
 80091aa:	e00e      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091ac:	bf00      	nop
 80091ae:	e00c      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091b0:	bf00      	nop
 80091b2:	e00a      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091b4:	bf00      	nop
 80091b6:	e008      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091b8:	bf00      	nop
 80091ba:	e006      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091bc:	bf00      	nop
 80091be:	e004      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091c0:	bf00      	nop
 80091c2:	e002      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091c4:	bf00      	nop
 80091c6:	e000      	b.n	80091ca <USBH_HandleEnum+0x3b6>
      break;
 80091c8:	bf00      	nop
  }
  return Status;
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3710      	adds	r7, #16
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80091e6:	bf00      	nop
 80091e8:	370c      	adds	r7, #12
 80091ea:	46bd      	mov	sp, r7
 80091ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f0:	4770      	bx	lr

080091f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80091f2:	b580      	push	{r7, lr}
 80091f4:	b082      	sub	sp, #8
 80091f6:	af00      	add	r7, sp, #0
 80091f8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009200:	1c5a      	adds	r2, r3, #1
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f804 	bl	8009216 <USBH_HandleSof>
}
 800920e:	bf00      	nop
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	b2db      	uxtb	r3, r3
 8009224:	2b0b      	cmp	r3, #11
 8009226:	d10a      	bne.n	800923e <USBH_HandleSof+0x28>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009238:	699b      	ldr	r3, [r3, #24]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	4798      	blx	r3
  }
}
 800923e:	bf00      	nop
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009256:	bf00      	nop
}
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009262:	b480      	push	{r7}
 8009264:	b083      	sub	sp, #12
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009272:	bf00      	nop
}
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 f8be 	bl	800a44e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	791b      	ldrb	r3, [r3, #4]
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 ff0b 	bl	800a0f4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	795b      	ldrb	r3, [r3, #5]
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 ff05 	bl	800a0f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80092ea:	2300      	movs	r3, #0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b086      	sub	sp, #24
 80092f8:	af02      	add	r7, sp, #8
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	460b      	mov	r3, r1
 80092fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009300:	887b      	ldrh	r3, [r7, #2]
 8009302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009306:	d901      	bls.n	800930c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009308:	2303      	movs	r3, #3
 800930a:	e01b      	b.n	8009344 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	4613      	mov	r3, r2
 8009318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800931c:	2100      	movs	r1, #0
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f872 	bl	8009408 <USBH_GetDescriptor>
 8009324:	4603      	mov	r3, r0
 8009326:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d109      	bne.n	8009342 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009334:	887a      	ldrh	r2, [r7, #2]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f929 	bl	8009590 <USBH_ParseDevDesc>
 800933e:	4603      	mov	r3, r0
 8009340:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
}
 8009344:	4618      	mov	r0, r3
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b086      	sub	sp, #24
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	331c      	adds	r3, #28
 800935c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800935e:	887b      	ldrh	r3, [r7, #2]
 8009360:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009364:	d901      	bls.n	800936a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009366:	2303      	movs	r3, #3
 8009368:	e016      	b.n	8009398 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800936a:	887b      	ldrh	r3, [r7, #2]
 800936c:	9300      	str	r3, [sp, #0]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f846 	bl	8009408 <USBH_GetDescriptor>
 800937c:	4603      	mov	r3, r0
 800937e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d107      	bne.n	8009396 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009386:	887b      	ldrh	r3, [r7, #2]
 8009388:	461a      	mov	r2, r3
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f9af 	bl	80096f0 <USBH_ParseCfgDesc>
 8009392:	4603      	mov	r3, r0
 8009394:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009396:	7bfb      	ldrb	r3, [r7, #15]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b088      	sub	sp, #32
 80093a4:	af02      	add	r7, sp, #8
 80093a6:	60f8      	str	r0, [r7, #12]
 80093a8:	607a      	str	r2, [r7, #4]
 80093aa:	461a      	mov	r2, r3
 80093ac:	460b      	mov	r3, r1
 80093ae:	72fb      	strb	r3, [r7, #11]
 80093b0:	4613      	mov	r3, r2
 80093b2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80093b4:	893b      	ldrh	r3, [r7, #8]
 80093b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093ba:	d802      	bhi.n	80093c2 <USBH_Get_StringDesc+0x22>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d101      	bne.n	80093c6 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80093c2:	2303      	movs	r3, #3
 80093c4:	e01c      	b.n	8009400 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80093c6:	7afb      	ldrb	r3, [r7, #11]
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80093ce:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80093d6:	893b      	ldrh	r3, [r7, #8]
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	460b      	mov	r3, r1
 80093dc:	2100      	movs	r1, #0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f812 	bl	8009408 <USBH_GetDescriptor>
 80093e4:	4603      	mov	r3, r0
 80093e6:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d107      	bne.n	80093fe <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80093f4:	893a      	ldrh	r2, [r7, #8]
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 fb8d 	bl	8009b18 <USBH_ParseStringDesc>
  }

  return status;
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	607b      	str	r3, [r7, #4]
 8009412:	460b      	mov	r3, r1
 8009414:	72fb      	strb	r3, [r7, #11]
 8009416:	4613      	mov	r3, r2
 8009418:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	789b      	ldrb	r3, [r3, #2]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d11c      	bne.n	800945c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009428:	b2da      	uxtb	r2, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2206      	movs	r2, #6
 8009432:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	893a      	ldrh	r2, [r7, #8]
 8009438:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800943a:	893b      	ldrh	r3, [r7, #8]
 800943c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009440:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009444:	d104      	bne.n	8009450 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f240 4209 	movw	r2, #1033	@ 0x409
 800944c:	829a      	strh	r2, [r3, #20]
 800944e:	e002      	b.n	8009456 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2200      	movs	r2, #0
 8009454:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8b3a      	ldrh	r2, [r7, #24]
 800945a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800945c:	8b3b      	ldrh	r3, [r7, #24]
 800945e:	461a      	mov	r2, r3
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 fba5 	bl	8009bb2 <USBH_CtlReq>
 8009468:	4603      	mov	r3, r0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
 800947a:	460b      	mov	r3, r1
 800947c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	789b      	ldrb	r3, [r3, #2]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d10f      	bne.n	80094a6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2205      	movs	r2, #5
 8009490:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009492:	78fb      	ldrb	r3, [r7, #3]
 8009494:	b29a      	uxth	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094a6:	2200      	movs	r2, #0
 80094a8:	2100      	movs	r1, #0
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fb81 	bl	8009bb2 <USBH_CtlReq>
 80094b0:	4603      	mov	r3, r0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	789b      	ldrb	r3, [r3, #2]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d10e      	bne.n	80094ec <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2209      	movs	r2, #9
 80094d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	887a      	ldrh	r2, [r7, #2]
 80094de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 fb5e 	bl	8009bb2 <USBH_CtlReq>
 80094f6:	4603      	mov	r3, r0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3708      	adds	r7, #8
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	789b      	ldrb	r3, [r3, #2]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d10f      	bne.n	8009534 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2203      	movs	r2, #3
 800951e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009534:	2200      	movs	r2, #0
 8009536:	2100      	movs	r1, #0
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fb3a 	bl	8009bb2 <USBH_CtlReq>
 800953e:	4603      	mov	r3, r0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	789b      	ldrb	r3, [r3, #2]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d10f      	bne.n	800957c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2202      	movs	r2, #2
 8009560:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800956e:	78fb      	ldrb	r3, [r7, #3]
 8009570:	b29a      	uxth	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800957c:	2200      	movs	r2, #0
 800957e:	2100      	movs	r1, #0
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fb16 	bl	8009bb2 <USBH_CtlReq>
 8009586:	4603      	mov	r3, r0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	60b9      	str	r1, [r7, #8]
 800959a:	4613      	mov	r3, r2
 800959c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80095a4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80095b0:	2302      	movs	r3, #2
 80095b2:	e094      	b.n	80096de <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	781a      	ldrb	r2, [r3, #0]
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	785a      	ldrb	r2, [r3, #1]
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	3302      	adds	r3, #2
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	461a      	mov	r2, r3
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	3303      	adds	r3, #3
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	021b      	lsls	r3, r3, #8
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	791a      	ldrb	r2, [r3, #4]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	795a      	ldrb	r2, [r3, #5]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	799a      	ldrb	r2, [r3, #6]
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	79da      	ldrb	r2, [r3, #7]
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009604:	2b00      	cmp	r3, #0
 8009606:	d004      	beq.n	8009612 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800960e:	2b01      	cmp	r3, #1
 8009610:	d11b      	bne.n	800964a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	79db      	ldrb	r3, [r3, #7]
 8009616:	2b20      	cmp	r3, #32
 8009618:	dc0f      	bgt.n	800963a <USBH_ParseDevDesc+0xaa>
 800961a:	2b08      	cmp	r3, #8
 800961c:	db0f      	blt.n	800963e <USBH_ParseDevDesc+0xae>
 800961e:	3b08      	subs	r3, #8
 8009620:	4a32      	ldr	r2, [pc, #200]	@ (80096ec <USBH_ParseDevDesc+0x15c>)
 8009622:	fa22 f303 	lsr.w	r3, r2, r3
 8009626:	f003 0301 	and.w	r3, r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	bf14      	ite	ne
 800962e:	2301      	movne	r3, #1
 8009630:	2300      	moveq	r3, #0
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b00      	cmp	r3, #0
 8009636:	d106      	bne.n	8009646 <USBH_ParseDevDesc+0xb6>
 8009638:	e001      	b.n	800963e <USBH_ParseDevDesc+0xae>
 800963a:	2b40      	cmp	r3, #64	@ 0x40
 800963c:	d003      	beq.n	8009646 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800963e:	693b      	ldr	r3, [r7, #16]
 8009640:	2208      	movs	r2, #8
 8009642:	71da      	strb	r2, [r3, #7]
        break;
 8009644:	e000      	b.n	8009648 <USBH_ParseDevDesc+0xb8>
        break;
 8009646:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009648:	e00e      	b.n	8009668 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009650:	2b02      	cmp	r3, #2
 8009652:	d107      	bne.n	8009664 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009654:	693b      	ldr	r3, [r7, #16]
 8009656:	79db      	ldrb	r3, [r3, #7]
 8009658:	2b08      	cmp	r3, #8
 800965a:	d005      	beq.n	8009668 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	2208      	movs	r2, #8
 8009660:	71da      	strb	r2, [r3, #7]
 8009662:	e001      	b.n	8009668 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009664:	2303      	movs	r3, #3
 8009666:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009668:	88fb      	ldrh	r3, [r7, #6]
 800966a:	2b08      	cmp	r3, #8
 800966c:	d936      	bls.n	80096dc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	3308      	adds	r3, #8
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	461a      	mov	r2, r3
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	3309      	adds	r3, #9
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	021b      	lsls	r3, r3, #8
 800967e:	b29b      	uxth	r3, r3
 8009680:	4313      	orrs	r3, r2
 8009682:	b29a      	uxth	r2, r3
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	330a      	adds	r3, #10
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	330b      	adds	r3, #11
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	b29b      	uxth	r3, r3
 800969a:	4313      	orrs	r3, r2
 800969c:	b29a      	uxth	r2, r3
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	330c      	adds	r3, #12
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	330d      	adds	r3, #13
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	021b      	lsls	r3, r3, #8
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	4313      	orrs	r3, r2
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	7b9a      	ldrb	r2, [r3, #14]
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	7bda      	ldrb	r2, [r3, #15]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	7c1a      	ldrb	r2, [r3, #16]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	7c5a      	ldrb	r2, [r3, #17]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	01000101 	.word	0x01000101

080096f0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b08c      	sub	sp, #48	@ 0x30
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	4613      	mov	r3, r2
 80096fc:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009704:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009712:	2300      	movs	r3, #0
 8009714:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800971e:	2302      	movs	r3, #2
 8009720:	e0da      	b.n	80098d8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b09      	cmp	r3, #9
 800972c:	d002      	beq.n	8009734 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800972e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009730:	2209      	movs	r2, #9
 8009732:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	781a      	ldrb	r2, [r3, #0]
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	785a      	ldrb	r2, [r3, #1]
 8009740:	6a3b      	ldr	r3, [r7, #32]
 8009742:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3302      	adds	r3, #2
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	461a      	mov	r2, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	3303      	adds	r3, #3
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	021b      	lsls	r3, r3, #8
 8009754:	b29b      	uxth	r3, r3
 8009756:	4313      	orrs	r3, r2
 8009758:	b29b      	uxth	r3, r3
 800975a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800975e:	bf28      	it	cs
 8009760:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009764:	b29a      	uxth	r2, r3
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	791a      	ldrb	r2, [r3, #4]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	795a      	ldrb	r2, [r3, #5]
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	799a      	ldrb	r2, [r3, #6]
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	79da      	ldrb	r2, [r3, #7]
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	7a1a      	ldrb	r2, [r3, #8]
 800978e:	6a3b      	ldr	r3, [r7, #32]
 8009790:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	2b09      	cmp	r3, #9
 8009796:	f240 809d 	bls.w	80098d4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800979a:	2309      	movs	r3, #9
 800979c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80097a2:	e081      	b.n	80098a8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097a4:	f107 0316 	add.w	r3, r7, #22
 80097a8:	4619      	mov	r1, r3
 80097aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097ac:	f000 f9e7 	bl	8009b7e <USBH_GetNextDesc>
 80097b0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80097b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097b4:	785b      	ldrb	r3, [r3, #1]
 80097b6:	2b04      	cmp	r3, #4
 80097b8:	d176      	bne.n	80098a8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80097ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	2b09      	cmp	r3, #9
 80097c0:	d002      	beq.n	80097c8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80097c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097c4:	2209      	movs	r2, #9
 80097c6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80097c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097cc:	221a      	movs	r2, #26
 80097ce:	fb02 f303 	mul.w	r3, r2, r3
 80097d2:	3308      	adds	r3, #8
 80097d4:	6a3a      	ldr	r2, [r7, #32]
 80097d6:	4413      	add	r3, r2
 80097d8:	3302      	adds	r3, #2
 80097da:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80097dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097de:	69f8      	ldr	r0, [r7, #28]
 80097e0:	f000 f87e 	bl	80098e0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80097e4:	2300      	movs	r3, #0
 80097e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80097ee:	e043      	b.n	8009878 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80097f0:	f107 0316 	add.w	r3, r7, #22
 80097f4:	4619      	mov	r1, r3
 80097f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80097f8:	f000 f9c1 	bl	8009b7e <USBH_GetNextDesc>
 80097fc:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	2b05      	cmp	r3, #5
 8009804:	d138      	bne.n	8009878 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	795b      	ldrb	r3, [r3, #5]
 800980a:	2b01      	cmp	r3, #1
 800980c:	d113      	bne.n	8009836 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009812:	2b02      	cmp	r3, #2
 8009814:	d003      	beq.n	800981e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009816:	69fb      	ldr	r3, [r7, #28]
 8009818:	799b      	ldrb	r3, [r3, #6]
 800981a:	2b03      	cmp	r3, #3
 800981c:	d10b      	bne.n	8009836 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	79db      	ldrb	r3, [r3, #7]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <USBH_ParseCfgDesc+0x14e>
 8009826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	2b09      	cmp	r3, #9
 800982c:	d007      	beq.n	800983e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800982e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009830:	2209      	movs	r2, #9
 8009832:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009834:	e003      	b.n	800983e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009838:	2207      	movs	r2, #7
 800983a:	701a      	strb	r2, [r3, #0]
 800983c:	e000      	b.n	8009840 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800983e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009840:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009844:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009848:	3201      	adds	r2, #1
 800984a:	00d2      	lsls	r2, r2, #3
 800984c:	211a      	movs	r1, #26
 800984e:	fb01 f303 	mul.w	r3, r1, r3
 8009852:	4413      	add	r3, r2
 8009854:	3308      	adds	r3, #8
 8009856:	6a3a      	ldr	r2, [r7, #32]
 8009858:	4413      	add	r3, r2
 800985a:	3304      	adds	r3, #4
 800985c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800985e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009860:	69b9      	ldr	r1, [r7, #24]
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f000 f870 	bl	8009948 <USBH_ParseEPDesc>
 8009868:	4603      	mov	r3, r0
 800986a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800986e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009872:	3301      	adds	r3, #1
 8009874:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	791b      	ldrb	r3, [r3, #4]
 800987c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009880:	429a      	cmp	r2, r3
 8009882:	d204      	bcs.n	800988e <USBH_ParseCfgDesc+0x19e>
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	885a      	ldrh	r2, [r3, #2]
 8009888:	8afb      	ldrh	r3, [r7, #22]
 800988a:	429a      	cmp	r2, r3
 800988c:	d8b0      	bhi.n	80097f0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	791b      	ldrb	r3, [r3, #4]
 8009892:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009896:	429a      	cmp	r2, r3
 8009898:	d201      	bcs.n	800989e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800989a:	2303      	movs	r3, #3
 800989c:	e01c      	b.n	80098d8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800989e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098a2:	3301      	adds	r3, #1
 80098a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80098a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d805      	bhi.n	80098bc <USBH_ParseCfgDesc+0x1cc>
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	885a      	ldrh	r2, [r3, #2]
 80098b4:	8afb      	ldrh	r3, [r7, #22]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	f63f af74 	bhi.w	80097a4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	791b      	ldrb	r3, [r3, #4]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	bf28      	it	cs
 80098c4:	2302      	movcs	r3, #2
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d201      	bcs.n	80098d4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e001      	b.n	80098d8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80098d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3730      	adds	r7, #48	@ 0x30
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781a      	ldrb	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	785a      	ldrb	r2, [r3, #1]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	789a      	ldrb	r2, [r3, #2]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	78da      	ldrb	r2, [r3, #3]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	3304      	adds	r3, #4
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b02      	cmp	r3, #2
 8009912:	bf28      	it	cs
 8009914:	2302      	movcs	r3, #2
 8009916:	b2da      	uxtb	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	795a      	ldrb	r2, [r3, #5]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	799a      	ldrb	r2, [r3, #6]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	79da      	ldrb	r2, [r3, #7]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	7a1a      	ldrb	r2, [r3, #8]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	721a      	strb	r2, [r3, #8]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	781a      	ldrb	r2, [r3, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	785a      	ldrb	r2, [r3, #1]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	789a      	ldrb	r2, [r3, #2]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	78da      	ldrb	r2, [r3, #3]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	3304      	adds	r3, #4
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	461a      	mov	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	3305      	adds	r3, #5
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	b29b      	uxth	r3, r3
 800998a:	4313      	orrs	r3, r2
 800998c:	b29a      	uxth	r2, r3
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	799a      	ldrb	r2, [r3, #6]
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800999a:	68bb      	ldr	r3, [r7, #8]
 800999c:	889b      	ldrh	r3, [r3, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d009      	beq.n	80099b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80099a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099aa:	d804      	bhi.n	80099b6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80099b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099b4:	d901      	bls.n	80099ba <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80099b6:	2303      	movs	r3, #3
 80099b8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d136      	bne.n	8009a32 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	78db      	ldrb	r3, [r3, #3]
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d108      	bne.n	80099e2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	889b      	ldrh	r3, [r3, #4]
 80099d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099d8:	f240 8097 	bls.w	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099dc:	2303      	movs	r3, #3
 80099de:	75fb      	strb	r3, [r7, #23]
 80099e0:	e093      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	78db      	ldrb	r3, [r3, #3]
 80099e6:	f003 0303 	and.w	r3, r3, #3
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d107      	bne.n	80099fe <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	889b      	ldrh	r3, [r3, #4]
 80099f2:	2b40      	cmp	r3, #64	@ 0x40
 80099f4:	f240 8089 	bls.w	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099f8:	2303      	movs	r3, #3
 80099fa:	75fb      	strb	r3, [r7, #23]
 80099fc:	e085      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	78db      	ldrb	r3, [r3, #3]
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d005      	beq.n	8009a16 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	78db      	ldrb	r3, [r3, #3]
 8009a0e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d10a      	bne.n	8009a2c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	799b      	ldrb	r3, [r3, #6]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d003      	beq.n	8009a26 <USBH_ParseEPDesc+0xde>
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	799b      	ldrb	r3, [r3, #6]
 8009a22:	2b10      	cmp	r3, #16
 8009a24:	d970      	bls.n	8009b08 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009a26:	2303      	movs	r3, #3
 8009a28:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a2a:	e06d      	b.n	8009b08 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	75fb      	strb	r3, [r7, #23]
 8009a30:	e06b      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d13c      	bne.n	8009ab6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	78db      	ldrb	r3, [r3, #3]
 8009a40:	f003 0303 	and.w	r3, r3, #3
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d005      	beq.n	8009a54 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	78db      	ldrb	r3, [r3, #3]
 8009a4c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	889b      	ldrh	r3, [r3, #4]
 8009a58:	2b40      	cmp	r3, #64	@ 0x40
 8009a5a:	d956      	bls.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009a60:	e053      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	78db      	ldrb	r3, [r3, #3]
 8009a66:	f003 0303 	and.w	r3, r3, #3
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d10e      	bne.n	8009a8c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	799b      	ldrb	r3, [r3, #6]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d007      	beq.n	8009a86 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009a7a:	2b10      	cmp	r3, #16
 8009a7c:	d803      	bhi.n	8009a86 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009a82:	2b40      	cmp	r3, #64	@ 0x40
 8009a84:	d941      	bls.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009a86:	2303      	movs	r3, #3
 8009a88:	75fb      	strb	r3, [r7, #23]
 8009a8a:	e03e      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	78db      	ldrb	r3, [r3, #3]
 8009a90:	f003 0303 	and.w	r3, r3, #3
 8009a94:	2b03      	cmp	r3, #3
 8009a96:	d10b      	bne.n	8009ab0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	799b      	ldrb	r3, [r3, #6]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d004      	beq.n	8009aaa <USBH_ParseEPDesc+0x162>
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	889b      	ldrh	r3, [r3, #4]
 8009aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009aa8:	d32f      	bcc.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	75fb      	strb	r3, [r7, #23]
 8009aae:	e02c      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	75fb      	strb	r3, [r7, #23]
 8009ab4:	e029      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d120      	bne.n	8009b02 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	78db      	ldrb	r3, [r3, #3]
 8009ac4:	f003 0303 	and.w	r3, r3, #3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d106      	bne.n	8009ada <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	889b      	ldrh	r3, [r3, #4]
 8009ad0:	2b08      	cmp	r3, #8
 8009ad2:	d01a      	beq.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	75fb      	strb	r3, [r7, #23]
 8009ad8:	e017      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	78db      	ldrb	r3, [r3, #3]
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d10a      	bne.n	8009afc <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	799b      	ldrb	r3, [r3, #6]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <USBH_ParseEPDesc+0x1ae>
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	889b      	ldrh	r3, [r3, #4]
 8009af2:	2b08      	cmp	r3, #8
 8009af4:	d909      	bls.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009af6:	2303      	movs	r3, #3
 8009af8:	75fb      	strb	r3, [r7, #23]
 8009afa:	e006      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009afc:	2303      	movs	r3, #3
 8009afe:	75fb      	strb	r3, [r7, #23]
 8009b00:	e003      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009b02:	2303      	movs	r3, #3
 8009b04:	75fb      	strb	r3, [r7, #23]
 8009b06:	e000      	b.n	8009b0a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b08:	bf00      	nop
  }

  return status;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	371c      	adds	r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	4613      	mov	r3, r2
 8009b24:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b03      	cmp	r3, #3
 8009b2e:	d120      	bne.n	8009b72 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	1e9a      	subs	r2, r3, #2
 8009b36:	88fb      	ldrh	r3, [r7, #6]
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	bf28      	it	cs
 8009b3c:	4613      	movcs	r3, r2
 8009b3e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	3302      	adds	r3, #2
 8009b44:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009b46:	2300      	movs	r3, #0
 8009b48:	82fb      	strh	r3, [r7, #22]
 8009b4a:	e00b      	b.n	8009b64 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009b4c:	8afb      	ldrh	r3, [r7, #22]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	4413      	add	r3, r2
 8009b52:	781a      	ldrb	r2, [r3, #0]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009b5e:	8afb      	ldrh	r3, [r7, #22]
 8009b60:	3302      	adds	r3, #2
 8009b62:	82fb      	strh	r3, [r7, #22]
 8009b64:	8afa      	ldrh	r2, [r7, #22]
 8009b66:	8abb      	ldrh	r3, [r7, #20]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d3ef      	bcc.n	8009b4c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	701a      	strb	r2, [r3, #0]
  }
}
 8009b72:	bf00      	nop
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr

08009b7e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009b7e:	b480      	push	{r7}
 8009b80:	b085      	sub	sp, #20
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
 8009b86:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	7812      	ldrb	r2, [r2, #0]
 8009b90:	4413      	add	r3, r2
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b086      	sub	sp, #24
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	60f8      	str	r0, [r7, #12]
 8009bba:	60b9      	str	r1, [r7, #8]
 8009bbc:	4613      	mov	r3, r2
 8009bbe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	789b      	ldrb	r3, [r3, #2]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d002      	beq.n	8009bd2 <USBH_CtlReq+0x20>
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d00f      	beq.n	8009bf0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009bd0:	e027      	b.n	8009c22 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	88fa      	ldrh	r2, [r7, #6]
 8009bdc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2201      	movs	r2, #1
 8009be2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2202      	movs	r2, #2
 8009be8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009bea:	2301      	movs	r3, #1
 8009bec:	75fb      	strb	r3, [r7, #23]
      break;
 8009bee:	e018      	b.n	8009c22 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f81b 	bl	8009c2c <USBH_HandleControl>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009bfa:	7dfb      	ldrb	r3, [r7, #23]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <USBH_CtlReq+0x54>
 8009c00:	7dfb      	ldrb	r3, [r7, #23]
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d106      	bne.n	8009c14 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	761a      	strb	r2, [r3, #24]
      break;
 8009c12:	e005      	b.n	8009c20 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009c14:	7dfb      	ldrb	r3, [r7, #23]
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d102      	bne.n	8009c20 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	709a      	strb	r2, [r3, #2]
      break;
 8009c20:	bf00      	nop
  }
  return status;
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af02      	add	r7, sp, #8
 8009c32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c34:	2301      	movs	r3, #1
 8009c36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	7e1b      	ldrb	r3, [r3, #24]
 8009c40:	3b01      	subs	r3, #1
 8009c42:	2b0a      	cmp	r3, #10
 8009c44:	f200 8156 	bhi.w	8009ef4 <USBH_HandleControl+0x2c8>
 8009c48:	a201      	add	r2, pc, #4	@ (adr r2, 8009c50 <USBH_HandleControl+0x24>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009c7d 	.word	0x08009c7d
 8009c54:	08009c97 	.word	0x08009c97
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d27 	.word	0x08009d27
 8009c60:	08009d5f 	.word	0x08009d5f
 8009c64:	08009d89 	.word	0x08009d89
 8009c68:	08009ddb 	.word	0x08009ddb
 8009c6c:	08009dfd 	.word	0x08009dfd
 8009c70:	08009e39 	.word	0x08009e39
 8009c74:	08009e5f 	.word	0x08009e5f
 8009c78:	08009e9d 	.word	0x08009e9d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f103 0110 	add.w	r1, r3, #16
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	795b      	ldrb	r3, [r3, #5]
 8009c86:	461a      	mov	r2, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 f943 	bl	8009f14 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2202      	movs	r2, #2
 8009c92:	761a      	strb	r2, [r3, #24]
      break;
 8009c94:	e139      	b.n	8009f0a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	795b      	ldrb	r3, [r3, #5]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fcc5 	bl	800a62c <USBH_LL_GetURBState>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ca6:	7bbb      	ldrb	r3, [r7, #14]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d11e      	bne.n	8009cea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7c1b      	ldrb	r3, [r3, #16]
 8009cb0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009cb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	8adb      	ldrh	r3, [r3, #22]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00a      	beq.n	8009cd4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009cbe:	7b7b      	ldrb	r3, [r7, #13]
 8009cc0:	2b80      	cmp	r3, #128	@ 0x80
 8009cc2:	d103      	bne.n	8009ccc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009cca:	e115      	b.n	8009ef8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2205      	movs	r2, #5
 8009cd0:	761a      	strb	r2, [r3, #24]
      break;
 8009cd2:	e111      	b.n	8009ef8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009cd4:	7b7b      	ldrb	r3, [r7, #13]
 8009cd6:	2b80      	cmp	r3, #128	@ 0x80
 8009cd8:	d103      	bne.n	8009ce2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2209      	movs	r2, #9
 8009cde:	761a      	strb	r2, [r3, #24]
      break;
 8009ce0:	e10a      	b.n	8009ef8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2207      	movs	r2, #7
 8009ce6:	761a      	strb	r2, [r3, #24]
      break;
 8009ce8:	e106      	b.n	8009ef8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	2b04      	cmp	r3, #4
 8009cee:	d003      	beq.n	8009cf8 <USBH_HandleControl+0xcc>
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	f040 8100 	bne.w	8009ef8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	220b      	movs	r2, #11
 8009cfc:	761a      	strb	r2, [r3, #24]
      break;
 8009cfe:	e0fb      	b.n	8009ef8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6899      	ldr	r1, [r3, #8]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	899a      	ldrh	r2, [r3, #12]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	791b      	ldrb	r3, [r3, #4]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f93a 	bl	8009f92 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2204      	movs	r2, #4
 8009d22:	761a      	strb	r2, [r3, #24]
      break;
 8009d24:	e0f1      	b.n	8009f0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	791b      	ldrb	r3, [r3, #4]
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fc7d 	bl	800a62c <USBH_LL_GetURBState>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d102      	bne.n	8009d42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2209      	movs	r2, #9
 8009d40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
 8009d44:	2b05      	cmp	r3, #5
 8009d46:	d102      	bne.n	8009d4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d4c:	e0d6      	b.n	8009efc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	f040 80d3 	bne.w	8009efc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	220b      	movs	r2, #11
 8009d5a:	761a      	strb	r2, [r3, #24]
      break;
 8009d5c:	e0ce      	b.n	8009efc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6899      	ldr	r1, [r3, #8]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	899a      	ldrh	r2, [r3, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	795b      	ldrb	r3, [r3, #5]
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	9000      	str	r0, [sp, #0]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f8ea 	bl	8009f48 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2206      	movs	r2, #6
 8009d84:	761a      	strb	r2, [r3, #24]
      break;
 8009d86:	e0c0      	b.n	8009f0a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	795b      	ldrb	r3, [r3, #5]
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fc4c 	bl	800a62c <USBH_LL_GetURBState>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d103      	bne.n	8009da6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2207      	movs	r2, #7
 8009da2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009da4:	e0ac      	b.n	8009f00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	2b05      	cmp	r3, #5
 8009daa:	d105      	bne.n	8009db8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	220c      	movs	r2, #12
 8009db0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009db2:	2303      	movs	r3, #3
 8009db4:	73fb      	strb	r3, [r7, #15]
      break;
 8009db6:	e0a3      	b.n	8009f00 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	2b02      	cmp	r3, #2
 8009dbc:	d103      	bne.n	8009dc6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2205      	movs	r2, #5
 8009dc2:	761a      	strb	r2, [r3, #24]
      break;
 8009dc4:	e09c      	b.n	8009f00 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009dc6:	7bbb      	ldrb	r3, [r7, #14]
 8009dc8:	2b04      	cmp	r3, #4
 8009dca:	f040 8099 	bne.w	8009f00 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	220b      	movs	r2, #11
 8009dd2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009dd4:	2302      	movs	r3, #2
 8009dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009dd8:	e092      	b.n	8009f00 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	791b      	ldrb	r3, [r3, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	2100      	movs	r1, #0
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f8d5 	bl	8009f92 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2208      	movs	r2, #8
 8009df8:	761a      	strb	r2, [r3, #24]

      break;
 8009dfa:	e086      	b.n	8009f0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	791b      	ldrb	r3, [r3, #4]
 8009e00:	4619      	mov	r1, r3
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fc12 	bl	800a62c <USBH_LL_GetURBState>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d105      	bne.n	8009e1e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	220d      	movs	r2, #13
 8009e16:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e1c:	e072      	b.n	8009f04 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b04      	cmp	r3, #4
 8009e22:	d103      	bne.n	8009e2c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	220b      	movs	r2, #11
 8009e28:	761a      	strb	r2, [r3, #24]
      break;
 8009e2a:	e06b      	b.n	8009f04 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	2b05      	cmp	r3, #5
 8009e30:	d168      	bne.n	8009f04 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009e32:	2303      	movs	r3, #3
 8009e34:	73fb      	strb	r3, [r7, #15]
      break;
 8009e36:	e065      	b.n	8009f04 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	795b      	ldrb	r3, [r3, #5]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	9200      	str	r2, [sp, #0]
 8009e40:	2200      	movs	r2, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 f87f 	bl	8009f48 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	220a      	movs	r2, #10
 8009e5a:	761a      	strb	r2, [r3, #24]
      break;
 8009e5c:	e055      	b.n	8009f0a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	795b      	ldrb	r3, [r3, #5]
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fbe1 	bl	800a62c <USBH_LL_GetURBState>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d105      	bne.n	8009e80 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	220d      	movs	r2, #13
 8009e7c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e7e:	e043      	b.n	8009f08 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b02      	cmp	r3, #2
 8009e84:	d103      	bne.n	8009e8e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2209      	movs	r2, #9
 8009e8a:	761a      	strb	r2, [r3, #24]
      break;
 8009e8c:	e03c      	b.n	8009f08 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d139      	bne.n	8009f08 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	220b      	movs	r2, #11
 8009e98:	761a      	strb	r2, [r3, #24]
      break;
 8009e9a:	e035      	b.n	8009f08 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	7e5b      	ldrb	r3, [r3, #25]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	765a      	strb	r2, [r3, #25]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	7e5b      	ldrb	r3, [r3, #25]
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d806      	bhi.n	8009ebe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009ebc:	e025      	b.n	8009f0a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ec4:	2106      	movs	r1, #6
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2200      	movs	r2, #0
 8009ece:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	795b      	ldrb	r3, [r3, #5]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f90c 	bl	800a0f4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	791b      	ldrb	r3, [r3, #4]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f906 	bl	800a0f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009eee:	2302      	movs	r3, #2
 8009ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef2:	e00a      	b.n	8009f0a <USBH_HandleControl+0x2de>

    default:
      break;
 8009ef4:	bf00      	nop
 8009ef6:	e008      	b.n	8009f0a <USBH_HandleControl+0x2de>
      break;
 8009ef8:	bf00      	nop
 8009efa:	e006      	b.n	8009f0a <USBH_HandleControl+0x2de>
      break;
 8009efc:	bf00      	nop
 8009efe:	e004      	b.n	8009f0a <USBH_HandleControl+0x2de>
      break;
 8009f00:	bf00      	nop
 8009f02:	e002      	b.n	8009f0a <USBH_HandleControl+0x2de>
      break;
 8009f04:	bf00      	nop
 8009f06:	e000      	b.n	8009f0a <USBH_HandleControl+0x2de>
      break;
 8009f08:	bf00      	nop
  }

  return status;
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af04      	add	r7, sp, #16
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f22:	79f9      	ldrb	r1, [r7, #7]
 8009f24:	2300      	movs	r3, #0
 8009f26:	9303      	str	r3, [sp, #12]
 8009f28:	2308      	movs	r3, #8
 8009f2a:	9302      	str	r3, [sp, #8]
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	9301      	str	r3, [sp, #4]
 8009f30:	2300      	movs	r3, #0
 8009f32:	9300      	str	r3, [sp, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	2200      	movs	r2, #0
 8009f38:	68f8      	ldr	r0, [r7, #12]
 8009f3a:	f000 fb46 	bl	800a5ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3710      	adds	r7, #16
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af04      	add	r7, sp, #16
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	4611      	mov	r1, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	460b      	mov	r3, r1
 8009f58:	80fb      	strh	r3, [r7, #6]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f6c:	7979      	ldrb	r1, [r7, #5]
 8009f6e:	7e3b      	ldrb	r3, [r7, #24]
 8009f70:	9303      	str	r3, [sp, #12]
 8009f72:	88fb      	ldrh	r3, [r7, #6]
 8009f74:	9302      	str	r3, [sp, #8]
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	9301      	str	r3, [sp, #4]
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	9300      	str	r3, [sp, #0]
 8009f7e:	2300      	movs	r3, #0
 8009f80:	2200      	movs	r2, #0
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f000 fb21 	bl	800a5ca <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b088      	sub	sp, #32
 8009f96:	af04      	add	r7, sp, #16
 8009f98:	60f8      	str	r0, [r7, #12]
 8009f9a:	60b9      	str	r1, [r7, #8]
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	460b      	mov	r3, r1
 8009fa2:	80fb      	strh	r3, [r7, #6]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009fa8:	7979      	ldrb	r1, [r7, #5]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9303      	str	r3, [sp, #12]
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	9302      	str	r3, [sp, #8]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f000 fb03 	bl	800a5ca <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009fc4:	2300      	movs	r3, #0

}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b088      	sub	sp, #32
 8009fd2:	af04      	add	r7, sp, #16
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	4611      	mov	r1, r2
 8009fda:	461a      	mov	r2, r3
 8009fdc:	460b      	mov	r3, r1
 8009fde:	80fb      	strh	r3, [r7, #6]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ff2:	7979      	ldrb	r1, [r7, #5]
 8009ff4:	7e3b      	ldrb	r3, [r7, #24]
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	88fb      	ldrh	r3, [r7, #6]
 8009ffa:	9302      	str	r3, [sp, #8]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	9301      	str	r3, [sp, #4]
 800a000:	2301      	movs	r3, #1
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2302      	movs	r3, #2
 800a006:	2200      	movs	r2, #0
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fade 	bl	800a5ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3710      	adds	r7, #16
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af04      	add	r7, sp, #16
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4611      	mov	r1, r2
 800a024:	461a      	mov	r2, r3
 800a026:	460b      	mov	r3, r1
 800a028:	80fb      	strh	r3, [r7, #6]
 800a02a:	4613      	mov	r3, r2
 800a02c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a02e:	7979      	ldrb	r1, [r7, #5]
 800a030:	2300      	movs	r3, #0
 800a032:	9303      	str	r3, [sp, #12]
 800a034:	88fb      	ldrh	r3, [r7, #6]
 800a036:	9302      	str	r3, [sp, #8]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	9301      	str	r3, [sp, #4]
 800a03c:	2301      	movs	r3, #1
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	2302      	movs	r3, #2
 800a042:	2201      	movs	r2, #1
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 fac0 	bl	800a5ca <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3710      	adds	r7, #16
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af04      	add	r7, sp, #16
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	461a      	mov	r2, r3
 800a062:	4603      	mov	r3, r0
 800a064:	70fb      	strb	r3, [r7, #3]
 800a066:	460b      	mov	r3, r1
 800a068:	70bb      	strb	r3, [r7, #2]
 800a06a:	4613      	mov	r3, r2
 800a06c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a06e:	7878      	ldrb	r0, [r7, #1]
 800a070:	78ba      	ldrb	r2, [r7, #2]
 800a072:	78f9      	ldrb	r1, [r7, #3]
 800a074:	8b3b      	ldrh	r3, [r7, #24]
 800a076:	9302      	str	r3, [sp, #8]
 800a078:	7d3b      	ldrb	r3, [r7, #20]
 800a07a:	9301      	str	r3, [sp, #4]
 800a07c:	7c3b      	ldrb	r3, [r7, #16]
 800a07e:	9300      	str	r3, [sp, #0]
 800a080:	4603      	mov	r3, r0
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 fa53 	bl	800a52e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa72 	bl	800a58c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b084      	sub	sp, #16
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f836 	bl	800a130 <USBH_GetFreePipe>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a0c8:	89fb      	ldrh	r3, [r7, #14]
 800a0ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d00a      	beq.n	800a0e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a0d2:	78fa      	ldrb	r2, [r7, #3]
 800a0d4:	89fb      	ldrh	r3, [r7, #14]
 800a0d6:	f003 030f 	and.w	r3, r3, #15
 800a0da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	33e0      	adds	r3, #224	@ 0xe0
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a0e8:	89fb      	ldrh	r3, [r7, #14]
 800a0ea:	b2db      	uxtb	r3, r3
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a100:	78fb      	ldrb	r3, [r7, #3]
 800a102:	2b0f      	cmp	r3, #15
 800a104:	d80d      	bhi.n	800a122 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	33e0      	adds	r3, #224	@ 0xe0
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	685a      	ldr	r2, [r3, #4]
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	33e0      	adds	r3, #224	@ 0xe0
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	440b      	add	r3, r1
 800a120:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
 800a140:	e00f      	b.n	800a162 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	33e0      	adds	r3, #224	@ 0xe0
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	b29b      	uxth	r3, r3
 800a15a:	e007      	b.n	800a16c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	3301      	adds	r3, #1
 800a160:	73fb      	strb	r3, [r7, #15]
 800a162:	7bfb      	ldrb	r3, [r7, #15]
 800a164:	2b0f      	cmp	r3, #15
 800a166:	d9ec      	bls.n	800a142 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3714      	adds	r7, #20
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a17c:	2201      	movs	r2, #1
 800a17e:	490e      	ldr	r1, [pc, #56]	@ (800a1b8 <MX_USB_HOST_Init+0x40>)
 800a180:	480e      	ldr	r0, [pc, #56]	@ (800a1bc <MX_USB_HOST_Init+0x44>)
 800a182:	f7fe fb15 	bl	80087b0 <USBH_Init>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a18c:	f7f6 fdb8 	bl	8000d00 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a190:	490b      	ldr	r1, [pc, #44]	@ (800a1c0 <MX_USB_HOST_Init+0x48>)
 800a192:	480a      	ldr	r0, [pc, #40]	@ (800a1bc <MX_USB_HOST_Init+0x44>)
 800a194:	f7fe fbb9 	bl	800890a <USBH_RegisterClass>
 800a198:	4603      	mov	r3, r0
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d001      	beq.n	800a1a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a19e:	f7f6 fdaf 	bl	8000d00 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a1a2:	4806      	ldr	r0, [pc, #24]	@ (800a1bc <MX_USB_HOST_Init+0x44>)
 800a1a4:	f7fe fc3d 	bl	8008a22 <USBH_Start>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a1ae:	f7f6 fda7 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a1b2:	bf00      	nop
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800a1d9 	.word	0x0800a1d9
 800a1bc:	20000274 	.word	0x20000274
 800a1c0:	2000000c 	.word	0x2000000c

0800a1c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a1c8:	4802      	ldr	r0, [pc, #8]	@ (800a1d4 <MX_USB_HOST_Process+0x10>)
 800a1ca:	f7fe fc3b 	bl	8008a44 <USBH_Process>
}
 800a1ce:	bf00      	nop
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20000274 	.word	0x20000274

0800a1d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	d819      	bhi.n	800a220 <USBH_UserProcess+0x48>
 800a1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a1f4 <USBH_UserProcess+0x1c>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a221 	.word	0x0800a221
 800a1f8:	0800a211 	.word	0x0800a211
 800a1fc:	0800a221 	.word	0x0800a221
 800a200:	0800a219 	.word	0x0800a219
 800a204:	0800a209 	.word	0x0800a209
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a208:	4b09      	ldr	r3, [pc, #36]	@ (800a230 <USBH_UserProcess+0x58>)
 800a20a:	2203      	movs	r2, #3
 800a20c:	701a      	strb	r2, [r3, #0]
  break;
 800a20e:	e008      	b.n	800a222 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a210:	4b07      	ldr	r3, [pc, #28]	@ (800a230 <USBH_UserProcess+0x58>)
 800a212:	2202      	movs	r2, #2
 800a214:	701a      	strb	r2, [r3, #0]
  break;
 800a216:	e004      	b.n	800a222 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a218:	4b05      	ldr	r3, [pc, #20]	@ (800a230 <USBH_UserProcess+0x58>)
 800a21a:	2201      	movs	r2, #1
 800a21c:	701a      	strb	r2, [r3, #0]
  break;
 800a21e:	e000      	b.n	800a222 <USBH_UserProcess+0x4a>

  default:
  break;
 800a220:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	2000064c 	.word	0x2000064c

0800a234 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b08a      	sub	sp, #40	@ 0x28
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	2200      	movs	r2, #0
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	605a      	str	r2, [r3, #4]
 800a246:	609a      	str	r2, [r3, #8]
 800a248:	60da      	str	r2, [r3, #12]
 800a24a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a254:	d147      	bne.n	800a2e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a256:	2300      	movs	r3, #0
 800a258:	613b      	str	r3, [r7, #16]
 800a25a:	4b25      	ldr	r3, [pc, #148]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a25c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25e:	4a24      	ldr	r2, [pc, #144]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a260:	f043 0301 	orr.w	r3, r3, #1
 800a264:	6313      	str	r3, [r2, #48]	@ 0x30
 800a266:	4b22      	ldr	r3, [pc, #136]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a26a:	f003 0301 	and.w	r3, r3, #1
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a272:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a278:	2300      	movs	r3, #0
 800a27a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a27c:	2300      	movs	r3, #0
 800a27e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a280:	f107 0314 	add.w	r3, r7, #20
 800a284:	4619      	mov	r1, r3
 800a286:	481b      	ldr	r0, [pc, #108]	@ (800a2f4 <HAL_HCD_MspInit+0xc0>)
 800a288:	f7f7 fee0 	bl	800204c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a28c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a292:	2302      	movs	r3, #2
 800a294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a296:	2300      	movs	r3, #0
 800a298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a29a:	2300      	movs	r3, #0
 800a29c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a29e:	230a      	movs	r3, #10
 800a2a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2a2:	f107 0314 	add.w	r3, r7, #20
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	4812      	ldr	r0, [pc, #72]	@ (800a2f4 <HAL_HCD_MspInit+0xc0>)
 800a2aa:	f7f7 fecf 	bl	800204c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2ae:	4b10      	ldr	r3, [pc, #64]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2b2:	4a0f      	ldr	r2, [pc, #60]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	60fb      	str	r3, [r7, #12]
 800a2be:	4b0c      	ldr	r3, [pc, #48]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a2c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2c2:	4a0b      	ldr	r2, [pc, #44]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a2c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a2c8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a2ca:	4b09      	ldr	r3, [pc, #36]	@ (800a2f0 <HAL_HCD_MspInit+0xbc>)
 800a2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2100      	movs	r1, #0
 800a2da:	2043      	movs	r0, #67	@ 0x43
 800a2dc:	f7f7 fe7f 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2e0:	2043      	movs	r0, #67	@ 0x43
 800a2e2:	f7f7 fe98 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2e6:	bf00      	nop
 800a2e8:	3728      	adds	r7, #40	@ 0x28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	40023800 	.word	0x40023800
 800a2f4:	40020000 	.word	0x40020000

0800a2f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe ff73 	bl	80091f2 <USBH_LL_IncTimer>
}
 800a30c:	bf00      	nop
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b082      	sub	sp, #8
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe ffab 	bl	800927e <USBH_LL_Connect>
}
 800a328:	bf00      	nop
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}

0800a330 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a33e:	4618      	mov	r0, r3
 800a340:	f7fe ffb4 	bl	80092ac <USBH_LL_Disconnect>
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
 800a358:	4613      	mov	r3, r2
 800a35a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe ff65 	bl	8009246 <USBH_LL_PortEnabled>
}
 800a37c:	bf00      	nop
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe ff65 	bl	8009262 <USBH_LL_PortDisabled>
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d12a      	bne.n	800a408 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a3b2:	4a18      	ldr	r2, [pc, #96]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	4a15      	ldr	r2, [pc, #84]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3be:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a3c2:	4b14      	ldr	r3, [pc, #80]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3c4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a3c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a3ca:	4b12      	ldr	r3, [pc, #72]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3cc:	2208      	movs	r2, #8
 800a3ce:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a3d0:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3d8:	2200      	movs	r2, #0
 800a3da:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3de:	2202      	movs	r2, #2
 800a3e0:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a3e8:	480a      	ldr	r0, [pc, #40]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3ea:	f7f7 fffd 	bl	80023e8 <HAL_HCD_Init>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d001      	beq.n	800a3f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a3f4:	f7f6 fc84 	bl	8000d00 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a3f8:	4806      	ldr	r0, [pc, #24]	@ (800a414 <USBH_LL_Init+0x74>)
 800a3fa:	f7f8 fc5d 	bl	8002cb8 <HAL_HCD_GetCurrentFrame>
 800a3fe:	4603      	mov	r3, r0
 800a400:	4619      	mov	r1, r3
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fe fee6 	bl	80091d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3708      	adds	r7, #8
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20000650 	.word	0x20000650

0800a418 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a420:	2300      	movs	r3, #0
 800a422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a42e:	4618      	mov	r0, r3
 800a430:	f7f8 fbca 	bl	8002bc8 <HAL_HCD_Start>
 800a434:	4603      	mov	r3, r0
 800a436:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a438:	7bfb      	ldrb	r3, [r7, #15]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 f95e 	bl	800a6fc <USBH_Get_USB_Status>
 800a440:	4603      	mov	r3, r0
 800a442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a444:	7bbb      	ldrb	r3, [r7, #14]
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a456:	2300      	movs	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a45a:	2300      	movs	r3, #0
 800a45c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a464:	4618      	mov	r0, r3
 800a466:	f7f8 fbd2 	bl	8002c0e <HAL_HCD_Stop>
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	4618      	mov	r0, r3
 800a472:	f000 f943 	bl	800a6fc <USBH_Get_USB_Status>
 800a476:	4603      	mov	r3, r0
 800a478:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a47a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a48c:	2301      	movs	r3, #1
 800a48e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a496:	4618      	mov	r0, r3
 800a498:	f7f8 fc1c 	bl	8002cd4 <HAL_HCD_GetCurrentSpeed>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d00c      	beq.n	800a4bc <USBH_LL_GetSpeed+0x38>
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d80d      	bhi.n	800a4c2 <USBH_LL_GetSpeed+0x3e>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d002      	beq.n	800a4b0 <USBH_LL_GetSpeed+0x2c>
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d003      	beq.n	800a4b6 <USBH_LL_GetSpeed+0x32>
 800a4ae:	e008      	b.n	800a4c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4b4:	e008      	b.n	800a4c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ba:	e005      	b.n	800a4c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c0:	e002      	b.n	800a4c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4c6:	bf00      	nop
  }
  return  speed;
 800a4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7f8 fbad 	bl	8002c48 <HAL_HCD_ResetPort>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 f901 	bl	800a6fc <USBH_Get_USB_Status>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7f8 fbb5 	bl	8002c8e <HAL_HCD_HC_GetXferCount>
 800a524:	4603      	mov	r3, r0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3708      	adds	r7, #8
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a52e:	b590      	push	{r4, r7, lr}
 800a530:	b089      	sub	sp, #36	@ 0x24
 800a532:	af04      	add	r7, sp, #16
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	4608      	mov	r0, r1
 800a538:	4611      	mov	r1, r2
 800a53a:	461a      	mov	r2, r3
 800a53c:	4603      	mov	r3, r0
 800a53e:	70fb      	strb	r3, [r7, #3]
 800a540:	460b      	mov	r3, r1
 800a542:	70bb      	strb	r3, [r7, #2]
 800a544:	4613      	mov	r3, r2
 800a546:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a548:	2300      	movs	r3, #0
 800a54a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a54c:	2300      	movs	r3, #0
 800a54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a556:	787c      	ldrb	r4, [r7, #1]
 800a558:	78ba      	ldrb	r2, [r7, #2]
 800a55a:	78f9      	ldrb	r1, [r7, #3]
 800a55c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a55e:	9302      	str	r3, [sp, #8]
 800a560:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a564:	9301      	str	r3, [sp, #4]
 800a566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a56a:	9300      	str	r3, [sp, #0]
 800a56c:	4623      	mov	r3, r4
 800a56e:	f7f7 ffa2 	bl	80024b6 <HAL_HCD_HC_Init>
 800a572:	4603      	mov	r3, r0
 800a574:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	4618      	mov	r0, r3
 800a57a:	f000 f8bf 	bl	800a6fc <USBH_Get_USB_Status>
 800a57e:	4603      	mov	r3, r0
 800a580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a582:	7bbb      	ldrb	r3, [r7, #14]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3714      	adds	r7, #20
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd90      	pop	{r4, r7, pc}

0800a58c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a598:	2300      	movs	r3, #0
 800a59a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a59c:	2300      	movs	r3, #0
 800a59e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5a6:	78fa      	ldrb	r2, [r7, #3]
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7f8 f83b 	bl	8002626 <HAL_HCD_HC_Halt>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f8a0 	bl	800a6fc <USBH_Get_USB_Status>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a5ca:	b590      	push	{r4, r7, lr}
 800a5cc:	b089      	sub	sp, #36	@ 0x24
 800a5ce:	af04      	add	r7, sp, #16
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	4603      	mov	r3, r0
 800a5da:	70fb      	strb	r3, [r7, #3]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70bb      	strb	r3, [r7, #2]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a5f2:	787c      	ldrb	r4, [r7, #1]
 800a5f4:	78ba      	ldrb	r2, [r7, #2]
 800a5f6:	78f9      	ldrb	r1, [r7, #3]
 800a5f8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a5fc:	9303      	str	r3, [sp, #12]
 800a5fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a600:	9302      	str	r3, [sp, #8]
 800a602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a604:	9301      	str	r3, [sp, #4]
 800a606:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a60a:	9300      	str	r3, [sp, #0]
 800a60c:	4623      	mov	r3, r4
 800a60e:	f7f8 f82d 	bl	800266c <HAL_HCD_HC_SubmitRequest>
 800a612:	4603      	mov	r3, r0
 800a614:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 f86f 	bl	800a6fc <USBH_Get_USB_Status>
 800a61e:	4603      	mov	r3, r0
 800a620:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a622:	7bbb      	ldrb	r3, [r7, #14]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3714      	adds	r7, #20
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd90      	pop	{r4, r7, pc}

0800a62c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	460b      	mov	r3, r1
 800a636:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7f8 fb0e 	bl	8002c64 <HAL_HCD_HC_GetURBState>
 800a648:	4603      	mov	r3, r0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
 800a65a:	460b      	mov	r3, r1
 800a65c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a664:	2b01      	cmp	r3, #1
 800a666:	d103      	bne.n	800a670 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 f872 	bl	800a754 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a670:	20c8      	movs	r0, #200	@ 0xc8
 800a672:	f7f6 fe7d 	bl	8001370 <HAL_Delay>
  return USBH_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	3708      	adds	r7, #8
 800a67c:	46bd      	mov	sp, r7
 800a67e:	bd80      	pop	{r7, pc}

0800a680 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a680:	b480      	push	{r7}
 800a682:	b085      	sub	sp, #20
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	460b      	mov	r3, r1
 800a68a:	70fb      	strb	r3, [r7, #3]
 800a68c:	4613      	mov	r3, r2
 800a68e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a696:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a698:	78fa      	ldrb	r2, [r7, #3]
 800a69a:	68f9      	ldr	r1, [r7, #12]
 800a69c:	4613      	mov	r3, r2
 800a69e:	011b      	lsls	r3, r3, #4
 800a6a0:	1a9b      	subs	r3, r3, r2
 800a6a2:	009b      	lsls	r3, r3, #2
 800a6a4:	440b      	add	r3, r1
 800a6a6:	3317      	adds	r3, #23
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00a      	beq.n	800a6c4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a6ae:	78fa      	ldrb	r2, [r7, #3]
 800a6b0:	68f9      	ldr	r1, [r7, #12]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	1a9b      	subs	r3, r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	333c      	adds	r3, #60	@ 0x3c
 800a6be:	78ba      	ldrb	r2, [r7, #2]
 800a6c0:	701a      	strb	r2, [r3, #0]
 800a6c2:	e009      	b.n	800a6d8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a6c4:	78fa      	ldrb	r2, [r7, #3]
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	011b      	lsls	r3, r3, #4
 800a6cc:	1a9b      	subs	r3, r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	440b      	add	r3, r1
 800a6d2:	333d      	adds	r3, #61	@ 0x3d
 800a6d4:	78ba      	ldrb	r2, [r7, #2]
 800a6d6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3714      	adds	r7, #20
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr

0800a6e6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b082      	sub	sp, #8
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7f6 fe3e 	bl	8001370 <HAL_Delay>
}
 800a6f4:	bf00      	nop
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b085      	sub	sp, #20
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d817      	bhi.n	800a740 <USBH_Get_USB_Status+0x44>
 800a710:	a201      	add	r2, pc, #4	@ (adr r2, 800a718 <USBH_Get_USB_Status+0x1c>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a729 	.word	0x0800a729
 800a71c:	0800a72f 	.word	0x0800a72f
 800a720:	0800a735 	.word	0x0800a735
 800a724:	0800a73b 	.word	0x0800a73b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]
    break;
 800a72c:	e00b      	b.n	800a746 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a72e:	2302      	movs	r3, #2
 800a730:	73fb      	strb	r3, [r7, #15]
    break;
 800a732:	e008      	b.n	800a746 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a734:	2301      	movs	r3, #1
 800a736:	73fb      	strb	r3, [r7, #15]
    break;
 800a738:	e005      	b.n	800a746 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a73a:	2302      	movs	r3, #2
 800a73c:	73fb      	strb	r3, [r7, #15]
    break;
 800a73e:	e002      	b.n	800a746 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a740:	2302      	movs	r3, #2
 800a742:	73fb      	strb	r3, [r7, #15]
    break;
 800a744:	bf00      	nop
  }
  return usb_status;
 800a746:	7bfb      	ldrb	r3, [r7, #15]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a75e:	79fb      	ldrb	r3, [r7, #7]
 800a760:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a762:	79fb      	ldrb	r3, [r7, #7]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a768:	2300      	movs	r3, #0
 800a76a:	73fb      	strb	r3, [r7, #15]
 800a76c:	e001      	b.n	800a772 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a76e:	2301      	movs	r3, #1
 800a770:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a772:	7bfb      	ldrb	r3, [r7, #15]
 800a774:	461a      	mov	r2, r3
 800a776:	2101      	movs	r1, #1
 800a778:	4803      	ldr	r0, [pc, #12]	@ (800a788 <MX_DriverVbusFS+0x34>)
 800a77a:	f7f7 fe03 	bl	8002384 <HAL_GPIO_WritePin>
}
 800a77e:	bf00      	nop
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	40020800 	.word	0x40020800

0800a78c <malloc>:
 800a78c:	4b02      	ldr	r3, [pc, #8]	@ (800a798 <malloc+0xc>)
 800a78e:	4601      	mov	r1, r0
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	f000 b82d 	b.w	800a7f0 <_malloc_r>
 800a796:	bf00      	nop
 800a798:	2000002c 	.word	0x2000002c

0800a79c <free>:
 800a79c:	4b02      	ldr	r3, [pc, #8]	@ (800a7a8 <free+0xc>)
 800a79e:	4601      	mov	r1, r0
 800a7a0:	6818      	ldr	r0, [r3, #0]
 800a7a2:	f000 b8f5 	b.w	800a990 <_free_r>
 800a7a6:	bf00      	nop
 800a7a8:	2000002c 	.word	0x2000002c

0800a7ac <sbrk_aligned>:
 800a7ac:	b570      	push	{r4, r5, r6, lr}
 800a7ae:	4e0f      	ldr	r6, [pc, #60]	@ (800a7ec <sbrk_aligned+0x40>)
 800a7b0:	460c      	mov	r4, r1
 800a7b2:	6831      	ldr	r1, [r6, #0]
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	b911      	cbnz	r1, 800a7be <sbrk_aligned+0x12>
 800a7b8:	f000 f8ae 	bl	800a918 <_sbrk_r>
 800a7bc:	6030      	str	r0, [r6, #0]
 800a7be:	4621      	mov	r1, r4
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	f000 f8a9 	bl	800a918 <_sbrk_r>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d103      	bne.n	800a7d2 <sbrk_aligned+0x26>
 800a7ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	bd70      	pop	{r4, r5, r6, pc}
 800a7d2:	1cc4      	adds	r4, r0, #3
 800a7d4:	f024 0403 	bic.w	r4, r4, #3
 800a7d8:	42a0      	cmp	r0, r4
 800a7da:	d0f8      	beq.n	800a7ce <sbrk_aligned+0x22>
 800a7dc:	1a21      	subs	r1, r4, r0
 800a7de:	4628      	mov	r0, r5
 800a7e0:	f000 f89a 	bl	800a918 <_sbrk_r>
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d1f2      	bne.n	800a7ce <sbrk_aligned+0x22>
 800a7e8:	e7ef      	b.n	800a7ca <sbrk_aligned+0x1e>
 800a7ea:	bf00      	nop
 800a7ec:	20000a30 	.word	0x20000a30

0800a7f0 <_malloc_r>:
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	1ccd      	adds	r5, r1, #3
 800a7f6:	f025 0503 	bic.w	r5, r5, #3
 800a7fa:	3508      	adds	r5, #8
 800a7fc:	2d0c      	cmp	r5, #12
 800a7fe:	bf38      	it	cc
 800a800:	250c      	movcc	r5, #12
 800a802:	2d00      	cmp	r5, #0
 800a804:	4606      	mov	r6, r0
 800a806:	db01      	blt.n	800a80c <_malloc_r+0x1c>
 800a808:	42a9      	cmp	r1, r5
 800a80a:	d904      	bls.n	800a816 <_malloc_r+0x26>
 800a80c:	230c      	movs	r3, #12
 800a80e:	6033      	str	r3, [r6, #0]
 800a810:	2000      	movs	r0, #0
 800a812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a816:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8ec <_malloc_r+0xfc>
 800a81a:	f000 f869 	bl	800a8f0 <__malloc_lock>
 800a81e:	f8d8 3000 	ldr.w	r3, [r8]
 800a822:	461c      	mov	r4, r3
 800a824:	bb44      	cbnz	r4, 800a878 <_malloc_r+0x88>
 800a826:	4629      	mov	r1, r5
 800a828:	4630      	mov	r0, r6
 800a82a:	f7ff ffbf 	bl	800a7ac <sbrk_aligned>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	4604      	mov	r4, r0
 800a832:	d158      	bne.n	800a8e6 <_malloc_r+0xf6>
 800a834:	f8d8 4000 	ldr.w	r4, [r8]
 800a838:	4627      	mov	r7, r4
 800a83a:	2f00      	cmp	r7, #0
 800a83c:	d143      	bne.n	800a8c6 <_malloc_r+0xd6>
 800a83e:	2c00      	cmp	r4, #0
 800a840:	d04b      	beq.n	800a8da <_malloc_r+0xea>
 800a842:	6823      	ldr	r3, [r4, #0]
 800a844:	4639      	mov	r1, r7
 800a846:	4630      	mov	r0, r6
 800a848:	eb04 0903 	add.w	r9, r4, r3
 800a84c:	f000 f864 	bl	800a918 <_sbrk_r>
 800a850:	4581      	cmp	r9, r0
 800a852:	d142      	bne.n	800a8da <_malloc_r+0xea>
 800a854:	6821      	ldr	r1, [r4, #0]
 800a856:	1a6d      	subs	r5, r5, r1
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ffa6 	bl	800a7ac <sbrk_aligned>
 800a860:	3001      	adds	r0, #1
 800a862:	d03a      	beq.n	800a8da <_malloc_r+0xea>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	442b      	add	r3, r5
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	f8d8 3000 	ldr.w	r3, [r8]
 800a86e:	685a      	ldr	r2, [r3, #4]
 800a870:	bb62      	cbnz	r2, 800a8cc <_malloc_r+0xdc>
 800a872:	f8c8 7000 	str.w	r7, [r8]
 800a876:	e00f      	b.n	800a898 <_malloc_r+0xa8>
 800a878:	6822      	ldr	r2, [r4, #0]
 800a87a:	1b52      	subs	r2, r2, r5
 800a87c:	d420      	bmi.n	800a8c0 <_malloc_r+0xd0>
 800a87e:	2a0b      	cmp	r2, #11
 800a880:	d917      	bls.n	800a8b2 <_malloc_r+0xc2>
 800a882:	1961      	adds	r1, r4, r5
 800a884:	42a3      	cmp	r3, r4
 800a886:	6025      	str	r5, [r4, #0]
 800a888:	bf18      	it	ne
 800a88a:	6059      	strne	r1, [r3, #4]
 800a88c:	6863      	ldr	r3, [r4, #4]
 800a88e:	bf08      	it	eq
 800a890:	f8c8 1000 	streq.w	r1, [r8]
 800a894:	5162      	str	r2, [r4, r5]
 800a896:	604b      	str	r3, [r1, #4]
 800a898:	4630      	mov	r0, r6
 800a89a:	f000 f82f 	bl	800a8fc <__malloc_unlock>
 800a89e:	f104 000b 	add.w	r0, r4, #11
 800a8a2:	1d23      	adds	r3, r4, #4
 800a8a4:	f020 0007 	bic.w	r0, r0, #7
 800a8a8:	1ac2      	subs	r2, r0, r3
 800a8aa:	bf1c      	itt	ne
 800a8ac:	1a1b      	subne	r3, r3, r0
 800a8ae:	50a3      	strne	r3, [r4, r2]
 800a8b0:	e7af      	b.n	800a812 <_malloc_r+0x22>
 800a8b2:	6862      	ldr	r2, [r4, #4]
 800a8b4:	42a3      	cmp	r3, r4
 800a8b6:	bf0c      	ite	eq
 800a8b8:	f8c8 2000 	streq.w	r2, [r8]
 800a8bc:	605a      	strne	r2, [r3, #4]
 800a8be:	e7eb      	b.n	800a898 <_malloc_r+0xa8>
 800a8c0:	4623      	mov	r3, r4
 800a8c2:	6864      	ldr	r4, [r4, #4]
 800a8c4:	e7ae      	b.n	800a824 <_malloc_r+0x34>
 800a8c6:	463c      	mov	r4, r7
 800a8c8:	687f      	ldr	r7, [r7, #4]
 800a8ca:	e7b6      	b.n	800a83a <_malloc_r+0x4a>
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	42a3      	cmp	r3, r4
 800a8d2:	d1fb      	bne.n	800a8cc <_malloc_r+0xdc>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	6053      	str	r3, [r2, #4]
 800a8d8:	e7de      	b.n	800a898 <_malloc_r+0xa8>
 800a8da:	230c      	movs	r3, #12
 800a8dc:	6033      	str	r3, [r6, #0]
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f000 f80c 	bl	800a8fc <__malloc_unlock>
 800a8e4:	e794      	b.n	800a810 <_malloc_r+0x20>
 800a8e6:	6005      	str	r5, [r0, #0]
 800a8e8:	e7d6      	b.n	800a898 <_malloc_r+0xa8>
 800a8ea:	bf00      	nop
 800a8ec:	20000a34 	.word	0x20000a34

0800a8f0 <__malloc_lock>:
 800a8f0:	4801      	ldr	r0, [pc, #4]	@ (800a8f8 <__malloc_lock+0x8>)
 800a8f2:	f000 b84b 	b.w	800a98c <__retarget_lock_acquire_recursive>
 800a8f6:	bf00      	nop
 800a8f8:	20000b70 	.word	0x20000b70

0800a8fc <__malloc_unlock>:
 800a8fc:	4801      	ldr	r0, [pc, #4]	@ (800a904 <__malloc_unlock+0x8>)
 800a8fe:	f000 b846 	b.w	800a98e <__retarget_lock_release_recursive>
 800a902:	bf00      	nop
 800a904:	20000b70 	.word	0x20000b70

0800a908 <memset>:
 800a908:	4402      	add	r2, r0
 800a90a:	4603      	mov	r3, r0
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d100      	bne.n	800a912 <memset+0xa>
 800a910:	4770      	bx	lr
 800a912:	f803 1b01 	strb.w	r1, [r3], #1
 800a916:	e7f9      	b.n	800a90c <memset+0x4>

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	@ (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f6 fc40 	bl	80011a8 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20000b74 	.word	0x20000b74

0800a938 <__errno>:
 800a938:	4b01      	ldr	r3, [pc, #4]	@ (800a940 <__errno+0x8>)
 800a93a:	6818      	ldr	r0, [r3, #0]
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	2000002c 	.word	0x2000002c

0800a944 <__libc_init_array>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	4d0d      	ldr	r5, [pc, #52]	@ (800a97c <__libc_init_array+0x38>)
 800a948:	4c0d      	ldr	r4, [pc, #52]	@ (800a980 <__libc_init_array+0x3c>)
 800a94a:	1b64      	subs	r4, r4, r5
 800a94c:	10a4      	asrs	r4, r4, #2
 800a94e:	2600      	movs	r6, #0
 800a950:	42a6      	cmp	r6, r4
 800a952:	d109      	bne.n	800a968 <__libc_init_array+0x24>
 800a954:	4d0b      	ldr	r5, [pc, #44]	@ (800a984 <__libc_init_array+0x40>)
 800a956:	4c0c      	ldr	r4, [pc, #48]	@ (800a988 <__libc_init_array+0x44>)
 800a958:	f000 f864 	bl	800aa24 <_init>
 800a95c:	1b64      	subs	r4, r4, r5
 800a95e:	10a4      	asrs	r4, r4, #2
 800a960:	2600      	movs	r6, #0
 800a962:	42a6      	cmp	r6, r4
 800a964:	d105      	bne.n	800a972 <__libc_init_array+0x2e>
 800a966:	bd70      	pop	{r4, r5, r6, pc}
 800a968:	f855 3b04 	ldr.w	r3, [r5], #4
 800a96c:	4798      	blx	r3
 800a96e:	3601      	adds	r6, #1
 800a970:	e7ee      	b.n	800a950 <__libc_init_array+0xc>
 800a972:	f855 3b04 	ldr.w	r3, [r5], #4
 800a976:	4798      	blx	r3
 800a978:	3601      	adds	r6, #1
 800a97a:	e7f2      	b.n	800a962 <__libc_init_array+0x1e>
 800a97c:	0800aa60 	.word	0x0800aa60
 800a980:	0800aa60 	.word	0x0800aa60
 800a984:	0800aa60 	.word	0x0800aa60
 800a988:	0800aa64 	.word	0x0800aa64

0800a98c <__retarget_lock_acquire_recursive>:
 800a98c:	4770      	bx	lr

0800a98e <__retarget_lock_release_recursive>:
 800a98e:	4770      	bx	lr

0800a990 <_free_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4605      	mov	r5, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	d041      	beq.n	800aa1c <_free_r+0x8c>
 800a998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99c:	1f0c      	subs	r4, r1, #4
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	bfb8      	it	lt
 800a9a2:	18e4      	addlt	r4, r4, r3
 800a9a4:	f7ff ffa4 	bl	800a8f0 <__malloc_lock>
 800a9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa20 <_free_r+0x90>)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x2c>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	4628      	mov	r0, r5
 800a9b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9b8:	f7ff bfa0 	b.w	800a8fc <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x42>
 800a9c0:	6820      	ldr	r0, [r4, #0]
 800a9c2:	1821      	adds	r1, r4, r0
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x1e>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x4c>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x42>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1850      	adds	r0, r2, r1
 800a9e0:	42a0      	cmp	r0, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x6c>
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	4401      	add	r1, r0
 800a9e8:	1850      	adds	r0, r2, r1
 800a9ea:	4283      	cmp	r3, r0
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x22>
 800a9f0:	6818      	ldr	r0, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	6053      	str	r3, [r2, #4]
 800a9f6:	4408      	add	r0, r1
 800a9f8:	6010      	str	r0, [r2, #0]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x22>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x74>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x22>
 800aa04:	6820      	ldr	r0, [r4, #0]
 800aa06:	1821      	adds	r1, r4, r0
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf04      	itt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	bf04      	itt	eq
 800aa14:	1809      	addeq	r1, r1, r0
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	6054      	str	r4, [r2, #4]
 800aa1a:	e7ca      	b.n	800a9b2 <_free_r+0x22>
 800aa1c:	bd38      	pop	{r3, r4, r5, pc}
 800aa1e:	bf00      	nop
 800aa20:	20000a34 	.word	0x20000a34

0800aa24 <_init>:
 800aa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa26:	bf00      	nop
 800aa28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa2a:	bc08      	pop	{r3}
 800aa2c:	469e      	mov	lr, r3
 800aa2e:	4770      	bx	lr

0800aa30 <_fini>:
 800aa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa32:	bf00      	nop
 800aa34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa36:	bc08      	pop	{r3}
 800aa38:	469e      	mov	lr, r3
 800aa3a:	4770      	bx	lr
